 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 1 - 8/7/2025 21:50:51


    1/   0 :                            ;	8088 NASCOM BASIC
    2/   0 :                            ;		Converted source code from 8080/Z80 to 8086
    3/   0 :                            ;	Assembler: Macro Assembler 1.42
    4/   0 :                            ;
    5/   0 :                            ;
    6/   0 :                            ;	SBCV20 NASCOM BASIC
    7/   0 :                            ;	Assembler: asm86.com/asm86.cmd
    8/   0 :                            ;
    9/   0 :                            
   10/   0 :                            	CPU	8086
   11/   0 :                            	ASSUME	CS:CODE, DS:DATA, SS:DATA, ES:DATA
   12/   0 :                            
   13/   0 : =0H                        IP_OFF	EQU	0h	; program top
   14/   0 : =40H                       CS_SEG	equ	40h
   15/   0 :                            
   16/   0 : =200H                      EMROM	EQU	200h	; Start address in emulation mode
   17/   0 :                            
   18/   0 : =3200H                     RAMTOP	EQU	TB_WORK ; BASIC Work space
   19/   0 : =3245H                     WRKSPC	EQU	RAMTOP+45H  ; BASIC Work space
   20/   0 :                            ;
   21/   0 :                            ;	dseg
   22/   0 :                            	SEGMENT	DATA
   23/ 3EC :                            	ORG	0400h-20
   24/ 3EC :                            VGETCH	DS	4	; CALLN 251
   25/ 3F0 :                            VKBHIT	DS	4	; CALLN 252
   26/ 3F4 :                            VPUTCH	DS	4	; CALLN 253
   27/ 3F8 :                            VBRKEM	DS	4	; BRKEM 254
   28/ 3FC :                            INTREQ	DS	4	; External interrupt
   29/ 400 :                            
   30/   0 :                            	SEGMENT	CODE
   31/   0 :                            	ORG	IP_OFF
   32/   0 :                            ;
   33/   0 :                            ;	Start
   34/   0 :                            start:
   35/   0 : 33 C0                      	xor	ax, ax
   36/   2 : 8E D8                      	mov	ds, ax
   37/   4 : B8 40 00                   	mov	ax, CS_SEG	; Set com model
   38/   7 : 8E C0                      	mov	es, ax		; Overlay ds with cs
   39/   9 : 8E D0                      	mov	ss, ax		; Overlay ss with cs
   40/   B : BC 00 32                   	mov	sp, SYSSTK	; Set stack
   41/   E :                            ;
   42/   E :                            ;	Vector 251-255 setup
   43/   E :                            
   44/   E : C7 06 EC 03 63 00          	mov	WORD PTR [VGETCH], ngetch
   45/  14 : A3 EE 03                   	mov	[VGETCH+2], ax
   46/  17 : C7 06 F0 03 67 00          	mov	WORD PTR [VKBHIT], nkbhit
   47/  1D : A3 F2 03                   	mov	[VKBHIT+2], ax
   48/  20 : C7 06 F4 03 6B 00          	mov	WORD PTR [VPUTCH], nputch
   49/  26 : A3 F6 03                   	mov	[VPUTCH+2], ax
   50/  29 : C7 06 F8 03 00 02          	mov	WORD PTR [VBRKEM], EMROM
   51/  2F : A3 FA 03                   	mov	[VBRKEM+2], ax
   52/  32 : 8E D8                      	mov	ds, ax
   53/  34 :                            
   54/  34 :                            	; save initial data to work space
   55/  34 : BE 11 05                   	mov	si, INITAB
   56/  37 : BF 45 32                   	mov	di, WRKSPC
   57/  3A : B9 68 00                   	MOV	cx,INITBE-INITAB+3	; Bytes to copy
   58/  3D : FC                         	cld
   59/  3E : F3 A4                      	rep movsb
   60/  40 :                            
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 2 - 8/7/2025 21:50:51


   61/  40 : E9 BD 01                   	JMP	PROG_CODE
   62/  43 :                            
   63/  43 :                            ;
   64/  43 :                            ; return to universal monitor
   65/  43 :                            ;
   66/  43 :                            ret_mon:
   67/  43 : B4 00                      	mov	ah, 0
   68/  45 : CD 21                      	int	21h		; goto monitor
   69/  47 :                            
   70/  47 :                            ; get a charactor : AH = 7
   71/  47 :                            ; return AL : charactor
   72/  47 :                            getch:
   73/  47 :                            
   74/  47 : B4 07                      	mov	ah, 7
   75/  49 : CD 21                      	int	21h
   76/  4B : B4 00                      	mov	ah, 0
   77/  4D : C3                         	ret
   78/  4E :                            
   79/  4E :                            ; put a charactor : AH = 2
   80/  4E :                            ; al -> console
   81/  4E :                            putch:
   82/  4E : 52                         	push	dx
   83/  4F : B4 02                      	mov	ah, 2
   84/  51 : 8A D0                      	mov	dl, al
   85/  53 : CD 21                      	int	21h		; system call
   86/  55 : 5A                         	pop	dx
   87/  56 : C3                         	ret
   88/  57 :                            ;
   89/  57 :                            ;	put string
   90/  57 :                            puts:
   91/  57 : FC                         	cld			; set DF for SI increment
   92/  58 :                            ptst1:
   93/  58 : AC                         	lodsb			; get data to AL and SI++
   94/  59 : 3C 00                      	cmp	al,00h		; check tail
   95/  5B : 74 05                      	jz	ptext		; if tail, return
   96/  5D : E8 EE FF                   	call	putch		; display a charactor
   97/  60 : EB F6                      	jmp	ptst1		; loop until tail
   98/  62 :                            ptext:
   99/  62 : C3                         	ret
  100/  63 :                            
  101/  63 :                            ;	CALLN wrapping
  102/  63 :                            ngetch:
  103/  63 : E8 E1 FF                   	call	getch		; Get a char
  104/  66 : CF                         	iret
  105/  67 :                            
  106/  67 :                            nkbhit:
  107/  67 : E8 98 01                   	call	CHKCHR
  108/  6A : CF                         	iret
  109/  6B :                            
  110/  6B :                            nputch:
  111/  6B : E8 E0 FF                   	call	putch		; Put a char
  112/  6E : CF                         	iret
  113/  6F :                            
  114/  6F :                            ;;
  115/  6F :                            ;;	Returned native mode
  116/  6F :                            ;	mov	si,offset natv	;8088 message
  117/  6F :                            ;	call	puts		;Out it
  118/  6F :                            ;	jmps	$		;Stop
  119/  6F :                            ;;
  120/  6F :                            
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 3 - 8/7/2025 21:50:51


  121/  6F :                            
  122/  6F :                            ;       MS-BASIC START UP ROUTINE
  123/  6F :                            ;       TARGET: SBC8080
  124/  6F :                            ;       ASSEMBLER: ARCPIT XZ80.EXE
  125/  6F :                            ;
  126/ 200 :                            	ORG	EMROM
  127/ 200 :                            ;
  128/ 200 :                            ;       START BASIC
  129/ 200 :                            PROG_CODE:
  130/ 200 : EB 09                      	JMP	COLD
  131/ 202 :                            
  132/ 202 :                            ; check key status : AH = 0BH
  133/ 202 :                            ; OUTPUT : AL : 0     ( key is not exist )
  134/ 202 :                            ;             : 0FFH  ( key is exist )
  135/ 202 :                            CHKCHR:
  136/ 202 : B4 0B                      	mov	ah, 0bh
  137/ 204 : CD 21                      	int	21h
  138/ 206 : B4 00                      	mov	ah, 0
  139/ 208 : 24 01                      	and	al, 1
  140/ 20A : C3                         	RET
  141/ 20B :                            
  142/ 20B :                            ;
  143/ 20B :                            ;==================================================================================
  144/ 20B :                            ; The updates to the original BASIC within this file are copyright Grant Searle
  145/ 20B :                            ;
  146/ 20B :                            ; You have permission to use this for NON COMMERCIAL USE ONLY
  147/ 20B :                            ; If you wish to use it elsewhere, please include an acknowledgement to myself.
  148/ 20B :                            ;
  149/ 20B :                            ; http://searle.hostei.com/grant/index.html
  150/ 20B :                            ;
  151/ 20B :                            ; eMail: home.micros01@btinternet.com
  152/ 20B :                            ;
  153/ 20B :                            ; If the above don't work, please perform an Internet search to see if I have
  154/ 20B :                            ; updated the web page hosting service.
  155/ 20B :                            ;
  156/ 20B :                            ;==================================================================================
  157/ 20B :                            ;
  158/ 20B :                            ; NASCOM ROM BASIC Ver 4.7, (C) 1978 Microsoft
  159/ 20B :                            ; Scanned from source published in 80-BUS NEWS from Vol 2, Issue 3
  160/ 20B :                            ; (May-June 1983) to Vol 3, Issue 3 (May-June 1984)
  161/ 20B :                            ; Adapted for the freeware Zilog Macro Assembler 2.10 to produce
  162/ 20B :                            ; the original ROM code (checksum A934H). PA
  163/ 20B :                            ;
  164/ 20B :                            ; GENERAL EQUATES
  165/ 20B :                            ;
  166/ 20B : =3H                        CTRLC		EQU	03H	; Control "C"
  167/ 20B : =7H                        CTRLG		EQU	07H	; Control "G"
  168/ 20B : =8H                        BKSP		EQU	08H	; Back space
  169/ 20B : =0AH                       LF		EQU	0AH	; Line feed
  170/ 20B : =0CH                       CLRSCRN		EQU	0CH	; Clear screen
  171/ 20B : =0DH                       CR		EQU	0DH	; Carriage return
  172/ 20B : =0FH                       CTRLO		EQU	0FH	; Control "O"
  173/ 20B : =11H                       CTRLQ		EQU	11H	; Control "Q"
  174/ 20B : =12H                       CTRLR		EQU	12H	; Control "R"
  175/ 20B : =13H                       CTRLS		EQU	13H	; Control "S"
  176/ 20B : =15H                       CTRLU		EQU	15H	; Control "U"
  177/ 20B : =1BH                       ESC		EQU	1BH	; Escape
  178/ 20B : =7FH                       DEL		EQU	7FH	; Delete
  179/ 20B :                            ;
  180/ 20B :                            ; BASIC WORK SPACE LOCATIONS
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 4 - 8/7/2025 21:50:51


  181/ 20B :                            ;
  182/ 20B : =32ADH                     BUFFER		EQU	WRKSPC+61H  +7; Input buffer
  183/ 20B : =32B2H                     STACK		EQU	WRKSPC+66H  +7; Initial stack
  184/ 20B : =32F7H                     CURPOS		EQU	WRKSPC+0ABH +7; Character position on line
  185/ 20B : =32F8H                     LCRFLG		EQU	WRKSPC+0ACH +7; Locate/Create flag
  186/ 20B : =32F9H                     TYPE		EQU	WRKSPC+0ADH +7; Data type flag
  187/ 20B : =32FAH                     DATFLG		EQU	WRKSPC+0AEH +7; Literal statement flag
  188/ 20B : =32FBH                     LSTRAM		EQU	WRKSPC+0AFH +7; Last available RAM
  189/ 20B : =32FDH                     TMSTPT		EQU	WRKSPC+0B1H +7; Temporary string pointer
  190/ 20B : =32FFH                     TMSTPL		EQU	WRKSPC+0B3H +7; Temporary string pool
  191/ 20B : =330BH                     TMPSTR		EQU	WRKSPC+0BFH +7; Temporary string
  192/ 20B : =330FH                     STRBOT		EQU	WRKSPC+0C3H +7; Bottom of string space
  193/ 20B : =3311H                     CUROPR		EQU	WRKSPC+0C5H +7; Current operator in EVAL
  194/ 20B : =3313H                     LOOPST		EQU	WRKSPC+0C7H +7; First statement of loop
  195/ 20B : =3315H                     DATLIN		EQU	WRKSPC+0C9H +7; Line of current DATA item
  196/ 20B : =3317H                     FORFLG		EQU	WRKSPC+0CBH +7; "FOR" loop flag
  197/ 20B : =3318H                     LSTBIN		EQU	WRKSPC+0CCH +7; Last byte entered
  198/ 20B : =3319H                     READFG		EQU	WRKSPC+0CDH +7; Read/Input flag
  199/ 20B : =331AH                     BRKLIN		EQU	WRKSPC+0CEH +7; Line of break
  200/ 20B : =331CH                     NXTOPR		EQU	WRKSPC+0D0H +7; Next operator in EVAL
  201/ 20B : =331EH                     ERRLIN		EQU	WRKSPC+0D2H +7; Line of error
  202/ 20B : =3320H                     CONTAD		EQU	WRKSPC+0D4H +7; Where to CONTinue
  203/ 20B : =3322H                     PROGND		EQU	WRKSPC+0D6H +7; End of program
  204/ 20B : =3324H                     VAREND		EQU	WRKSPC+0D8H +7; End of variables
  205/ 20B : =3326H                     ARREND		EQU	WRKSPC+0DAH +7; End of arrays
  206/ 20B : =3328H                     NXTDAT		EQU	WRKSPC+0DCH +7; Next data item
  207/ 20B : =332AH                     FNRGNM		EQU	WRKSPC+0DEH +7; Name of FN argument
  208/ 20B : =332CH                     FNARG		EQU	WRKSPC+0E0H +7; FN argument value
  209/ 20B : =3330H                     FPREG		EQU	WRKSPC+0E4H +7; Floating point register
  210/ 20B : =3333H                     FPEXP		EQU	FPREG+3       ; Floating point exponent
  211/ 20B : =3334H                     SGNRES		EQU	WRKSPC+0E8H +7; Sign of result
  212/ 20B : =3335H                     PBUFF		EQU	WRKSPC+0E9H +7; Number print buffer
  213/ 20B : =3342H                     MULVAL		EQU	WRKSPC+0F6H +7; Multiplier
  214/ 20B : =3345H                     PROGST		EQU	WRKSPC+0F9H +7; Start of program text area
  215/ 20B : =33A9H                     STLOOK		EQU	WRKSPC+15DH +7; Start of memory test
  216/ 20B :                            ;
  217/ 20B :                            ; BASIC ERROR CODE VALUES
  218/ 20B :                            ;
  219/ 20B : =0H                        NF	EQU	00H	; NEXT without FOR
  220/ 20B : =2H                        SN	EQU	02H	; Syntax error
  221/ 20B : =4H                        RG	EQU	04H	; RETURN without GOSUB
  222/ 20B : =6H                        OD	EQU	06H	; Out of DATA
  223/ 20B : =8H                        FC	EQU	08H	; Function call error
  224/ 20B : =0AH                       OV	EQU	0AH	; Overflow
  225/ 20B : =0CH                       OM	EQU	0CH	; Out of memory
  226/ 20B : =0EH                       UL	EQU	0EH	; Undefined line number
  227/ 20B : =10H                       BS	EQU	10H	; Bad subscript
  228/ 20B : =12H                       RD	EQU	12H	; Re-DIMensioned array
  229/ 20B : =14H                       DZ	EQU	14H	; Division by zero (/0)
  230/ 20B : =16H                       ID	EQU	16H	; Illegal direct
  231/ 20B : =18H                       TM	EQU	18H	; Type miss-match
  232/ 20B : =1AH                       OS	EQU	1AH	; Out of string space
  233/ 20B : =1CH                       LS	EQU	1CH	; String too long
  234/ 20B : =1EH                       ST	EQU	1EH	; String formula too complex
  235/ 20B : =20H                       CN	EQU	20H	; Can't CONTinue
  236/ 20B : =22H                       UF	EQU	22H	; UnDEFined FN function
  237/ 20B : =24H                       MO	EQU	24H	; Missing operand
  238/ 20B : =26H                       HX	EQU	26H	; HEX error
  239/ 20B : =28H                       BN	EQU	28H	; BIN error
  240/ 20B :                            ;
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 5 - 8/7/2025 21:50:51


  241/ 20B :                            COLD:
  242/ 20B : EB 03                      	JMP	STARTB			; Jump for cold start jump
  243/ 20D :                            WARM:
  244/ 20D : E9 88 00                   	JMP	WARMST			; Jump for warm start jump
  245/ 210 :                            STARTB:
  246/ 210 : EB 04                      	JMP	CSTART			; Jump to initialise
  247/ 212 :                            ;
  248/ 212 : F0 0C                      	DW	DEINT			; Get integer -32768 to 32767
  249/ 214 : 4D 17                      	DW	ABPASS			; Return integer in AB
  250/ 216 :                            ;
  251/ 216 :                            CSTART:
  252/ 216 : BB 45 32                   	MOV	BX,WRKSPC		; Start of workspace RAM
  253/ 219 : 8B E3                      	MOV	SP,BX			; Set up a temporary stack
  254/ 21B : E9 8D 25                   	JMP	INITST			; Go to initialise
  255/ 21E :                            ;
  256/ 21E :                            INIT:
  257/ 21E :                            	; restore initial data from work space
  258/ 21E : BF 11 05                   	mov	di, INITAB
  259/ 221 : BE 45 32                   	mov	si, WRKSPC
  260/ 224 : B9 68 00                   	MOV	cx,INITBE-INITAB+3	; Bytes to copy
  261/ 227 : FC                         	cld
  262/ 228 : F3 A4                      	rep movsb
  263/ 22A :                            
  264/ 22A : 8B E3                      	MOV	SP,BX			; Temporary stack
  265/ 22C : E8 96 05                   	CALL	CLREG			; Clear registers and stack
  266/ 22F : E8 56 0D                   	CALL	PRCRLF			; Output CRLF
  267/ 232 : A2 F6 32                   	MOV	[BUFFER+72+1],AL	; Mark end of buffe
  268/ 235 : A2 45 33                   	MOV	[PROGST],AL  		; Initialise program area
  269/ 238 :                            MSIZE:
  270/ 238 : BB A9 33                   	MOV	BX,STLOOK		; Point to start of RAM
  271/ 23B :                            MLOOP:
  272/ 23B : 9F                         	LAHF
  273/ 23C : 43                         	INC	BX			; Next byte
  274/ 23D : 9E                         	SAHF
  275/ 23E : 8A C7                      	MOV	AL,BH			; Above address FFFF ?
  276/ 240 : 0A C3                      	OR	AL,BL
  277/ 242 : 74 0E                      	JZ	SETTOP			; Yes - 64K RAM
  278/ 244 : 8A 07                      	MOV	AL,[BX]			; Get contents
  279/ 246 : 8A E8                      	MOV	CH,AL			; Save it
  280/ 248 : F6 D0                      	NOT	AL			; Flip all bits
  281/ 24A : 88 07                      	MOV	[BX],AL			; Put it back
  282/ 24C : 3A 07                      	CMP	AL,[BX]			; RAM there if same
  283/ 24E : 88 2F                      	MOV	[BX],CH			; Restore old contents
  284/ 250 : 74 E9                      	JZ	MLOOP			; If RAM - test next byte
  285/ 252 :                            ;
  286/ 252 :                            SETTOP:
  287/ 252 : 9F                         	LAHF
  288/ 253 : 4B                         	DEC	BX			; Back one byte
  289/ 254 : 9E                         	SAHF
  290/ 255 : BA A8 33                   	MOV	DX,STLOOK-1		; See if enough RAM
  291/ 258 : E8 65 07                   	CALL	CPDEHL			; Compare DE with HL
  292/ 25B : 72 44                      	JC	NEMEM			; If not enough RAM
  293/ 25D : BA CE FF                   	MOV	DX,0-50			; 50 Bytes string space
  294/ 260 : 89 1E FB 32                	MOV	[LSTRAM],BX		; Save last available RAM
  295/ 264 : 03 DA                      	ADD	BX,DX			; Allocate string space
  296/ 266 : 2E 89 1E 70 05             	MOV	[STRSPC],BX		; Save string space
  297/ 26B : E8 1D 05                   	CALL	CLRPTR			; Clear program area
  298/ 26E : 2E 8B 1E 70 05             	MOV	BX,[STRSPC]		; Get end of memory
  299/ 273 : BA EF FF                   	MOV	DX,0-17			; Offset for free bytes
  300/ 276 : 03 DA                      	ADD	BX,DX			; Adjust HL
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 6 - 8/7/2025 21:50:51


  301/ 278 : BA 45 33                   	MOV	DX,PROGST		; Start of program text
  302/ 27B : 8A C3                      	MOV	AL,BL			; Get LSB
  303/ 27D : 2A C2                      	SUB	AL,DL			; Adjust it
  304/ 27F : 8A D8                      	MOV	BL,AL			; Re-save
  305/ 281 : 8A C7                      	MOV	AL,BH			; Get MSB
  306/ 283 : 1A C6                      	SBB	AL,DH			; Adjust it
  307/ 285 : 8A F8                      	MOV	BH,AL			; Re-save
  308/ 287 : 53                         	PUSH	BX			; Save bytes free
  309/ 288 : BB B8 02                   	MOV	BX,SIGNON		; Sign-on message
  310/ 28B : E8 45 16                   	CALL	PRS			; Output string
  311/ 28E : 5B                         	POP	BX			; Get bytes free back
  312/ 28F : E8 BB 1F                   	CALL	PRNTHL			; Output amount of free memory
  313/ 292 : BB A9 02                   	MOV	BX,BFREE		; " Bytes free" message
  314/ 295 : E8 3B 16                   	CALL	PRS			; Output string
  315/ 298 :                            WARMST:
  316/ 298 : BC B2 32                   	MOV	SP,STACK		; Temporary stack
  317/ 29B :                            BRKRET:
  318/ 29B : E8 27 05                   	CALL	CLREG			; Clear registers and s
  319/ 29E : E9 C5 03                   	JMP	PRNTOK			; Go to get command lin
  320/ 2A1 :                            ;
  321/ 2A1 :                            NEMEM:
  322/ 2A1 : BB FF 02                   	MOV	BX,MEMMSG		; Memory size not enough
  323/ 2A4 : E8 2C 16                   	CALL	PRS			; Print it
  324/ 2A7 :                            XXXXX:
  325/ 2A7 : EB FE                      	JMP	XXXXX			; Stop
  326/ 2A9 :                            ;
  327/ 2A9 :                            BFREE:
  328/ 2A9 : 20 42 79 74 65 73 20 66 72 	DB	" Bytes free",CR,LF,0,0
       2B2 : 65 65 0D 0A 00 00         
  329/ 2B8 :                            ;
  330/ 2B8 :                            SIGNON:
  331/ 2B8 : 49 4E 54 45 4C 38 30 38 30 	DB	"INTEL8080 Based x86 BASIC Ver 4.7b",CR,LF
       2C1 : 20 42 61 73 65 64 20 78 38
       2CA : 36 20 42 41 53 49 43 20 56
       2D3 : 65 72 20 34 2E 37 62 0D 0A
  332/ 2DC : 43 6F 70 79 72 69 67 68 74 	DB	"Copyright ",40,"C",41
       2E5 : 20 28 43 29               
  333/ 2E9 : 20 31 39 37 38 20 62 79 20 	DB	" 1978 by Microsoft",CR,LF,0,0
       2F2 : 4D 69 63 72 6F 73 6F 66 74
       2FB : 0D 0A 00 00               
  334/ 2FF :                            ;
  335/ 2FF :                            MEMMSG:
  336/ 2FF : 4D 65 6D 6F 72 79 20 73 69 	DB	"Memory size not enough",CR,LF
       308 : 7A 65 20 6E 6F 74 20 65 6E
       311 : 6F 75 67 68 0D 0A         
  337/ 317 : 54 68 65 20 73 79 73 74 65 	DB	"The system is stopped.",CR,LF,0,0
       320 : 6D 20 69 73 20 73 74 6F 70
       329 : 70 65 64 2E 0D 0A 00 00   
  338/ 331 :                            ;
  339/ 331 :                            ; FUNCTION ADDRESS TABLE
  340/ 331 :                            ;
  341/ 331 :                            FNCTAB:
  342/ 331 : 03 20                      	DW	SGN
  343/ 333 : 39 21                      	DW	INT
  344/ 335 : 1D 20                      	DW	ABS
  345/ 337 : 14 05                      	DW	USR
  346/ 339 : 1E 17                      	DW	FRE
  347/ 33B : 17 1C                      	DW	INP
  348/ 33D : 5B 17                      	DW	POS
  349/ 33F : B4 23                      	DW	SQR
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 7 - 8/7/2025 21:50:51


  350/ 341 : C3 24                      	DW	RND
  351/ 343 : 2B 1E                      	DW	LOG
  352/ 345 : 14 24                      	DW	EXP
  353/ 347 : 54 25                      	DW	COS
  354/ 349 : 5A 25                      	DW	SIN
  355/ 34B : C7 25                      	DW	TAN
  356/ 34D : DD 25                      	DW	ATN
  357/ 34F : 74 1C                      	DW	PEEK
  358/ 351 : 4F 26                      	DW	DEEK
  359/ 353 : 67 05                      	DW	POINT
  360/ 355 : FC 1A                      	DW	LEN
  361/ 357 : 31 18                      	DW	STR
  362/ 359 : CF 1B                      	DW	VAL
  363/ 35B : 0F 1B                      	DW	ASC
  364/ 35D : 29 1B                      	DW	CHR
  365/ 35F : 79 26                      	DW	HEX
  366/ 361 : 33 27                      	DW	BIN
  367/ 363 : 3B 1B                      	DW	LEFT
  368/ 365 : 79 1B                      	DW	RIGHT
  369/ 367 : 88 1B                      	DW	MID
  370/ 369 :                            ;
  371/ 369 :                            ; RESERVED WORD LIST
  372/ 369 :                            ;
  373/ 369 :                            WORDS:
  374/ 369 : C5 4E 44                   	DB	0C5H,"ND"
  375/ 36C : C6 4F 52                   	DB	0C6H,"OR"
  376/ 36F : CE 45 58 54                	DB	0CEH,"EXT"
  377/ 373 : C4 41 54 41                	DB	0C4H,"ATA"
  378/ 377 : C9 4E 50 55 54             	DB	0C9H,"NPUT"
  379/ 37C : C4 49 4D                   	DB	0C4H,"IM"
  380/ 37F : D2 45 41 44                	DB	0D2H,"EAD"
  381/ 383 : CC 45 54                   	DB	0CCH,"ET"
  382/ 386 : C7 4F 54 4F                	DB	0C7H,"OTO"
  383/ 38A : D2 55 4E                   	DB	0D2H,"UN"
  384/ 38D : C9 46                      	DB	0C9H,"F"
  385/ 38F : D2 45 53 54 4F 52 45       	DB	0D2H,"ESTORE"
  386/ 396 :                            
  387/ 396 : C7 4F 53 55 42             	DB	0C7H,"OSUB"
  388/ 39B : D2 45 54 55 52 4E          	DB	0D2H,"ETURN"
  389/ 3A1 : D2 45 4D                   	DB	0D2H,"EM"
  390/ 3A4 : D3 54 4F 50                	DB	0D3H,"TOP"
  391/ 3A8 : CF 55 54                   	DB	0CFH,"UT"
  392/ 3AB : CF 4E                      	DB	0CFH,"N"
  393/ 3AD : CE 55 4C 4C                	DB	0CEH,"ULL"
  394/ 3B1 : D7 41 49 54                	DB	0D7H,"AIT"
  395/ 3B5 : C4 45 46                   	DB	0C4H,"EF"
  396/ 3B8 : D0 4F 4B 45                	DB	0D0H,"OKE"
  397/ 3BC : C4 4F 4B 45                	DB	0C4H,"OKE"
  398/ 3C0 : D3 43 52 45 45 4E          	DB	0D3H,"CREEN"
  399/ 3C6 : CC 49 4E 45 53             	DB	0CCH,"INES"
  400/ 3CB : C3 4C 53                   	DB	0C3H,"LS"
  401/ 3CE : D7 49 44 54 48             	DB	0D7H,"IDTH"
  402/ 3D3 : CD 4F 4E 49 54 4F 52       	DB	0CDH,"ONITOR"
  403/ 3DA :                            
  404/ 3DA : D3 45 54                   	DB	0D3H,"ET"
  405/ 3DD : D2 45 53 45 54             	DB	0D2H,"ESET"
  406/ 3E2 : D0 52 49 4E 54             	DB	0D0H,"RINT"
  407/ 3E7 : C3 4F 4E 54                	DB	0C3H,"ONT"
  408/ 3EB : CC 49 53 54                	DB	0CCH,"IST"
  409/ 3EF : C3 4C 45 41 52             	DB	0C3H,"LEAR"
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 8 - 8/7/2025 21:50:51


  410/ 3F4 : C3 4C 4F 41 44             	DB	0C3H,"LOAD"
  411/ 3F9 : C3 53 41 56 45             	DB	0C3H,"SAVE"
  412/ 3FE : CE 45 57                   	DB	0CEH,"EW"
  413/ 401 :                            ;
  414/ 401 : D4 41 42 28                	DB	0D4H,"AB("
  415/ 405 : D4 4F                      	DB	0D4H,"O"
  416/ 407 : C6 4E                      	DB	0C6H,"N"
  417/ 409 : D3 50 43 28                	DB	0D3H,"PC("
  418/ 40D : D4 48 45 4E                	DB	0D4H,"HEN"
  419/ 411 : CE 4F 54                   	DB	0CEH,"OT"
  420/ 414 : D3 54 45 50                	DB	0D3H,"TEP"
  421/ 418 :                            ;
  422/ 418 : AB                         	DB	0ABH
  423/ 419 : AD                         	DB	0ADH
  424/ 41A : AA                         	DB	0AAH
  425/ 41B : AF                         	DB	0AFH
  426/ 41C : DE                         	DB	0DEH
  427/ 41D : C1 4E 44                   	DB	0C1H,"ND"
  428/ 420 : CF 52                      	DB	0CFH,"R"
  429/ 422 : BE                         	DB	0BEH
  430/ 423 : BD                         	DB	0BDH
  431/ 424 : BC                         	DB	0BCH
  432/ 425 :                            ;
  433/ 425 : D3 47 4E                   	DB	0D3H,"GN"
  434/ 428 : C9 4E 54                   	DB	0C9H,"NT"
  435/ 42B : C1 42 53                   	DB	0C1H,"BS"
  436/ 42E : D5 53 52                   	DB	0D5H,"SR"
  437/ 431 : C6 52 45                   	DB	0C6H,"RE"
  438/ 434 : C9 4E 50                   	DB	0C9H,"NP"
  439/ 437 : D0 4F 53                   	DB	0D0H,"OS"
  440/ 43A : D3 51 52                   	DB	0D3H,"QR"
  441/ 43D : D2 4E 44                   	DB	0D2H,"ND"
  442/ 440 : CC 4F 47                   	DB	0CCH,"OG"
  443/ 443 : C5 58 50                   	DB	0C5H,"XP"
  444/ 446 : C3 4F 53                   	DB	0C3H,"OS"
  445/ 449 : D3 49 4E                   	DB	0D3H,"IN"
  446/ 44C : D4 41 4E                   	DB	0D4H,"AN"
  447/ 44F : C1 54 4E                   	DB	0C1H,"TN"
  448/ 452 : D0 45 45 4B                	DB	0D0H,"EEK"
  449/ 456 : C4 45 45 4B                	DB	0C4H,"EEK"
  450/ 45A : D0 4F 49 4E 54             	DB	0D0H,"OINT"
  451/ 45F : CC 45 4E                   	DB	0CCH,"EN"
  452/ 462 : D3 54 52 24                	DB	0D3H,"TR$"
  453/ 466 : D6 41 4C                   	DB	0D6H,"AL"
  454/ 469 : C1 53 43                   	DB	0C1H,"SC"
  455/ 46C : C3 48 52 24                	DB	0C3H,"HR$"
  456/ 470 : C8 45 58 24                	DB	0C8H,"EX$"
  457/ 474 : C2 49 4E 24                	DB	0C2H,"IN$"
  458/ 478 : CC 45 46 54 24             	DB	0CCH,"EFT$"
  459/ 47D : D2 49 47 48 54 24          	DB	0D2H,"IGHT$"
  460/ 483 : CD 49 44 24                	DB	0CDH,"ID$"
  461/ 487 : 80                         	DB	80H         ; End of list marker
  462/ 488 :                            ;
  463/ 488 :                            ; KEYWORD ADDRESS TABLE
  464/ 488 :                            ;
  465/ 488 :                            WORDTB:
  466/ 488 : 5C 0C                      	DW	PEND
  467/ 48A : F8 0A                      	DW	FOR
  468/ 48C : 71 11                      	DW	NEXT
  469/ 48E : 31 0E                      	DW	DATA
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 9 - 8/7/2025 21:50:51


  470/ 490 : 28 10                      	DW	INPUT
  471/ 492 : A2 14                      	DW	DIM
  472/ 494 : 63 10                      	DW	READ
  473/ 496 : 54 0E                      	DW	LET
  474/ 498 : D0 0D                      	DW	GOTO
  475/ 49A : A7 0D                      	DW	RUN
  476/ 49C : E8 0E                      	DW	IF
  477/ 49E : 07 0C                      	DW	RESTOR
  478/ 4A0 : B4 0D                      	DW	GOSUB
  479/ 4A2 : FA 0D                      	DW	RETURN
  480/ 4A4 : 35 0E                      	DW	REM
  481/ 4A6 : 55 0C                      	DW	STOP
  482/ 4A8 : 23 1C                      	DW	POUT
  483/ 4AA : C1 0E                      	DW	ON
  484/ 4AC : BC 0C                      	DW	NULL
  485/ 4AE : 29 1C                      	DW	WAIT
  486/ 4B0 : 64 17                      	DW	DEF
  487/ 4B2 : 80 1C                      	DW	POKE
  488/ 4B4 : 5C 26                      	DW	DOKE
  489/ 4B6 : 35 0E                      	DW	REM
  490/ 4B8 : 3E 26                      	DW	LINES
  491/ 4BA : 2F 26                      	DW	CLS
  492/ 4BC : 34 26                      	DW	WIDTH
  493/ 4BE : A7 27                      	DW	MONITR
  494/ 4C0 : 6A 05                      	DW	PSET
  495/ 4C2 : 6D 05                      	DW	RESET
  496/ 4C4 : 12 0F                      	DW	PRINT
  497/ 4C6 : 9F 0C                      	DW	CONT
  498/ 4C8 : 40 0A                      	DW	LIST
  499/ 4CA : 48 0D                      	DW	CLEAR
  500/ 4CC : 35 0E                      	DW	REM
  501/ 4CE : 35 0E                      	DW	REM
  502/ 4D0 : 88 07                      	DW	NEW
  503/ 4D2 :                            ;
  504/ 4D2 :                            ; RESERVED WORD TOKEN VALUES
  505/ 4D2 :                            ;
  506/ 4D2 : =80H                       ZEND       EQU      080H        ; END
  507/ 4D2 : =81H                       ZFOR       EQU      081H        ; FOR
  508/ 4D2 : =83H                       ZDATA      EQU      083H        ; DATA
  509/ 4D2 : =88H                       ZGOTO      EQU      088H        ; GOTO
  510/ 4D2 : =8CH                       ZGOSUB     EQU      08CH        ; GOSUB
  511/ 4D2 : =8EH                       ZREM       EQU      08EH        ; REM
  512/ 4D2 : =9EH                       ZPRINT     EQU      09EH        ; PRINT
  513/ 4D2 : =0A4H                      ZNEW       EQU      0A4H        ; NEW
  514/ 4D2 :                            ;
  515/ 4D2 : =0A5H                      ZTAB       EQU      0A5H        ; TAB
  516/ 4D2 : =0A6H                      ZTO        EQU      0A6H        ; TO
  517/ 4D2 : =0A7H                      ZFN        EQU      0A7H        ; FN
  518/ 4D2 : =0A8H                      ZSPC       EQU      0A8H        ; SPC
  519/ 4D2 : =0A9H                      ZTHEN      EQU      0A9H        ; THEN
  520/ 4D2 : =0AAH                      ZNOT       EQU      0AAH        ; NOT
  521/ 4D2 : =0ABH                      ZSTEP      EQU      0ABH        ; STEP
  522/ 4D2 :                            ;
  523/ 4D2 : =0ACH                      ZPLUS      EQU      0ACH        ; +
  524/ 4D2 : =0ADH                      ZMINUS     EQU      0ADH        ; -
  525/ 4D2 : =0AEH                      ZTIMES     EQU      0AEH        ; *
  526/ 4D2 : =0AFH                      ZDIV       EQU      0AFH        ; /
  527/ 4D2 : =0B2H                      ZOR        EQU      0B2H        ; OR
  528/ 4D2 : =0B3H                      ZGTR       EQU      0B3H        ; >
  529/ 4D2 : =0B4H                      ZEQUAL     EQU      0B4H        ; M
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 10 - 8/7/2025 21:50:51


  530/ 4D2 : =0B5H                      ZLTH       EQU      0B5H        ; <
  531/ 4D2 : =0B6H                      ZSGN       EQU      0B6H        ; SGN
  532/ 4D2 : =0C7H                      ZPOINT     EQU      0C7H        ; POINT
  533/ 4D2 : =0CFH                      ZLEFT      EQU      0CDH +2     ; LEFT$
  534/ 4D2 :                            ;
  535/ 4D2 :                            ; ARITHMETIC PRECEDENCE TABLE
  536/ 4D2 :                            ;
  537/ 4D2 :                            PRITAB:
  538/ 4D2 : 79                         	DB	79H         ; Precedence value
  539/ 4D3 : 2D 22                      	DW	PADD        ; FPREG = <last> + FPREG
  540/ 4D5 :                            ;
  541/ 4D5 : 79                         	DB	79H         ; Precedence value
  542/ 4D6 : A3 1C                      	DW	PSUB        ; FPREG = <last> - FPREG
  543/ 4D8 :                            ;
  544/ 4D8 : 7C                         	DB	7CH         ; Precedence value
  545/ 4D9 : 7A 1E                      	DW	MULT        ; PPREG = <last> * FPREG
  546/ 4DB :                            ;
  547/ 4DB : 7C                         	DB	7CH         ; Precedence value
  548/ 4DC : F9 1E                      	DW	DIV         ; FPREG = <last> / FPREG
  549/ 4DE :                            ;
  550/ 4DE : 7F                         	DB	7FH         ; Precedence value
  551/ 4DF : BD 23                      	DW	POWER       ; FPREG = <last> ^ FPREG
  552/ 4E1 :                            ;
  553/ 4E1 : 50                         	DB	50H         ; Precedence value
  554/ 4E2 : 93 13                      	DW	PAND        ; FPREG = <last> AND FPREG
  555/ 4E4 :                            ;
  556/ 4E4 : 46                         	DB	46H         ; Precedence value
  557/ 4E5 : 8F 13                      	DW	POR         ; FPREG = <last> OR FPREG
  558/ 4E7 :                            ;
  559/ 4E7 :                            ; BASIC ERROR CODE LIST
  560/ 4E7 :                            ;
  561/ 4E7 :                            ERRORS:
  562/ 4E7 : 4E 46                      	DB	"NF"        ; NEXT without FOR
  563/ 4E9 : 53 4E                      	DB	"SN"        ; Syntax error
  564/ 4EB : 52 47                      	DB	"RG"        ; RETURN without GOSUB
  565/ 4ED : 4F 44                      	DB	"OD"        ; Out of DATA
  566/ 4EF : 46 43                      	DB	"FC"        ; Illegal function call
  567/ 4F1 : 4F 56                      	DB	"OV"        ; Overflow error
  568/ 4F3 : 4F 4D                      	DB	"OM"        ; Out of memory
  569/ 4F5 : 55 4C                      	DB	"UL"        ; Undefined line
  570/ 4F7 : 42 53                      	DB	"BS"        ; Bad subscript
  571/ 4F9 : 44 44                      	DB	"DD"        ; Re-DIMensioned array
  572/ 4FB : 2F 30                      	DB	"/0"        ; Division by zero
  573/ 4FD : 49 44                      	DB	"ID"        ; Illegal direct
  574/ 4FF : 54 4D                      	DB	"TM"        ; Type mis-match
  575/ 501 : 4F 53                      	DB	"OS"        ; Out of string space
  576/ 503 : 4C 53                      	DB	"LS"        ; String too long
  577/ 505 : 53 54                      	DB	"ST"        ; String formula too co
  578/ 507 : 43 4E                      	DB	"CN"        ; Can't CONTinue
  579/ 509 : 55 46                      	DB	"UF"        ; Undefined FN function
  580/ 50B : 4D 4F                      	DB	"MO"        ; Missing operand
  581/ 50D : 48 58                      	DB	"HX"        ; HEX error
  582/ 50F : 42 4E                      	DB	"BN"        ; BIN error
  583/ 511 :                            ;
  584/ 511 :                            ; INITIALISATION TABLE --------------------------------
  585/ 511 :                            ;
  586/ 511 :                            INITAB:
  587/ 511 : E9 84 FD                   	JMP	WARMST			; Warm start jump
  588/ 514 : E9 F3 07                   USR:	JMP	FCERR			; "USR (X)" jump (Set to Error)
  589/ 517 : E6 00                      OUTSUB:	OUT	0,AL			; "OUT p,n" skeleton
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 11 - 8/7/2025 21:50:51


  590/ 519 : C3                         	RET
  591/ 51A : =518H                      OTPORT	equ	OUTSUB+1
  592/ 51A :                            
  593/ 51A : 2C 00                      DIVSUP:	SUB	AL,0			; Division support routine
  594/ 51C : =51BH                      DIV1	equ	DIVSUP+1
  595/ 51C :                            
  596/ 51C : 8A D8                      	MOV	BL,AL
  597/ 51E : 8A C7                      	MOV	AL,BH
  598/ 520 :                            
  599/ 520 :                            div2_op:
  600/ 520 : =521H                      DIV2	equ	div2_op+1
  601/ 520 : 1C 00                      	SBB	AL,0
  602/ 522 : 8A F8                      	MOV	BH,AL
  603/ 524 : 8A C5                      	MOV	AL,CH
  604/ 526 :                            
  605/ 526 :                            div3_op:
  606/ 526 : =527H                      DIV3	equ	div3_op+1
  607/ 526 : 1C 00                      	SBB	AL,0
  608/ 528 : 8A E8                      	MOV	CH,AL
  609/ 52A :                            
  610/ 52A :                            div4_op:
  611/ 52A : =52BH                      DIV4	equ	div4_op+1
  612/ 52A : B0 00                      	MOV	AL,0
  613/ 52C : C3                         	RET
  614/ 52D :                            
  615/ 52D : 00 00 00                   SEED:	DB	0,0,0			; Random number seed ta
  616/ 530 : 35 4A CA 99                	DB	035H,04AH,0CAH,099H	;-2.65145E+07
  617/ 534 : 39 1C 76 98                	DB	039H,01CH,076H,098H	; 1.61291E+07
  618/ 538 : 22 95 B3 98                	DB	022H,095H,0B3H,098H	;-1.17691E+07
  619/ 53C : 0A DD 47 98                	DB	00AH,0DDH,047H,098H	; 1.30983E+07
  620/ 540 : 53 D1 99 99                	DB	053H,0D1H,099H,099H	;-2-01612E+07
  621/ 544 : 0A 1A 9F 98                	DB	00AH,01AH,09FH,098H	;-1.04269E+07
  622/ 548 : 65 BC CD 98                	DB	065H,0BCH,0CDH,098H	;-1.34831E+07
  623/ 54C : D6 77 3E 98                	DB	0D6H,077H,03EH,098H	; 1.24825E+07
  624/ 550 : 52 C7 4F 80                LSTRND:	DB	052H,0C7H,04FH,080H	; Last random n
  625/ 554 :                            
  626/ 554 : E4 00                      INPSUB:	IN	AL,0			; INP (x) skeleton
  627/ 556 : =555H                      INPORT	equ	INPSUB+1
  628/ 556 : C3                         	RET
  629/ 557 :                            
  630/ 557 : 01                         NULLS:	DB	1			; POS (x) number (1)
  631/ 558 : FF                         LWIDTH:	DB	255			; Terminal width (255)
  632/ 559 : 1C                         COMMAN:	DB	28			; Width for commas (3 colums)
  633/ 55A : 00                         NULFLG:	DB	0			; No nulls after input bytes
  634/ 55B : 00                         CTLOFG:	DB	0			; Output enabled (^O off)
  635/ 55C : 14 00                      LINESC:	DW	20			; Initial lines counter
  636/ 55E : 14 00                      LINESN:	DW	20			; Initial lines number
  637/ 560 : 00 00                      CHKSUM:	DW	0			; Array load/save check sum
  638/ 562 : 00                         NMIFLG:	DB	0			; Break not by NMI
  639/ 563 : 00                         BRKFLG:	DB	0			; Break flag
  640/ 564 : E9 CE 03                   RINPUT:	JMP	TTYLIN			; Input reflection (set to TTY)
  641/ 567 :                            ;POINT:	JMP	0000H			; POINT reflection unused
  642/ 567 :                            ;PSET:	JMP	0000H			; SET reflection
  643/ 567 :                            ;RESET:	JMP	0000H			; RESET reflection
  644/ 567 : C3                         POINT:	ret				; POINT reflection unused
  645/ 568 : 90                         	nop
  646/ 569 : 90                         	nop
  647/ 56A : C3                         PSET:	ret				; SET reflection unused
  648/ 56B : 90                         	nop
  649/ 56C : 90                         	nop
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 12 - 8/7/2025 21:50:51


  650/ 56D : C3                         RESET:	ret				; RESET reflection unused
  651/ 56E : 90                         	nop
  652/ 56F : 90                         	nop
  653/ 570 : A9 33                      STRSPC:	DW	STLOOK			; Temp string space
  654/ 572 : FE FF                      LINEAT:	DW	-2			; Current line number (old)
  655/ 574 : 46 33                      BASTXT:	DW	PROGST+1		; Start of program text
  656/ 576 :                            INITBE:					; END OF INITIALISATION TABLE
  657/ 576 :                            ;
  658/ 576 :                            ; END OF INITIALISATION TABLE -------------------------
  659/ 576 :                            ;
  660/ 576 :                            ERRMSG:
  661/ 576 : 20 45 72 72 6F 72 00       	DB	" Error",0
  662/ 57D :                            
  663/ 57D :                            INMSG:
  664/ 57D : 20 69 6E 20 00             	DB	" in ",0
  665/ 582 : =581H                      ZERBYT	EQU      $-1			; A zero byte
  666/ 582 :                            OKMSG:
  667/ 582 : 4F 6B 0D 0A 00 00          	DB	"Ok",CR,LF,0,0
  668/ 588 :                            BRKMSG:
  669/ 588 : 42 72 65 61 6B 00          	DB	"Break",0
  670/ 58E :                            ;
  671/ 58E :                            BAKSTK:
  672/ 58E : BB 04 00                   	MOV	BX,4			; Look for "FOR" block with
  673/ 591 : 03 DC                      	ADD	BX,SP			; same index as specified
  674/ 593 :                            LOKFOR:
  675/ 593 : 8A 07                      	MOV	AL,[BX]			; Get block ID
  676/ 595 :                            ;	LAHF
  677/ 595 : 43                         	INC	BX			; Point to index address
  678/ 596 :                            ;	SAHF
  679/ 596 : 3C 81                      	CMP	AL,ZFOR			; Is it a "FOR" token
  680/ 598 : 74 01                      	JZ	LOKFOR1
  681/ 59A : C3                         	RET				; No - exit
  682/ 59B :                            LOKFOR1:
  683/ 59B : 8A 0F                      	MOV	CL,[BX]			; BC = Address of "FOR" index
  684/ 59D :                            ;	LAHF
  685/ 59D : 43                         	INC	BX
  686/ 59E :                            ;	SAHF
  687/ 59E : 8A 2F                      	MOV	CH,[BX]
  688/ 5A0 :                            ;	LAHF
  689/ 5A0 : 43                         	INC	BX			; Point to sign of STEP
  690/ 5A1 :                            ;	SAHF
  691/ 5A1 : 53                         	PUSH	BX			; Save pointer to sign
  692/ 5A2 : 8B D9                      	MOV	BX,CX			; HL = address of "FOR" index
  693/ 5A4 : 8A C6                      	MOV	AL,DH			; See if an index was specified
  694/ 5A6 : 0A C2                      	OR	AL,DL			; DE = 0 if no index specified
  695/ 5A8 : 87 DA                      	XCHG	BX,DX			; Specified index into HL
  696/ 5AA : 74 05                      	JZ	INDFND			; Skip if no index given
  697/ 5AC : 87 DA                      	XCHG	BX,DX			; Index back into DE
  698/ 5AE : E8 0F 04                   	CALL	CPDEHL			; Compare index with one given
  699/ 5B1 :                            INDFND:
  700/ 5B1 : B9 0D 00                   	MOV	CX,16-3			; Offset to next block
  701/ 5B4 : 5B                         	POP	BX			; Restore pointer to sign
  702/ 5B5 : 75 01                      	JNZ	INDFND1
  703/ 5B7 : C3                         	RET				; Return if block found
  704/ 5B8 :                            INDFND1:
  705/ 5B8 : 03 D9                      	ADD	BX,CX			; Point to next block
  706/ 5BA : EB D7                      	JMP	LOKFOR			; Keep on looking
  707/ 5BC :                            ;
  708/ 5BC :                            MOVUP:
  709/ 5BC : E8 26 00                   	CALL	ENFMEM			; See if enough memory
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 13 - 8/7/2025 21:50:51


  710/ 5BF :                            MOVSTR:
  711/ 5BF : 51                         	PUSH	CX			; Save end of source
  712/ 5C0 : 8B EC                      	MOV	BP,SP
  713/ 5C2 : 87 5E 00                   	XCHG	[BP],BX			; Swap source and dest" end
  714/ 5C5 : 59                         	POP	CX			; Get end of destination
  715/ 5C6 :                            MOVLP:
  716/ 5C6 : E8 F7 03                   	CALL	CPDEHL			; See if list moved
  717/ 5C9 : 8A 07                      	MOV	AL,[BX]			; Get byte
  718/ 5CB : 87 D9                      	XCHG	BX,CX
  719/ 5CD : 88 07                      	MOV	[BX],AL			; Move it
  720/ 5CF : 87 D9                      	XCHG	BX,CX
  721/ 5D1 : 75 01                      	JNZ	MOVLP1
  722/ 5D3 : C3                         	RET				; Exit if all done
  723/ 5D4 :                            MOVLP1:
  724/ 5D4 :                            ;	LAHF
  725/ 5D4 : 49                         	DEC	CX			; Next byte to move to
  726/ 5D5 :                            ;	SAHF
  727/ 5D5 :                            ;	LAHF
  728/ 5D5 : 4B                         	DEC	BX			; Next byte to move
  729/ 5D6 :                            ;	SAHF
  730/ 5D6 : EB EE                      	JMP	MOVLP			; Loop until all bytes moved
  731/ 5D8 :                            ;
  732/ 5D8 :                            CHKSTK:
  733/ 5D8 : 53                         	PUSH	BX			; Save code string address
  734/ 5D9 : 8B 1E 26 33                	MOV	BX,[ARREND]		; Lowest free memory
  735/ 5DD : B5 00                      	MOV	CH,0			; BC = Number of levels to test
  736/ 5DF : 03 D9                      	ADD	BX,CX			; 2 Bytes for each level
  737/ 5E1 : 03 D9                      	ADD	BX,CX
  738/ 5E3 : EB 01                      	JMP	ENFMEM1			; Skip "PUSH HL"
  739/ 5E5 :                            ENFMEM:
  740/ 5E5 : 53                         	PUSH	BX			; Save code string address
  741/ 5E6 :                            ENFMEM1:
  742/ 5E6 : B0 D0                      	MOV	AL,0D0H			; LOW -48; 48 Bytes minimum RAM
  743/ 5E8 : 2A C3                      	SUB	AL,BL
  744/ 5EA : 8A D8                      	MOV	BL,AL
  745/ 5EC : B0 FF                      	MOV	AL,0FFH			; HIGH (-48); 48 Bytes minimum RAM
  746/ 5EE : 1A C7                      	SBB	AL,BH
  747/ 5F0 : 72 08                      	JC	OMERR			; Not enough - ?OM Erro
  748/ 5F2 : 8A F8                      	MOV	BH,AL
  749/ 5F4 : 03 DC                      	ADD	BX,SP			; Test if stack is overflowed
  750/ 5F6 : 5B                         	POP	BX			; Restore code string address
  751/ 5F7 : 73 01                      	JNC	OMERR
  752/ 5F9 : C3                         	RET				; Return if enough memory
  753/ 5FA :                            OMERR:
  754/ 5FA : B2 0C                      	MOV	DL,OM			; ?OM Error
  755/ 5FC : EB 23                      	JMP	ERROR
  756/ 5FE :                            ;
  757/ 5FE :                            DATSNR:
  758/ 5FE : 8B 1E 15 33                	MOV	BX,[DATLIN]		; Get line of current DATA item
  759/ 602 : 2E 89 1E 72 05             	MOV	[LINEAT],BX		; Save as current line
  760/ 607 :                            SNERR:
  761/ 607 : B2 02                      	MOV	DL,SN			; ?SN Error
  762/ 609 : EB 16                      	JMP	ERROR
  763/ 60B :                            DZERR:
  764/ 60B : B2 14                      	MOV	DL,DZ			; ?/0 Error
  765/ 60D : EB 12                      	JMP	ERROR
  766/ 60F :                            NFERR:
  767/ 60F : B2 00                      	MOV	DL,NF			; ?NF Error
  768/ 611 : EB 0E                      	JMP	ERROR
  769/ 613 :                            DDERR:
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 14 - 8/7/2025 21:50:51


  770/ 613 : B2 12                      	MOV	DL,RD			; ?DD Error
  771/ 615 : EB 0A                      	JMP	ERROR
  772/ 617 :                            UFERR:
  773/ 617 : B2 22                      	MOV	DL,UF			; ?UF Error
  774/ 619 : EB 06                      	JMP	ERROR
  775/ 61B :                            OVERR:
  776/ 61B : B2 0A                      	MOV	DL,OV			; ?OV Error
  777/ 61D : EB 02                      	JMP	ERROR
  778/ 61F :                            TMERR:
  779/ 61F : B2 18                      	MOV	DL,TM			; ?TM Error
  780/ 621 :                            ;
  781/ 621 :                            ERROR:
  782/ 621 : E8 A1 01                   	CALL	CLREG			; Clear registers and stack
  783/ 624 : 2E A2 5B 05                	MOV	[CTLOFG],AL		; Enable output (A is 0)
  784/ 628 : E8 4F 09                   	CALL	STTLIN			; Start new line
  785/ 62B : BB E7 04                   	MOV	BX,ERRORS		; Point to error codes
  786/ 62E : 8A F0                      	MOV	DH,AL			; D = 0 (A is 0)
  787/ 630 : B0 3F                      	MOV	AL,'?'
  788/ 632 : E8 B0 03                   	CALL	OUTC			; Output '?'
  789/ 635 : 03 DA                      	ADD	BX,DX			; Offset to correct error code
  790/ 637 : 8A 07                      	MOV	AL,[BX]			; First character
  791/ 639 : E8 A9 03                   	CALL	OUTC			; Output it
  792/ 63C : E8 B4 05                   	CALL	GETCHR			; Get next character
  793/ 63F : E8 A3 03                   	CALL	OUTC			; Output it
  794/ 642 : BB 76 05                   	MOV	BX,ERRMSG		; "Error" message
  795/ 645 :                            ERRIN:
  796/ 645 : E8 8B 12                   	CALL	PRS			; Output message
  797/ 648 : 2E 8B 1E 72 05             	MOV	BX,[LINEAT]		; Get line of error
  798/ 64D : BA FE FF                   	MOV	DX,-2			; Cold start error if -2
  799/ 650 : E8 6D 03                   	CALL	CPDEHL			; See if cold start error
  800/ 653 : 75 03                      	JNZ	ERRIN1			; Cold start error - Restart
  801/ 655 : E9 BE FB                   	JMP	CSTART
  802/ 658 :                            ERRIN1:
  803/ 658 : 8A C7                      	MOV	AL,BH			; Was it a direct error
  804/ 65A : 22 C3                      	AND	AL,BL			; Line = -1 if direct error
  805/ 65C : FE C0                      	INC	AL
  806/ 65E : 74 06                      	JZ	PRNTOK
  807/ 660 : E8 E2 1B                   	CALL	LINEIN			; No - output line of error
  808/ 663 : EB 01                      	JMP	PRNTOK			; Skip "POP BC"
  809/ 665 :                            POPNOK:
  810/ 665 : 59                         	POP	CX			; Drop address in input buffer
  811/ 666 :                            ;
  812/ 666 :                            PRNTOK:
  813/ 666 : 32 C0                      	XOR	AL,AL			; Output "Ok" and get command
  814/ 668 : 2E A2 5B 05                	MOV	[CTLOFG],AL		; Enable output
  815/ 66C : E8 0B 09                   	CALL	STTLIN			; Start new line
  816/ 66F : BB 82 05                   	MOV	BX,OKMSG		; "Ok" message
  817/ 672 : E8 5E 12                   	CALL	PRS			; Output "Ok"
  818/ 675 :                            GETCMD:
  819/ 675 : BB FF FF                   	MOV	BX,-1			; Flag direct mode
  820/ 678 : 2E 89 1E 72 05             	MOV	[LINEAT],BX		; Save as current line
  821/ 67D : E8 B5 02                   	CALL	GETLIN			; Get an input line
  822/ 680 : 72 F3                      	JC	GETCMD			; Get line again if break
  823/ 682 : E8 6E 05                   	CALL	GETCHR			; Get first character
  824/ 685 : FE C0                      	INC	AL			; Test if end of line
  825/ 687 : FE C8                      	DEC	AL			; Without affecting Carry
  826/ 689 : 74 EA                      	JZ	GETCMD			; Nothing entered - Get another
  827/ 68B : 9F                         	LAHF
  828/ 68C : 86 E0                      	XCHG	AH,AL
  829/ 68E : 50                         	PUSH	AX			; Save Carry status
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 15 - 8/7/2025 21:50:51


  830/ 68F : 86 E0                      	XCHG	AH,AL
  831/ 691 : E8 7B 06                   	CALL	ATOH			; Get line number into DE
  832/ 694 : 52                         	PUSH	DX			; Save line number
  833/ 695 : E8 61 01                   	CALL	CRUNCH			; Tokenise rest of line
  834/ 698 : 8A E8                      	MOV	CH,AL			; Length of tokenised line
  835/ 69A : 5A                         	POP	DX			; Restore line number
  836/ 69B : 58                         	POP	AX			; Restore Carry
  837/ 69C : 86 E0                      	XCHG	AH,AL
  838/ 69E : 9E                         	SAHF
  839/ 69F : 72 03                      	JC	GETCMD1
  840/ 6A1 : E9 20 05                   	JMP	EXCUTE			; No line number - Direct mode
  841/ 6A4 :                            GETCMD1:
  842/ 6A4 : 52                         	PUSH	DX			; Save line number
  843/ 6A5 : 51                         	PUSH	CX			; Save length of tokenised line
  844/ 6A6 : 32 C0                      	XOR	AL,AL
  845/ 6A8 : A2 18 33                   	MOV	[LSTBIN],AL		; Clear last byte input
  846/ 6AB : E8 45 05                   	CALL	GETCHR			; Get next character
  847/ 6AE : 0A C0                      	OR	AL,AL			; Set flags
  848/ 6B0 : 9F                         	LAHF
  849/ 6B1 : 86 E0                      	XCHG	AH,AL
  850/ 6B3 : 50                         	PUSH	AX			; And save them
  851/ 6B4 : 86 E0                      	XCHG	AH,AL
  852/ 6B6 : E8 9C 00                   	CALL	SRCHLN			; Search for line numbe
  853/ 6B9 : 72 11                      	JC	LINFND			; Jump if line found
  854/ 6BB : 58                         	POP	AX			; Get status
  855/ 6BC : 86 E0                      	XCHG	AH,AL
  856/ 6BE : 9E                         	SAHF
  857/ 6BF : 9F                         	LAHF
  858/ 6C0 : 86 E0                      	XCHG	AH,AL
  859/ 6C2 : 50                         	PUSH	AX			; And re-save
  860/ 6C3 : 86 E0                      	XCHG	AH,AL
  861/ 6C5 : 75 03                      	JNZ	GETCMD2
  862/ 6C7 : E9 2B 07                   	JMP	ULERR			; Nothing after number - Error
  863/ 6CA :                            GETCMD2:
  864/ 6CA : 0A C0                      	OR	AL,AL			; Clear Carry
  865/ 6CC :                            LINFND:
  866/ 6CC : 51                         	PUSH	CX			; Save address of line in prog
  867/ 6CD : 73 21                      	JNC	INEWLN			; Line not found - Inseer new
  868/ 6CF : 87 DA                      	XCHG	BX,DX			; Next line address in DE
  869/ 6D1 : 8B 1E 22 33                	MOV	BX,[PROGND]		; End of program
  870/ 6D5 :                            SFTPRG:
  871/ 6D5 : 87 DA                      	XCHG	BX,DX
  872/ 6D7 : 8A 07                      	MOV	AL,[BX]			; Shift rest of program down
  873/ 6D9 : 87 DA                      	XCHG	BX,DX
  874/ 6DB : 87 D9                      	XCHG	BX,CX
  875/ 6DD : 88 07                      	MOV	[BX],AL
  876/ 6DF : 87 D9                      	XCHG	BX,CX
  877/ 6E1 : 9F                         	LAHF
  878/ 6E2 : 41                         	INC	CX			; Next destination
  879/ 6E3 : 42                         	INC	DX			; Next source
  880/ 6E4 : 9E                         	SAHF
  881/ 6E5 : E8 D8 02                   	CALL	CPDEHL			; All done?
  882/ 6E8 : 75 EB                      	JNZ	SFTPRG			; More to do
  883/ 6EA : 8B D9                      	MOV	BX,CX			; HL - New end of program
  884/ 6EC : 89 1E 22 33                	MOV	[PROGND],BX		; Update end of program
  885/ 6F0 :                            ;
  886/ 6F0 :                            INEWLN:
  887/ 6F0 : 5A                         	POP	DX			; Get address of line,
  888/ 6F1 : 58                         	POP	AX			; Get status
  889/ 6F2 : 86 E0                      	XCHG	AH,AL
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 16 - 8/7/2025 21:50:51


  890/ 6F4 : 9E                         	SAHF
  891/ 6F5 : 74 35                      	JZ	SETPTR			; No text - Set up pointers
  892/ 6F7 : 8B 1E 22 33                	MOV	BX,[PROGND]		; Get end of program
  893/ 6FB : 8B EC                      	MOV	BP,SP
  894/ 6FD : 87 5E 00                   	XCHG	[BP],BX			; Get length of input line
  895/ 700 : 59                         	POP	CX			; End of program to BC
  896/ 701 : 03 D9                      	ADD	BX,CX			; Find new end
  897/ 703 : 53                         	PUSH	BX			; Save new end
  898/ 704 : E8 B5 FE                   	CALL	MOVUP			; Make space for line
  899/ 707 : 5B                         	POP	BX			; Restore new end
  900/ 708 : 89 1E 22 33                	MOV	[PROGND],BX		; Update end of program pointer
  901/ 70C : 87 DA                      	XCHG	BX,DX			; Get line to move up in HL
  902/ 70E : 88 3F                      	MOV	[BX],BH			; Save MSB
  903/ 710 : 5A                         	POP	DX			; Get new line number
  904/ 711 : 9F                         	LAHF
  905/ 712 : 43                         	INC	BX			; Skip pointer
  906/ 713 : 43                         	INC	BX
  907/ 714 : 88 17                      	MOV	[BX],DL			; Save LSB of line numb
  908/ 716 : 43                         	INC	BX
  909/ 717 : 88 37                      	MOV	[BX],DH			; Save MSB of line numb
  910/ 719 : 43                         	INC	BX			; To first byte in line
  911/ 71A : 9E                         	SAHF
  912/ 71B : BA AD 32                   	MOV	DX,BUFFER		; Copy buffer to program
  913/ 71E :                            MOVBUF:
  914/ 71E : 87 DA                      	XCHG	BX,DX
  915/ 720 : 8A 07                      	MOV	AL,[BX]			; Get source
  916/ 722 : 87 DA                      	XCHG	BX,DX
  917/ 724 : 88 07                      	MOV	[BX],AL			; Save destinations
  918/ 726 : 43                         	INC	BX			; Next source
  919/ 727 : 42                         	INC	DX			; Next destination
  920/ 728 : 0A C0                      	OR	AL,AL			; Done?
  921/ 72A : 75 F2                      	JNZ	MOVBUF			; No - Repeat
  922/ 72C :                            SETPTR:
  923/ 72C : E8 71 00                   	CALL	RUNFST			; Set line pointers
  924/ 72F : 9F                         	LAHF
  925/ 730 : 43                         	INC	BX			; To LSB of pointer
  926/ 731 : 9E                         	SAHF
  927/ 732 : 87 DA                      	XCHG	BX,DX			; Address to DE
  928/ 734 :                            PTRLP:
  929/ 734 : 8B DA                      	MOV	BX,DX			; Address to HL
  930/ 736 : 8A 07                      	MOV	AL,[BX]			; Get LSB of pointer
  931/ 738 : 43                         	INC	BX			; To MSB of pointer
  932/ 739 : 0A 07                      	OR	AL,[BX]			; Compare with MSB poiner
  933/ 73B : 75 03                      	JNZ	PTRLP1
  934/ 73D : E9 35 FF                   	JMP	GETCMD			; Get command line if end
  935/ 740 :                            PTRLP1:
  936/ 740 : 43                         	INC	BX			; To LSB of line number
  937/ 741 : 43                         	INC	BX			; Skip line number
  938/ 742 : 43                         	INC	BX			; Point to first byte i
  939/ 743 : 32 C0                      	XOR	AL,AL			; Looking for 00 byte
  940/ 745 :                            FNDEND:
  941/ 745 : 3A 07                      	CMP	AL,[BX]			; Found end of line?
  942/ 747 : 9F                         	LAHF
  943/ 748 : 43                         	INC	BX			; Move to next byte
  944/ 749 : 9E                         	SAHF
  945/ 74A : 75 F9                      	JNZ	FNDEND			; No - Keep looking
  946/ 74C : 87 DA                      	XCHG	BX,DX			; Next line address to HL
  947/ 74E : 88 17                      	MOV	[BX],DL			; Save LSB of pointer
  948/ 750 : 43                         	INC	BX
  949/ 751 : 88 37                      	MOV	[BX],DH			; Save MSB of pointer
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 17 - 8/7/2025 21:50:51


  950/ 753 : EB DF                      	JMP	PTRLP			; Do next line
  951/ 755 :                            ;
  952/ 755 :                            SRCHLN:
  953/ 755 : 2E 8B 1E 74 05             	MOV	BX,[BASTXT]		; Start of program text
  954/ 75A :                            SRCHLP:
  955/ 75A : 8B CB                      	MOV	CX,BX			; BC = Address to look at
  956/ 75C : 8A 07                      	MOV	AL,[BX]			; Get address of next line
  957/ 75E :                            ;	LAHF
  958/ 75E : 43                         	INC	BX
  959/ 75F :                            ;	SAHF
  960/ 75F : 0A 07                      	OR	AL,[BX]			; End of program found?
  961/ 761 : 9F                         	LAHF
  962/ 762 : 4B                         	DEC	BX
  963/ 763 : 9E                         	SAHF
  964/ 764 : 75 01                      	JNZ	SRCHLP1
  965/ 766 : C3                         	RET				; Yes - Line not found
  966/ 767 :                            SRCHLP1:
  967/ 767 :                            ;	LAHF
  968/ 767 : 43                         	INC	BX
  969/ 768 :                            ;	SAHF
  970/ 768 :                            ;	LAHF
  971/ 768 : 43                         	INC	BX
  972/ 769 :                            ;	SAHF
  973/ 769 : 8A 07                      	MOV	AL,[BX]			; Get LSB of line number
  974/ 76B :                            ;	LAHF
  975/ 76B : 43                         	INC	BX
  976/ 76C :                            ;	SAHF
  977/ 76C : 8A 3F                      	MOV	BH,[BX]			; Get MSB of line number
  978/ 76E : 8A D8                      	MOV	BL,AL
  979/ 770 : E8 4D 02                   	CALL	CPDEHL			; Compare with line in DE
  980/ 773 : 8B D9                      	MOV	BX,CX			; HL = Start of this line
  981/ 775 : 8A 07                      	MOV	AL,[BX]			; Get LSB of next line address
  982/ 777 : 9F                         	LAHF
  983/ 778 : 43                         	INC	BX
  984/ 779 : 9E                         	SAHF
  985/ 77A : 8A 3F                      	MOV	BH,[BX]			; Get MSB of next line address
  986/ 77C : 8A D8                      	MOV	BL,AL			; Next line to HL
  987/ 77E : F5                         	CMC
  988/ 77F : 75 01                      	JNZ	SRCHLP2
  989/ 781 : C3                         	RET				; Lines found - Exit
  990/ 782 :                            SRCHLP2:
  991/ 782 : F5                         	CMC
  992/ 783 : 72 01                      	JC	SRCHLP3
  993/ 785 : C3                         	RET				; Line not found,at line after
  994/ 786 :                            SRCHLP3:
  995/ 786 : EB D2                      	JMP	SRCHLP			; Keep looking
  996/ 788 :                            ;
  997/ 788 :                            NEW:
  998/ 788 : 74 01                      	JZ	CLRPTR
  999/ 78A : C3                         	RET				; Return if any more on line
 1000/ 78B :                            CLRPTR:
 1001/ 78B : 2E 8B 1E 74 05             	MOV	BX,[BASTXT]		; Point to start of program
 1002/ 790 : 32 C0                      	XOR	AL,AL			; Set program area to empty
 1003/ 792 : 88 07                      	MOV	[BX],AL			; Save LSB = 00
 1004/ 794 : 9F                         	LAHF
 1005/ 795 : 43                         	INC	BX
 1006/ 796 : 9E                         	SAHF
 1007/ 797 : 88 07                      	MOV	[BX],AL			; Save MSB = 00
 1008/ 799 : 9F                         	LAHF
 1009/ 79A : 43                         	INC	BX
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 18 - 8/7/2025 21:50:51


 1010/ 79B : 9E                         	SAHF
 1011/ 79C : 89 1E 22 33                	MOV	[PROGND],BX		; Set program end
 1012/ 7A0 :                            ;
 1013/ 7A0 :                            RUNFST:
 1014/ 7A0 : 2E 8B 1E 74 05             	MOV	BX,[BASTXT]		; Clear all variables
 1015/ 7A5 : 9F                         	LAHF
 1016/ 7A6 : 4B                         	DEC	BX
 1017/ 7A7 : 9E                         	SAHF
 1018/ 7A8 :                            ;
 1019/ 7A8 :                            INTVAR:
 1020/ 7A8 : 89 1E 1A 33                	MOV	[BRKLIN],BX		; Initialise RUN variables
 1021/ 7AC : 8B 1E FB 32                	MOV	BX,[LSTRAM]		; Get end of RAM
 1022/ 7B0 : 89 1E 0F 33                	MOV	[STRBOT],BX		; Clear string space
 1023/ 7B4 : 32 C0                      	XOR	AL,AL
 1024/ 7B6 : E8 4E 04                   	CALL	RESTOR			; Reset DATA pointers
 1025/ 7B9 : 8B 1E 22 33                	MOV	BX,[PROGND]		; Get end of program
 1026/ 7BD : 89 1E 24 33                	MOV	[VAREND],BX		; Clear variables
 1027/ 7C1 : 89 1E 26 33                	MOV	[ARREND],BX		; Clear arrays
 1028/ 7C5 :                            ;
 1029/ 7C5 :                            CLREG:
 1030/ 7C5 : 59                         	POP	CX			; Save return address
 1031/ 7C6 : 2E 8B 1E 70 05             	MOV	BX,[STRSPC]		; Get end of working RAM
 1032/ 7CB : 8B E3                      	MOV	SP,BX			; Set stack
 1033/ 7CD : BB FF 32                   	MOV	BX,TMSTPL		; Temporary string pool
 1034/ 7D0 : 89 1E FD 32                	MOV	[TMSTPT],BX		; Reset temporary string ptr
 1035/ 7D4 : 32 C0                      	XOR	AL,AL			; A = 00
 1036/ 7D6 : 8A D8                      	MOV	BL,AL			; HL = 0000
 1037/ 7D8 : 8A F8                      	MOV	BH,AL
 1038/ 7DA : 89 1E 20 33                	MOV	[CONTAD],BX		; No CONTinue
 1039/ 7DE : A2 17 33                   	MOV	[FORFLG],AL		; Clear FOR flag
 1040/ 7E1 : 89 1E 2A 33                	MOV	[FNRGNM],BX		 ; Clear FN argument
 1041/ 7E5 : 53                         	PUSH	BX			; HL = 0000
 1042/ 7E6 : 51                         	PUSH	CX			; Put back return
 1043/ 7E7 :                            DOAGN:
 1044/ 7E7 : 8B 1E 1A 33                	MOV	BX,[BRKLIN]		; Get address of code t
 1045/ 7EB : C3                         	RET				; Return to execution d
 1046/ 7EC :                            ;
 1047/ 7EC :                            PROMPT:
 1048/ 7EC : B0 3F                      	MOV	AL,'?'			; '?'
 1049/ 7EE : E8 F4 01                   	CALL	OUTC			; Output character
 1050/ 7F1 : B0 20                      	MOV	AL,' '			; Space
 1051/ 7F3 : E8 EF 01                   	CALL	OUTC			; Output character
 1052/ 7F6 :                            ;	JMP	RINPUT			; Get input line
 1053/ 7F6 : E9 3C 01                   	JMP	GETLIN			; Get input line
 1054/ 7F9 :                            ;
 1055/ 7F9 :                            CRUNCH:
 1056/ 7F9 : 32 C0                      	XOR	AL,AL			; Tokenise line @ HL to BUFFER
 1057/ 7FB : A2 FA 32                   	MOV	[DATFLG],AL		; Reset literal flag
 1058/ 7FE : B1 05                      	MOV	CL,2+3			; 2 byte number and 3 nulls
 1059/ 800 : BA AD 32                   	MOV	DX,BUFFER		; Start of input buffer
 1060/ 803 :                            CRNCLP:
 1061/ 803 : 8A 07                      	MOV	AL,[BX]			; Get byte
 1062/ 805 : 3C 20                      	CMP	AL,' '			; Is it a space?
 1063/ 807 : 75 03                      	JNZ	CRNCLP1			; Yes - Copy direct
 1064/ 809 : E9 9E 00                   	JMP	MOVDIR
 1065/ 80C :                            CRNCLP1:
 1066/ 80C : 8A E8                      	MOV	CH,AL			; Save character
 1067/ 80E : 3C 22                      	CMP	AL,'"'			; Is it a quote?
 1068/ 810 : 75 03                      	JNZ	CRNCLP2			; Yes - Copy literal string
 1069/ 812 : E9 C1 00                   	JMP	CPYLIT
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 19 - 8/7/2025 21:50:51


 1070/ 815 :                            CRNCLP2:
 1071/ 815 : 0A C0                      	OR	AL,AL			; Is it end of buffer?
 1072/ 817 : 75 03                      	JNZ	CRNCLP3			; Yes - End buffer
 1073/ 819 : E9 CA 00                   	JMP	ENDBUF
 1074/ 81C :                            CRNCLP3:
 1075/ 81C : A0 FA 32                   	MOV	AL,[DATFLG]		; Get data type
 1076/ 81F : 0A C0                      	OR	AL,AL			; Literal?
 1077/ 821 : 8A 07                      	MOV	AL,[BX]			; Get byte to copy
 1078/ 823 : 74 03                      	JZ	CRNCLP4			; Literal - Copy direct
 1079/ 825 : E9 82 00                   	JMP	MOVDIR
 1080/ 828 :                            CRNCLP4:
 1081/ 828 : 3C 3F                      	CMP	AL,'?'			; Is it '?' short for PRING
 1082/ 82A : B0 9E                      	MOV	AL,ZPRINT		; "PRINT" token
 1083/ 82C : 75 02                      	JNZ	CRNCLP5			; Yes - replace it
 1084/ 82E : EB 7A                      	JMP	MOVDIR
 1085/ 830 :                            CRNCLP5:
 1086/ 830 : 8A 07                      	MOV	AL,[BX]			; Get byte again
 1087/ 832 : 3C 30                      	CMP	AL,'0'			; Is it less than '0'
 1088/ 834 : 72 06                      	JC	FNDWRD			; Yes - Look for reserved words
 1089/ 836 : 3C 3C                      	CMP	AL,60			; ";"+1; Is it "0123456789:;" ?
 1090/ 838 : 73 02                      	JNC	FNDWRD			; Yes - copy it direct
 1091/ 83A : EB 6E                      	JMP	MOVDIR
 1092/ 83C :                            FNDWRD:
 1093/ 83C : 52                         	PUSH	DX			; Look for reserved words
 1094/ 83D : BA 68 03                   	MOV	DX,WORDS-1		; Point to table
 1095/ 840 : 51                         	PUSH	CX			; Save count
 1096/ 841 : B9 A4 08                   	MOV	CX,RETNAD		; Where to return to
 1097/ 844 : 51                         	PUSH	CX			; Save return address
 1098/ 845 : B5 7F                      	MOV	CH,ZEND-1		; First token value -1
 1099/ 847 : 8A 07                      	MOV	AL,[BX]			; Get byte
 1100/ 849 : 3C 61                      	CMP	AL,'a'			; Less than 'a' ?
 1101/ 84B : 72 08                      	JC	SEARCH			; Yes - search for words
 1102/ 84D : 3C 7B                      	CMP	AL,'z'+1		; Greater than 'z' ?
 1103/ 84F : 73 04                      	JNC	SEARCH			; Yes - search for words
 1104/ 851 : 24 5F                      	AND	AL,01011111B		; Force upper case
 1105/ 853 : 88 07                      	MOV	[BX],AL			; Replace byte
 1106/ 855 :                            SEARCH:
 1107/ 855 : 8A 0F                      	MOV	CL,[BX]			; Search for a word
 1108/ 857 : 87 DA                      	XCHG	BX,DX
 1109/ 859 :                            GETNXT:
 1110/ 859 : 9F                         	LAHF
 1111/ 85A : 43                         	INC	BX
 1112/ 85B : 9E                         	SAHF				; Get next reserved word
 1113/ 85C : 0A 07                      	OR	AL,[BX]			; Start of word?
 1114/ 85E : 79 F9                      	JNS	GETNXT			; No - move on
 1115/ 860 : FE C5                      	INC	CH			; Increment token value
 1116/ 862 : 8A 07                      	MOV	AL,[BX]			; Get byte from table
 1117/ 864 : 24 7F                      	AND	AL,01111111B		; Strip bit 7
 1118/ 866 : 75 01                      	JNZ	GETNXT1
 1119/ 868 : C3                         	RET				; Return if end of list
 1120/ 869 :                            GETNXT1:
 1121/ 869 : 3A C1                      	CMP	AL,CL			; Same character as in buffer?
 1122/ 86B : 75 EC                      	JNZ	GETNXT			; No - get next word
 1123/ 86D : 87 DA                      	XCHG	BX,DX
 1124/ 86F : 53                         	PUSH	BX			; Save start of word
 1125/ 870 :                            ;
 1126/ 870 :                            NXTBYT:
 1127/ 870 : 9F                         	LAHF
 1128/ 871 : 42                         	INC	DX			; Look through rest of word
 1129/ 872 : 9E                         	SAHF
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 20 - 8/7/2025 21:50:51


 1130/ 873 : 87 DA                      	XCHG	BX,DX
 1131/ 875 : 8A 07                      	MOV	AL,[BX]			; Get byte from table
 1132/ 877 : 87 DA                      	XCHG	BX,DX
 1133/ 879 : 0A C0                      	OR	AL,AL			; End of word ?
 1134/ 87B : 78 1E                      	JS	MATCH			; Yes - Match found
 1135/ 87D : 8A C8                      	MOV	CL,AL			; Save it
 1136/ 87F : 8A C5                      	MOV	AL,CH			; Get token value
 1137/ 881 : 3C 88                      	CMP	AL,ZGOTO		; Is it "GOTO" token ?
 1138/ 883 : 75 06                      	JNZ	NOSPC			; No - Don't allow spaces
 1139/ 885 : E8 6B 03                   	CALL	GETCHR			; Get next character
 1140/ 888 : 9F                         	LAHF
 1141/ 889 : 4B                         	DEC	BX			; Cancel increment fromGETCHR
 1142/ 88A : 9E                         	SAHF
 1143/ 88B :                            NOSPC:
 1144/ 88B :                            ;	LAHF
 1145/ 88B : 43                         	INC	BX
 1146/ 88C :                            ;	SAHF				; Next byte
 1147/ 88C : 8A 07                      	MOV	AL,[BX]			; Get byte
 1148/ 88E : 3C 61                      	CMP	AL,'a'			; Less than 'a' ?
 1149/ 890 : 72 02                      	JC	NOCHNG			; Yes - don't change
 1150/ 892 : 24 5F                      	AND	AL,01011111B		; Make upper case
 1151/ 894 :                            NOCHNG:
 1152/ 894 : 3A C1                      	CMP	AL,CL			; Same as in buffer ?
 1153/ 896 : 74 D8                      	JZ	NXTBYT			; Yes - keep testing
 1154/ 898 : 5B                         	POP	BX			; Get back start of word
 1155/ 899 : EB BA                      	JMP	SEARCH			; Look at next word
 1156/ 89B :                            ;
 1157/ 89B :                            MATCH:
 1158/ 89B : 8A CD                      	MOV	CL,CH			; Word found - Save token value
 1159/ 89D : 58                         	POP	AX			; Throw away return
 1160/ 89E : 86 E0                      	XCHG	AH,AL
 1161/ 8A0 : 9E                         	SAHF
 1162/ 8A1 : 87 DA                      	XCHG	BX,DX
 1163/ 8A3 : C3                         	RET				; Return to "RETNAD"
 1164/ 8A4 :                            RETNAD:
 1165/ 8A4 : 87 DA                      	XCHG	BX,DX			; Get address in string
 1166/ 8A6 : 8A C1                      	MOV	AL,CL			; Get token value
 1167/ 8A8 : 59                         	POP	CX			; Restore buffer length
 1168/ 8A9 : 5A                         	POP	DX			; Get destination address
 1169/ 8AA :                            MOVDIR:
 1170/ 8AA : 9F                         	LAHF
 1171/ 8AB : 43                         	INC	BX			; Next source in buffer
 1172/ 8AC : 9E                         	SAHF
 1173/ 8AD : 87 DA                      	XCHG	BX,DX
 1174/ 8AF : 88 07                      	MOV	[BX],AL			; Put byte in buffer
 1175/ 8B1 : 87 DA                      	XCHG	BX,DX
 1176/ 8B3 : 9F                         	LAHF
 1177/ 8B4 : 42                         	INC	DX			; Move up buffer
 1178/ 8B5 : 9E                         	SAHF
 1179/ 8B6 : FE C1                      	INC	CL			; Increment length of buffer
 1180/ 8B8 : 2C 3A                      	SUB	AL,':'			; End of statement?
 1181/ 8BA : 74 04                      	JZ	SETLIT			; Jump if multi-stateme line
 1182/ 8BC : 3C 49                      	CMP	AL,ZDATA-3AH		; Is it DATA statement ?
 1183/ 8BE : 75 03                      	JNZ	TSTREM			; No - see if REM
 1184/ 8C0 :                            SETLIT:
 1185/ 8C0 : A2 FA 32                   	MOV	[DATFLG],AL		; Set literal flag
 1186/ 8C3 :                            TSTREM:
 1187/ 8C3 : 2C 54                      	SUB	AL,ZREM-3AH		; Is it REM?
 1188/ 8C5 : 74 03                      	JZ	TSTREM1			; No - Leave flag
 1189/ 8C7 : E9 39 FF                   	JMP	CRNCLP
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 21 - 8/7/2025 21:50:51


 1190/ 8CA :                            TSTREM1:
 1191/ 8CA : 8A E8                      	MOV	CH,AL			; Copy rest of buffer
 1192/ 8CC :                            NXTCHR:
 1193/ 8CC : 8A 07                      	MOV	AL,[BX]			; Get byte
 1194/ 8CE : 0A C0                      	OR	AL,AL			; End of line ?
 1195/ 8D0 : 74 14                      	JZ	ENDBUF			; Yes - Terminate buffe
 1196/ 8D2 : 3A C5                      	CMP	AL,CH			; End of statement ?
 1197/ 8D4 : 74 D4                      	JZ	MOVDIR			; Yes - Get next one
 1198/ 8D6 :                            CPYLIT:
 1199/ 8D6 : 9F                         	LAHF
 1200/ 8D7 : 43                         	INC	BX			; Move up source string
 1201/ 8D8 : 9E                         	SAHF
 1202/ 8D9 : 87 DA                      	XCHG	BX,DX
 1203/ 8DB : 88 07                      	MOV	[BX],AL			; Save in destination
 1204/ 8DD : 87 DA                      	XCHG	BX,DX
 1205/ 8DF : FE C1                      	INC	CL			; Increment length
 1206/ 8E1 : 9F                         	LAHF
 1207/ 8E2 : 42                         	INC	DX			; Move up destination
 1208/ 8E3 : 9E                         	SAHF
 1209/ 8E4 : EB E6                      	JMP	NXTCHR			; Repeat
 1210/ 8E6 :                            ;
 1211/ 8E6 :                            ENDBUF:
 1212/ 8E6 : BB AC 32                   	MOV	BX,BUFFER-1		; Point to start of buffer
 1213/ 8E9 : 87 DA                      	XCHG	BX,DX
 1214/ 8EB : 88 07                      	MOV	[BX],AL			; Mark end of buffer (A = 00)
 1215/ 8ED : 87 DA                      	XCHG	BX,DX
 1216/ 8EF :                            ;	LAHF
 1217/ 8EF : 42                         	INC	DX
 1218/ 8F0 :                            ;	SAHF
 1219/ 8F0 : 87 DA                      	XCHG	BX,DX
 1220/ 8F2 : 88 07                      	MOV	[BX],AL			; A = 00
 1221/ 8F4 : 87 DA                      	XCHG	BX,DX
 1222/ 8F6 :                            ;	LAHF
 1223/ 8F6 : 42                         	INC	DX
 1224/ 8F7 :                            ;	SAHF
 1225/ 8F7 : 87 DA                      	XCHG	BX,DX
 1226/ 8F9 : 88 07                      	MOV	[BX],AL			; A = 00
 1227/ 8FB : 87 DA                      	XCHG	BX,DX
 1228/ 8FD : C3                         	RET
 1229/ 8FE :                            ;
 1230/ 8FE :                            DODEL:
 1231/ 8FE : 2E A0 5A 05                	MOV	AL,[NULFLG]		; Get null flag status
 1232/ 902 : 0A C0                      	OR	AL,AL			; Is it zero?
 1233/ 904 : B0 00                      	MOV	AL,0			; Zero A - Leave flags
 1234/ 906 : 2E A2 5A 05                	MOV	[NULFLG],AL		; Zero null flag
 1235/ 90A : 75 09                      	JNZ	ECHDEL			; Set - Echo it
 1236/ 90C : FE CD                      	DEC	CH			; Decrement length
 1237/ 90E : 74 25                      	JZ	GETLIN			; Get line again if empty
 1238/ 910 : E8 D2 00                   	CALL	OUTC			; Output null character
 1239/ 913 : EB 02                      	JMP	ECHDEL1			; Skip "DEC B"
 1240/ 915 :                            ECHDEL:
 1241/ 915 : FE CD                      	DEC	CH			; Count bytes in buffer
 1242/ 917 :                            ECHDEL1:
 1243/ 917 : 9F                         	LAHF
 1244/ 918 : 4B                         	DEC	BX			; Back space buffer
 1245/ 919 : 9E                         	SAHF
 1246/ 91A : 74 11                      	JZ	OTKLN			; No buffer - Try again
 1247/ 91C : 8A 07                      	MOV	AL,[BX]			; Get deleted byte
 1248/ 91E : E8 C4 00                   	CALL	OUTC			; Echo it
 1249/ 921 : EB 1D                      	JMP	MORINP			; Get more input
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 22 - 8/7/2025 21:50:51


 1250/ 923 :                            ;
 1251/ 923 :                            DELCHR:
 1252/ 923 : FE CD                      	DEC	CH			; Count bytes in buffer
 1253/ 925 : 9F                         	LAHF
 1254/ 926 : 4B                         	DEC	BX			; Back space buffer
 1255/ 927 : 9E                         	SAHF
 1256/ 928 : E8 BA 00                   	CALL	OUTC			; Output character in A
 1257/ 92B : 75 13                      	JNZ	MORINP			; Not end - Get more
 1258/ 92D :                            OTKLN:
 1259/ 92D : E8 B5 00                   	CALL	OUTC			; Output character in A
 1260/ 930 :                            KILIN:
 1261/ 930 : E8 55 06                   	CALL	PRCRLF			; Output CRLF
 1262/ 933 : EB 00                      	JMP	TTYLIN			; Get line again
 1263/ 935 :                            ;
 1264/ 935 :                            GETLIN:
 1265/ 935 :                            TTYLIN:
 1266/ 935 : BB AD 32                   	MOV	BX,BUFFER		; Get a line by charact
 1267/ 938 : B5 01                      	MOV	CH,1			; Set buffer as empty
 1268/ 93A : 32 C0                      	XOR	AL,AL
 1269/ 93C : 2E A2 5A 05                	MOV	[NULFLG],AL		; Clear null flag
 1270/ 940 :                            MORINP:
 1271/ 940 : E8 E6 00                   	CALL	CLOTST			; Get character and test ^O
 1272/ 943 : 8A C8                      	MOV	CL,AL			; Save character in C
 1273/ 945 : 3C 7F                      	CMP	AL,DEL			; Delete character?
 1274/ 947 : 74 B5                      	JZ	DODEL			; Yes - Process it
 1275/ 949 : 2E A0 5A 05                	MOV	AL,[NULFLG]		; Get null flag
 1276/ 94D : 0A C0                      	OR	AL,AL			; Test null flag status
 1277/ 94F : 74 0B                      	JZ	PROCES			; Reset - Process character
 1278/ 951 : B0 00                      	MOV	AL,0			; Set a null
 1279/ 953 : E8 8F 00                   	CALL	OUTC			; Output null
 1280/ 956 : 32 C0                      	XOR	AL,AL			; Clear A
 1281/ 958 : 2E A2 5A 05                	MOV	[NULFLG],AL		; Reset null flag
 1282/ 95C :                            PROCES:
 1283/ 95C : 8A C1                      	MOV	AL,CL			; Get character
 1284/ 95E : 3C 07                      	CMP	AL,CTRLG		; Bell?
 1285/ 960 : 74 3E                      	JZ	PUTCTL			; Yes - Save it
 1286/ 962 : 3C 03                      	CMP	AL,CTRLC		; Is it control "C"?
 1287/ 964 : 75 03                      	JNZ	PROCES1
 1288/ 966 : E8 1F 06                   	CALL	PRCRLF			; Yes - Output CRLF
 1289/ 969 :                            PROCES1:
 1290/ 969 : F9                         	STC				; Flag break
 1291/ 96A : 75 01                      	JNZ	PROCES2
 1292/ 96C : C3                         	RET				; Return if control "C"
 1293/ 96D :                            PROCES2:
 1294/ 96D : 3C 0D                      	CMP	AL,CR			; Is it enter?
 1295/ 96F : 75 03                      	JNZ	PROCES3			; Yes - Terminate input
 1296/ 971 : E9 0E 06                   	JMP	ENDINP
 1297/ 974 :                            PROCES3:
 1298/ 974 : 3C 15                      	CMP	AL,CTRLU		; Is it control "U"?
 1299/ 976 : 74 B8                      	JZ	KILIN			; Yes - Get another line
 1300/ 978 : 3C 40                      	CMP	AL,'@'			; Is it "kill line"?
 1301/ 97A : 74 B1                      	JZ	OTKLN			; Yes - Kill line
 1302/ 97C : 3C 5F                      	CMP	AL,'_'			; Is it delete?
 1303/ 97E : 74 A3                      	JZ	DELCHR			; Yes - Delete character
 1304/ 980 : 3C 08                      	CMP	AL,BKSP			; Is it backspace?
 1305/ 982 : 74 9F                      	JZ	DELCHR			; Yes - Delete character
 1306/ 984 : 3C 12                      	CMP	AL,CTRLR		; Is it control "R"?
 1307/ 986 : 75 14                      	JNZ	PUTBUF			; No - Put in buffer
 1308/ 988 : 51                         	PUSH	CX			; Save buffer length
 1309/ 989 : 52                         	PUSH	DX			; Save DE
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 23 - 8/7/2025 21:50:51


 1310/ 98A : 53                         	PUSH	BX			; Save buffer address
 1311/ 98B : C6 07 00                   	MOV	BYTE PTR [BX],0		; Mark end of buffer
 1312/ 98E : E8 30 1E                   	CALL	OUTNCR			; Output and do CRLF
 1313/ 991 : BB AD 32                   	MOV	BX,BUFFER		; Point to buffer start
 1314/ 994 : E8 3C 0F                   	CALL	PRS			; Output buffer
 1315/ 997 : 5B                         	POP	BX			; Restore buffer address
 1316/ 998 : 5A                         	POP	DX			; Restore DE
 1317/ 999 : 59                         	POP	CX			; Restore buffer length
 1318/ 99A : EB A4                      	JMP	MORINP			; Get another character
 1319/ 99C :                            ;
 1320/ 99C :                            PUTBUF:
 1321/ 99C : 3C 20                      	CMP	AL,' '			; Is it a control code?
 1322/ 99E : 72 A0                      	JC	MORINP			; Yes - Ignore
 1323/ 9A0 :                            PUTCTL:
 1324/ 9A0 : 8A C5                      	MOV	AL,CH			; Get number of bytes in buffer
 1325/ 9A2 : 3C 49                      	CMP	AL,72+1			; Test for line overflow
 1326/ 9A4 : B0 07                      	MOV	AL,CTRLG		; Set a bell
 1327/ 9A6 : 73 11                      	JNC	OUTNBS			; Ring bell if buffer full
 1328/ 9A8 : 8A C1                      	MOV	AL,CL			; Get character
 1329/ 9AA : 88 0F                      	MOV	[BX],CL			; Save in buffer
 1330/ 9AC : A2 18 33                   	MOV	[LSTBIN],AL		; Save last input byte
 1331/ 9AF : 9F                         	LAHF
 1332/ 9B0 : 43                         	INC	BX			; Move up buffer
 1333/ 9B1 : 9E                         	SAHF
 1334/ 9B2 : FE C5                      	INC	CH			; Increment length
 1335/ 9B4 :                            OUTIT:
 1336/ 9B4 : E8 2E 00                   	CALL	OUTC			; Output the character entered
 1337/ 9B7 : EB 87                      	JMP	MORINP			; Get another character
 1338/ 9B9 :                            ;
 1339/ 9B9 :                            OUTNBS:
 1340/ 9B9 : E8 29 00                   	CALL	OUTC			; Output bell and back over it
 1341/ 9BC : B0 08                      	MOV	AL,BKSP			; Set back space
 1342/ 9BE : EB F4                      	JMP	OUTIT			; Output it and get more
 1343/ 9C0 :                            ;
 1344/ 9C0 :                            ; Z or Overflow
 1345/ 9C0 :                            CPDEHL:
 1346/ 9C0 : 8A C7                      	MOV	AL,BH			; Get H
 1347/ 9C2 : 2A C6                      	SUB	AL,DH			; Compare with D
 1348/ 9C4 : 74 01                      	JZ	CPDEHL1
 1349/ 9C6 : C3                         	RET				; Different - Exit
 1350/ 9C7 :                            CPDEHL1:
 1351/ 9C7 : 8A C3                      	MOV	AL,BL			; Get L
 1352/ 9C9 : 2A C2                      	SUB	AL,DL			; Compare with E
 1353/ 9CB : C3                         	RET				; Return status
 1354/ 9CC :                            ;
 1355/ 9CC :                            CHKSYN:
 1356/ 9CC : 8A 07                      	MOV	AL,[BX]			; Check syntax of character
 1357/ 9CE : 8B EC                      	MOV	BP,SP
 1358/ 9D0 : 87 5E 00                   	XCHG	[BP],BX			; Address of test byte
 1359/ 9D3 : 3A 07                      	CMP	AL,[BX]			; Same as in code string?
 1360/ 9D5 : 9F                         	LAHF
 1361/ 9D6 : 43                         	INC	BX			; Return address
 1362/ 9D7 : 9E                         	SAHF
 1363/ 9D8 : 8B EC                      	MOV	BP,SP
 1364/ 9DA : 87 5E 00                   	XCHG	[BP],BX			; Put it back
 1365/ 9DD : 75 03                      	JNZ	CHKSYN1			; Yes - Get next character
 1366/ 9DF : E9 11 02                   	JMP	GETCHR
 1367/ 9E2 :                            CHKSYN1:
 1368/ 9E2 : E9 22 FC                   	JMP	SNERR			; Different - ?SN Error
 1369/ 9E5 :                            ;
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 24 - 8/7/2025 21:50:51


 1370/ 9E5 :                            OUTC:
 1371/ 9E5 : 9F                         	LAHF
 1372/ 9E6 : 86 E0                      	XCHG	AH,AL
 1373/ 9E8 : 50                         	PUSH	AX			; Save character
 1374/ 9E9 : 86 E0                      	XCHG	AH,AL
 1375/ 9EB : 2E A0 5B 05                	MOV	AL,[CTLOFG]		; Get control "O" flag
 1376/ 9EF : 0A C0                      	OR	AL,AL			; Is it set?
 1377/ 9F1 : 74 03                      	JZ	OUTC1			; Yes - don't output
 1378/ 9F3 : E9 32 0F                   	JMP	POPAF
 1379/ 9F6 :                            OUTC1:
 1380/ 9F6 : 58                         	POP	AX			; Restore character
 1381/ 9F7 : 86 E0                      	XCHG	AH,AL
 1382/ 9F9 : 9E                         	SAHF
 1383/ 9FA : 51                         	PUSH	CX			; Save buffer length
 1384/ 9FB : 9F                         	LAHF
 1385/ 9FC : 86 E0                      	XCHG	AH,AL
 1386/ 9FE : 50                         	PUSH	AX			; Save character
 1387/ 9FF : 86 E0                      	XCHG	AH,AL
 1388/ A01 : 3C 20                      	CMP	AL,' '			; Is it a control code?
 1389/ A03 : 72 1B                      	JC	DINPOS			; Yes - Don't INC POS(X)
 1390/ A05 : 2E A0 58 05                	MOV	AL,[LWIDTH]		; Get line width
 1391/ A09 : 8A E8                      	MOV	CH,AL			; To B
 1392/ A0B : A0 F7 32                   	MOV	AL,[CURPOS]		; Get cursor position
 1393/ A0E : FE C5                      	INC	CH			; Width 255?
 1394/ A10 : 74 09                      	JZ	INCLEN			; Yes - No width limit
 1395/ A12 : FE CD                      	DEC	CH			; Restore width
 1396/ A14 : 3A C5                      	CMP	AL,CH			; At end of line?
 1397/ A16 : 75 03                      	JNZ	INCLEN
 1398/ A18 : E8 6D 05                   	CALL	PRCRLF			; Yes - output CRLF
 1399/ A1B :                            INCLEN:
 1400/ A1B : FE C0                      	INC	AL			; Move on one character
 1401/ A1D : A2 F7 32                   	MOV	[CURPOS],AL		; Save new position
 1402/ A20 :                            DINPOS:
 1403/ A20 : 58                         	POP	AX			; Restore character
 1404/ A21 : 86 E0                      	XCHG	AH,AL
 1405/ A23 : 9E                         	SAHF
 1406/ A24 : 59                         	POP	CX			; Restore buffer length
 1407/ A25 : E8 26 F6                   	CALL	putch			; Send it
 1408/ A28 : C3                         	RET
 1409/ A29 :                            ;
 1410/ A29 :                            CLOTST:
 1411/ A29 : E8 1B F6                   	CALL	getch			; Get input character
 1412/ A2C : 24 7F                      	AND	AL,01111111B		; Strip bit 7
 1413/ A2E : 3C 0F                      	CMP	AL,CTRLO		; Is it control "O"?
 1414/ A30 : 74 01                      	JZ	CLOTST1
 1415/ A32 : C3                         	RET				; No don't flip flag
 1416/ A33 :                            CLOTST1:
 1417/ A33 : 2E A0 5B 05                	MOV	AL,[CTLOFG]		; Get flag
 1418/ A37 : F6 D0                      	NOT	AL			; Flip it
 1419/ A39 : 2E A2 5B 05                	MOV	[CTLOFG],AL		; Put it back
 1420/ A3D : 32 C0                      	XOR	AL,AL			; Null character
 1421/ A3F : C3                         	RET
 1422/ A40 :                            ;
 1423/ A40 :                            LIST:
 1424/ A40 : E8 CC 02                   	CALL	ATOH			; ASCII number to DE
 1425/ A43 : 74 01                      	JZ	LIST1
 1426/ A45 : C3                         	RET				; Return if anything extra
 1427/ A46 :                            LIST1:
 1428/ A46 : 59                         	POP	CX			; Rubbish - Not needed
 1429/ A47 : E8 0B FD                   	CALL	SRCHLN			; Search for line number in DE
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 25 - 8/7/2025 21:50:51


 1430/ A4A : 51                         	PUSH	CX			; Save address of line
 1431/ A4B : E8 65 00                   	CALL	SETLIN			; Set up lines counter
 1432/ A4E :                            LISTLP:
 1433/ A4E : 5B                         	POP	BX			; Restore address of line
 1434/ A4F : 8A 0F                      	MOV	CL,[BX]			; Get LSB of next line
 1435/ A51 :                            ;	LAHF
 1436/ A51 : 43                         	INC	BX
 1437/ A52 :                            ;	SAHF
 1438/ A52 : 8A 2F                      	MOV	CH,[BX]			; Get MSB of next line
 1439/ A54 :                            ;	LAHF
 1440/ A54 : 43                         	INC	BX
 1441/ A55 :                            ;	SAHF
 1442/ A55 : 8A C5                      	MOV	AL,CH			; BC = 0 (End of program)?
 1443/ A57 : 0A C1                      	OR	AL,CL
 1444/ A59 : 75 03                      	JNZ	LISTLP1			; Yes - Go to command mode
 1445/ A5B : E9 08 FC                   	JMP	PRNTOK
 1446/ A5E :                            LISTLP1:
 1447/ A5E : E8 5F 00                   	CALL	COUNT			; Count lines
 1448/ A61 : E8 C7 01                   	CALL	TSTBRK			; Test for break key
 1449/ A64 : 51                         	PUSH	CX			; Save address of next line
 1450/ A65 : E8 20 05                   	CALL	PRCRLF			; Output CRLF
 1451/ A68 : 8A 17                      	MOV	DL,[BX]			; Get LSB of line numbe
 1452/ A6A : 9F                         	LAHF
 1453/ A6B : 43                         	INC	BX
 1454/ A6C : 9E                         	SAHF
 1455/ A6D : 8A 37                      	MOV	DH,[BX]			; Get MSB of line number
 1456/ A6F : 9F                         	LAHF
 1457/ A70 : 43                         	INC	BX
 1458/ A71 : 9E                         	SAHF
 1459/ A72 : 53                         	PUSH	BX			; Save address of line start
 1460/ A73 : 87 DA                      	XCHG	BX,DX			; Line number to HL
 1461/ A75 : E8 D5 17                   	CALL	PRNTHL			; Output line number in decimal
 1462/ A78 : B0 20                      	MOV	AL,' '			; Space after line number
 1463/ A7A : 5B                         	POP	BX			; Restore start of line address
 1464/ A7B :                            LSTLP2:
 1465/ A7B : E8 67 FF                   	CALL	OUTC			; Output character in A
 1466/ A7E :                            LSTLP3:
 1467/ A7E : 8A 07                      	MOV	AL,[BX]			; Get next byte in line
 1468/ A80 : 0A C0                      	OR	AL,AL			; End of line?
 1469/ A82 : 9F                         	LAHF
 1470/ A83 : 43                         	INC	BX			; To next byte in line
 1471/ A84 : 9E                         	SAHF
 1472/ A85 : 74 C7                      	JZ	LISTLP			; Yes - get next line
 1473/ A87 : 79 F2                      	JNS	LSTLP2			; No token - output it
 1474/ A89 : 2C 7F                      	SUB	AL,ZEND-1		; Find and output word
 1475/ A8B : 8A C8                      	MOV	CL,AL			; Token offset+1 to C
 1476/ A8D : BA 69 03                   	MOV	DX,WORDS		; Reserved word list
 1477/ A90 :                            FNDTOK:
 1478/ A90 : 87 DA                      	XCHG	BX,DX
 1479/ A92 : 8A 07                      	MOV	AL,[BX]			; Get character in list
 1480/ A94 : 87 DA                      	XCHG	BX,DX
 1481/ A96 :                            ;	LAHF
 1482/ A96 : 42                         	INC	DX			; Move on to next
 1483/ A97 :                            ;	SAHF
 1484/ A97 : 0A C0                      	OR	AL,AL			; Is it start of word?
 1485/ A99 : 79 F5                      	JNS	FNDTOK			; No - Keep looking for word
 1486/ A9B : FE C9                      	DEC	CL			; Count words
 1487/ A9D : 75 F1                      	JNZ	FNDTOK			; Not there - keep look
 1488/ A9F :                            OUTWRD:
 1489/ A9F : 24 7F                      	AND	AL,01111111B		; Strip bit 7
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 26 - 8/7/2025 21:50:51


 1490/ AA1 : E8 41 FF                   	CALL	OUTC			; Output first character
 1491/ AA4 : 87 DA                      	XCHG	BX,DX
 1492/ AA6 : 8A 07                      	MOV	AL,[BX]			; Get next character
 1493/ AA8 : 87 DA                      	XCHG	BX,DX
 1494/ AAA : 9F                         	LAHF
 1495/ AAB : 42                         	INC	DX			; Move on to next
 1496/ AAC : 9E                         	SAHF
 1497/ AAD : 0A C0                      	OR	AL,AL			; Is it end of word?
 1498/ AAF : 79 EE                      	JNS	OUTWRD			; No - output the rest
 1499/ AB1 : EB CB                      	JMP	LSTLP3			; Next byte in line
 1500/ AB3 :                            ;
 1501/ AB3 :                            SETLIN:
 1502/ AB3 : 53                         	PUSH	BX			; Set up LINES counter
 1503/ AB4 : 2E 8B 1E 5E 05             	MOV	BX,[LINESN]		; Get LINES number
 1504/ AB9 : 2E 89 1E 5C 05             	MOV	[LINESC],BX		; Save in LINES counter
 1505/ ABE : 5B                         	POP	BX
 1506/ ABF : C3                         	RET
 1507/ AC0 :                            ;
 1508/ AC0 :                            COUNT:
 1509/ AC0 : 53                         	PUSH	BX			; Save code string address
 1510/ AC1 : 52                         	PUSH	DX
 1511/ AC2 : 2E 8B 1E 5C 05             	MOV	BX,[LINESC]		; Get LINES counter
 1512/ AC7 : BA FF FF                   	MOV	DX,-1
 1513/ ACA : 13 DA                      	ADC	BX,DX			; Decrement
 1514/ ACC :                            ;
 1515/ ACC : 2E 89 1E 5C 05             	MOV	[LINESC],BX		; Put it back
 1516/ AD1 : 5A                         	POP	DX
 1517/ AD2 : 5B                         	POP	BX			; Restore code string address
 1518/ AD3 : 78 01                      	JS	COUNT1
 1519/ AD5 : C3                         	RET				; Return if more lines to go
 1520/ AD6 :                            COUNT1:
 1521/ AD6 : 53                         	PUSH	BX			; Save code string address
 1522/ AD7 : 2E 8B 1E 5E 05             	MOV	BX,[LINESN]		; Get LINES number
 1523/ ADC : 2E 89 1E 5C 05             	MOV	[LINESC],BX		; Reset LINES counter
 1524/ AE1 : E8 63 F5                   	CALL	getch			; Get input character
 1525/ AE4 : 3C 03                      	CMP	AL,CTRLC		; Is it control "C"?
 1526/ AE6 : 74 03                      	JZ	RSLNBK			; Yes - Reset LINES an break
 1527/ AE8 : 5B                         	POP	BX			; Restore code string address
 1528/ AE9 : EB D5                      	JMP	COUNT			; Keep on counting
 1529/ AEB :                            ;
 1530/ AEB :                            RSLNBK:
 1531/ AEB : 2E 8B 1E 5E 05             	MOV	BX,[LINESN]		; Get LINES number
 1532/ AF0 : 2E 89 1E 5C 05             	MOV	[LINESC],BX		; Reset LINES counter
 1533/ AF5 : E9 A3 F7                   	JMP	BRKRET			; Go and output "Break"
 1534/ AF8 :                            ;
 1535/ AF8 :                            FOR:
 1536/ AF8 : B0 64                      	MOV	AL,64H			; Flag "FOR" assignment
 1537/ AFA : A2 17 33                   	MOV	[FORFLG],AL		; Save "FOR" flag
 1538/ AFD : E8 54 03                   	CALL	LET			; Set up initial index
 1539/ B00 : 59                         	POP	CX			; Drop RETurn address
 1540/ B01 : 53                         	PUSH	BX			; Save code string address
 1541/ B02 : E8 2C 03                   	CALL	DATA			; Get next statement address
 1542/ B05 : 89 1E 13 33                	MOV	[LOOPST],BX		; Save it for start of loop
 1543/ B09 : BB 02 00                   	MOV	BX,2			; Offset for "FOR" block
 1544/ B0C : 03 DC                      	ADD	BX,SP			; Point to it
 1545/ B0E :                            FORSLP:
 1546/ B0E : E8 82 FA                   	CALL	LOKFOR			; Look for existing "FOR" block
 1547/ B11 : 5A                         	POP	DX			; Get code string address
 1548/ B12 : 75 19                      	JNZ	FORFND			; No nesting found
 1549/ B14 : 03 D9                      	ADD	BX,CX			; Move into "FOR" block
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 27 - 8/7/2025 21:50:51


 1550/ B16 : 52                         	PUSH	DX			; Save code string address
 1551/ B17 :                            ;	LAHF
 1552/ B17 : 4B                         	DEC	BX
 1553/ B18 :                            ;	SAHF
 1554/ B18 : 8A 37                      	MOV	DH,[BX]			; Get MSB of loop statement
 1555/ B1A :                            ;	LAHF
 1556/ B1A : 4B                         	DEC	BX
 1557/ B1B :                            ;	SAHF
 1558/ B1B : 8A 17                      	MOV	DL,[BX]			; Get LSB of loop statement
 1559/ B1D :                            ;	LAHF
 1560/ B1D : 43                         	INC	BX
 1561/ B1E :                            ;	SAHF
 1562/ B1E :                            ;	LAHF
 1563/ B1E : 43                         	INC	BX
 1564/ B1F :                            ;	SAHF
 1565/ B1F : 53                         	PUSH	BX			; Save block address
 1566/ B20 : 8B 1E 13 33                	MOV	BX,[LOOPST]		; Get address of loop statement
 1567/ B24 : E8 99 FE                   	CALL	CPDEHL			; Compare the FOR loops
 1568/ B27 : 5B                         	POP	BX			; Restore block address
 1569/ B28 : 75 E4                      	JNZ	FORSLP			; Different FORs - Find another
 1570/ B2A : 5A                         	POP	DX			; Restore code string address
 1571/ B2B : 8B E3                      	MOV	SP,BX			; Remove all nested loops
 1572/ B2D :                            ;
 1573/ B2D :                            FORFND:
 1574/ B2D : 87 DA                      	XCHG	BX,DX			; Code string address to HL
 1575/ B2F : B1 08                      	MOV	CL,8
 1576/ B31 : E8 A4 FA                   	CALL	CHKSTK			; Check for 8 levels of stack
 1577/ B34 : 53                         	PUSH	BX			; Save code string address
 1578/ B35 : 8B 1E 13 33                	MOV	BX,[LOOPST]		; Get first statement of loop
 1579/ B39 : 8B EC                      	MOV	BP,SP
 1580/ B3B : 87 5E 00                   	XCHG	[BP],BX			; Save and restore code string
 1581/ B3E : 53                         	PUSH	BX			; Re-save code string address
 1582/ B3F : 2E 8B 1E 72 05             	MOV	BX,[LINEAT]		; Get current line number
 1583/ B44 : 8B EC                      	MOV	BP,SP
 1584/ B46 : 87 5E 00                   	XCHG	[BP],BX			; Save and restore code string
 1585/ B49 : E8 8D 06                   	CALL	TSTNUM			; Make sure it's a number
 1586/ B4C : E8 7D FE                   	CALL	CHKSYN			; Make sure "TO" is next
 1587/ B4F : A6                         	DB	ZTO			; "TO" token
 1588/ B50 : E8 83 06                   	CALL	GETNUM			; Get "TO" expression value
 1589/ B53 : 53                         	PUSH	BX			; Save code string address
 1590/ B54 : E8 01 15                   	CALL	BCDEFP			; Move "TO" value to BCDE
 1591/ B57 : 5B                         	POP	BX			; Restore code string address
 1592/ B58 : 51                         	PUSH	CX			; Save "TO" value in block
 1593/ B59 : 52                         	PUSH	DX
 1594/ B5A : B9 00 81                   	MOV	CX,8100H		; BCDE - 1 (default STE
 1595/ B5D : 8A F1                      	MOV	DH,CL			; C=0
 1596/ B5F : 8A D6                      	MOV	DL,DH			; D=0
 1597/ B61 : 8A 07                      	MOV	AL,[BX]			; Get next byte in code string
 1598/ B63 : 3C AB                      	CMP	AL,ZSTEP		; See if "STEP" is stated
 1599/ B65 : B0 01                      	MOV	AL,1			; Sign of step = 1
 1600/ B67 : 75 0E                      	JNZ	SAVSTP			; No STEP given - Default to 1
 1601/ B69 : E8 87 00                   	CALL	GETCHR			; Jump over "STEP" token
 1602/ B6C : E8 67 06                   	CALL	GETNUM			; Get step value
 1603/ B6F : 53                         	PUSH	BX			; Save code string address
 1604/ B70 : E8 E5 14                   	CALL	BCDEFP			; Move STEP to BCDE
 1605/ B73 : E8 72 14                   	CALL	TSTSGN			; Test sign of FPREG
 1606/ B76 : 5B                         	POP	BX			; Restore code string address
 1607/ B77 :                            SAVSTP:
 1608/ B77 : 51                         	PUSH	CX			; Save the STEP value in block
 1609/ B78 : 52                         	PUSH	DX
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 28 - 8/7/2025 21:50:51


 1610/ B79 : 9F                         	LAHF
 1611/ B7A : 86 E0                      	XCHG	AH,AL			; Save sign of STEP
 1612/ B7C : 50                         	PUSH	AX
 1613/ B7D : 86 E0                      	XCHG	AH,AL
 1614/ B7F : 44                         	INC	SP			; Don't save flags
 1615/ B80 : 53                         	PUSH	BX			; Save code string address
 1616/ B81 : 8B 1E 1A 33                	MOV	BX,[BRKLIN]		; Get address of index variable
 1617/ B85 : 8B EC                      	MOV	BP,SP
 1618/ B87 : 87 5E 00                   	XCHG	[BP],BX			; Save and restore code string
 1619/ B8A :                            PUTFID:
 1620/ B8A : B5 81                      	MOV	CH,ZFOR			; "FOR" block marker
 1621/ B8C : 51                         	PUSH	CX			; Save it
 1622/ B8D : 44                         	INC	SP			; Don't save C
 1623/ B8E :                            ;
 1624/ B8E :                            RUNCNT:
 1625/ B8E : E8 9A 00                   	CALL	TSTBRK			; Execution driver - Test break
 1626/ B91 : 89 1E 1A 33                	MOV	[BRKLIN],BX		; Save code address for a key
 1627/ B95 : 8A 07                      	MOV	AL,[BX]			; Get next byte in code string
 1628/ B97 : 3C 3A                      	CMP	AL,':'			; Multi statement line?
 1629/ B99 : 74 29                      	JZ	EXCUTE			; Yes - Execute it
 1630/ B9B : 0A C0                      	OR	AL,AL			; End of line?
 1631/ B9D : 74 03                      	JZ	RUNCNT1			; No - Syntax error
 1632/ B9F : E9 65 FA                   	JMP	SNERR
 1633/ BA2 :                            RUNCNT1:
 1634/ BA2 : 9F                         	LAHF
 1635/ BA3 : 43                         	INC	BX			; Point to address of next line
 1636/ BA4 : 9E                         	SAHF
 1637/ BA5 : 8A 07                      	MOV	AL,[BX]			; Get LSB of line point
 1638/ BA7 : 9F                         	LAHF
 1639/ BA8 : 43                         	INC	BX
 1640/ BA9 : 9E                         	SAHF
 1641/ BAA : 0A 07                      	OR	AL,[BX]			; Is it zero (End of prog)?
 1642/ BAC : 75 03                      	JNZ	RUNCNT2			; Yes - Terminate execution
 1643/ BAE : E9 B7 00                   	JMP	ENDPRG
 1644/ BB1 :                            RUNCNT2:
 1645/ BB1 : 9F                         	LAHF
 1646/ BB2 : 43                         	INC	BX			; Point to line number
 1647/ BB3 : 9E                         	SAHF
 1648/ BB4 : 8A 17                      	MOV	DL,[BX]			; Get LSB of line numbe
 1649/ BB6 : 9F                         	LAHF
 1650/ BB7 : 43                         	INC	BX
 1651/ BB8 : 9E                         	SAHF
 1652/ BB9 : 8A 37                      	MOV	DH,[BX]			; Get MSB of line numbe
 1653/ BBB : 87 DA                      	XCHG	BX,DX			; Line number to HL
 1654/ BBD : 2E 89 1E 72 05             	MOV	[LINEAT],BX		; Save as current line number
 1655/ BC2 : 87 DA                      	XCHG	BX,DX			; Line number back to DE
 1656/ BC4 :                            EXCUTE:
 1657/ BC4 : E8 2C 00                   	CALL	GETCHR			; Get key word
 1658/ BC7 : BA 8E 0B                   	MOV	DX,RUNCNT		; Where to RETurn to
 1659/ BCA : 52                         	PUSH	DX			; Save for RETurn
 1660/ BCB :                            IFJMP:
 1661/ BCB : 75 01                      	JNZ	ONJMP
 1662/ BCD : C3                         	RET				; Go to RUNCNT if end of STMT
 1663/ BCE :                            ONJMP:
 1664/ BCE : 2C 80                      	SUB	AL,ZEND			; Is it a token?
 1665/ BD0 : 73 03                      	JNC	ONJMP1
 1666/ BD2 : E9 7F 02                   	JMP	LET			; No - try to assign it
 1667/ BD5 :                            ONJMP1:
 1668/ BD5 : 3C 25                      	CMP	AL,ZNEW+1-ZEND		; END to NEW ?
 1669/ BD7 : 72 03                      	JC	ONJMP2
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 29 - 8/7/2025 21:50:51


 1670/ BD9 : E9 2B FA                   	JMP	SNERR			; Not a key word - ?SN Error
 1671/ BDC :                            ONJMP2:
 1672/ BDC : D0 C0                      	ROL	AL,1			; Double it
 1673/ BDE : 8A C8                      	MOV	CL,AL			; BC = Offset into table
 1674/ BE0 : B5 00                      	MOV	CH,0
 1675/ BE2 : 87 DA                      	XCHG	BX,DX			; Save code string address
 1676/ BE4 : BB 88 04                   	MOV	BX,WORDTB		; Keyword address table
 1677/ BE7 : 03 D9                      	ADD	BX,CX			; Point to routine address
 1678/ BE9 : 8A 0F                      	MOV	CL,[BX]			; Get LSB of routine address
 1679/ BEB : 9F                         	LAHF
 1680/ BEC : 43                         	INC	BX
 1681/ BED : 9E                         	SAHF
 1682/ BEE : 8A 2F                      	MOV	CH,[BX]			; Get MSB of routine address
 1683/ BF0 : 51                         	PUSH	CX			; Save routine address
 1684/ BF1 : 87 DA                      	XCHG	BX,DX			; Restore code string address
 1685/ BF3 :                            ;
 1686/ BF3 :                            GETCHR:
 1687/ BF3 :                            ;	LAHF
 1688/ BF3 : 43                         	INC	BX			; Point to next character
 1689/ BF4 :                            ;	SAHF
 1690/ BF4 : 8A 07                      	MOV	AL,[BX]			; Get next code string byte
 1691/ BF6 : 3C 3A                      	CMP	AL,':'			; Z if ':'
 1692/ BF8 : 72 01                      	JC	GETCHR1
 1693/ BFA : C3                         	RET				; NC if > "9"
 1694/ BFB :                            GETCHR1:
 1695/ BFB : 3C 20                      	CMP	AL,' '
 1696/ BFD : 74 F4                      	JZ	GETCHR			; Skip over spaces
 1697/ BFF : 3C 30                      	CMP	AL,'0'
 1698/ C01 : F5                         	CMC				; NC if < '0'
 1699/ C02 : FE C0                      	INC	AL			; Test for zero - Leave carry
 1700/ C04 : FE C8                      	DEC	AL			; Z if Null
 1701/ C06 : C3                         	RET
 1702/ C07 :                            ;
 1703/ C07 :                            RESTOR:
 1704/ C07 : 87 DA                      	XCHG	BX,DX			; Save code string address
 1705/ C09 : 2E 8B 1E 74 05             	MOV	BX,[BASTXT]		; Point to start of program
 1706/ C0E : 74 11                      	JZ	RESTNL			; Just RESTORE - reset pointer
 1707/ C10 : 87 DA                      	XCHG	BX,DX			; Restore code string address
 1708/ C12 : E8 FA 00                   	CALL	ATOH			; Get line number to DE
 1709/ C15 : 53                         	PUSH	BX			; Save code string address
 1710/ C16 : E8 3C FB                   	CALL	SRCHLN			; Search for line number in DE
 1711/ C19 : 8B D9                      	MOV	BX,CX			; HL = Address of line
 1712/ C1B : 5A                         	POP	DX			; Restore code string address
 1713/ C1C : 72 03                      	JC	RESTNL
 1714/ C1E : E9 D4 01                   	JMP	ULERR			; ?UL Error if not found
 1715/ C21 :                            RESTNL:
 1716/ C21 : 9F                         	LAHF
 1717/ C22 : 4B                         	DEC	BX			; Byte before DATA statement
 1718/ C23 : 9E                         	SAHF
 1719/ C24 :                            UPDATA:
 1720/ C24 : 89 1E 28 33                	MOV	[NXTDAT],BX		; Update DATA pointer
 1721/ C28 : 87 DA                      	XCHG	BX,DX			; Restore code string address
 1722/ C2A : C3                         	RET
 1723/ C2B :                            ;
 1724/ C2B :                            
 1725/ C2B :                            TSTBRK:
 1726/ C2B : E8 D4 F5                   	CALL	CHKCHR			; Check input status
 1727/ C2E : 75 01                      	JNZ	TSTBRK1
 1728/ C30 : C3                         	RET				; No key, go back
 1729/ C31 :                            TSTBRK1:
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 30 - 8/7/2025 21:50:51


 1730/ C31 : E8 13 F4                   	CALL	getch			; Get the key into A
 1731/ C34 : 3C 1B                      	CMP	AL,ESC			; Escape key?
 1732/ C36 : 74 17                      	JZ	BRK			; Yes, break
 1733/ C38 : 3C 03                      	CMP	AL,CTRLC		; <Ctrl-C>
 1734/ C3A : 74 13                      	JZ	BRK			; Yes, break
 1735/ C3C : 3C 13                      	CMP	AL,CTRLS		; Stop scrolling?
 1736/ C3E : 74 01                      	JZ	STALL
 1737/ C40 : C3                         	RET				; Other key, ignore
 1738/ C41 :                            ;
 1739/ C41 :                            
 1740/ C41 :                            STALL:
 1741/ C41 : E8 03 F4                   	CALL	getch			; Wait for key
 1742/ C44 : 3C 11                      	CMP	AL,CTRLQ		; Resume scrolling?
 1743/ C46 : 75 01                      	JNZ	STALL1
 1744/ C48 : C3                         	RET				; Release the chokehold
 1745/ C49 :                            STALL1:
 1746/ C49 : 3C 03                      	CMP	AL,CTRLC		; Second break?
 1747/ C4B : 74 08                      	JZ	STOP			; Break during hold exit
 1748/ C4D : EB F2                      	JMP	STALL			; Loop until <Ctrl-Q> o
 1749/ C4F :                            ;
 1750/ C4F :                            BRK:
 1751/ C4F : B0 FF                      	MOV	AL,0FFH      		; Set BRKFLG
 1752/ C51 : 2E A2 63 05                	MOV	[BRKFLG],AL		; Store it
 1753/ C55 :                            ;
 1754/ C55 :                            
 1755/ C55 :                            STOP:
 1756/ C55 : 74 01                      	JZ	STOP1
 1757/ C57 : C3                         	RET				; Exit if anything else
 1758/ C58 :                            STOP1:
 1759/ C58 : 0C C0                      	OR	AL,11000000B		; Flag "STOP"
 1760/ C5A : EB 03                      	JMP	PEND1
 1761/ C5C :                            PEND:
 1762/ C5C : 74 01                      	JZ	PEND1
 1763/ C5E : C3                         	RET				; Exit if anything else
 1764/ C5F :                            PEND1:
 1765/ C5F : 89 1E 1A 33                	MOV	[BRKLIN],BX		; Save point of break
 1766/ C63 : EB 02                      	JMP	INPBRK1			; Skip "OR AL,11111111B"
 1767/ C65 :                            INPBRK:
 1768/ C65 : 0C FF                      	OR	AL,11111111B		; Flag "Break" wanted
 1769/ C67 :                            INPBRK1:
 1770/ C67 : 59                         	POP	CX			; Return not needed and more
 1771/ C68 :                            ENDPRG:
 1772/ C68 : 2E 8B 1E 72 05             	MOV	BX,[LINEAT]		; Get current line number
 1773/ C6D : 9F                         	LAHF
 1774/ C6E : 86 E0                      	XCHG	AH,AL
 1775/ C70 : 50                         	PUSH	AX			; Save STOP / END statu
 1776/ C71 : 86 E0                      	XCHG	AH,AL
 1777/ C73 : 8A C3                      	MOV	AL,BL			; Is it direct break?
 1778/ C75 : 22 C7                      	AND	AL,BH
 1779/ C77 : FE C0                      	INC	AL			; Line is -1 if direct break
 1780/ C79 : 74 0C                      	JZ	NOLIN			; Yes - No line number
 1781/ C7B : 89 1E 1E 33                	MOV	[ERRLIN],BX		; Save line of break
 1782/ C7F : 8B 1E 1A 33                	MOV	BX,[BRKLIN]		; Get point of break
 1783/ C83 : 89 1E 20 33                	MOV	[CONTAD],BX		; Save point to CONTinue
 1784/ C87 :                            NOLIN:
 1785/ C87 : 32 C0                      	XOR	AL,AL
 1786/ C89 : 2E A2 5B 05                	MOV	[CTLOFG],AL		; Enable output
 1787/ C8D : E8 EA 02                   	CALL	STTLIN			; Start a new line
 1788/ C90 : 58                         	POP	AX			; Restore STOP / END status
 1789/ C91 : 86 E0                      	XCHG	AH,AL
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 31 - 8/7/2025 21:50:51


 1790/ C93 : 9E                         	SAHF
 1791/ C94 : BB 88 05                   	MOV	BX,BRKMSG		; "Break" message
 1792/ C97 : 74 03                      	JZ	NOLIN1
 1793/ C99 : E9 A9 F9                   	JMP	ERRIN			; "in line" wanted?
 1794/ C9C :                            NOLIN1:
 1795/ C9C : E9 C7 F9                   	JMP	PRNTOK			; Go to command mode
 1796/ C9F :                            ;
 1797/ C9F :                            CONT:
 1798/ C9F : 8B 1E 20 33                	MOV	BX,[CONTAD]		; Get CONTinue address
 1799/ CA3 : 8A C7                      	MOV	AL,BH			; Is it zero?
 1800/ CA5 : 0A C3                      	OR	AL,BL
 1801/ CA7 : B2 20                      	MOV	DL,CN			; ?CN Error
 1802/ CA9 : 75 03                      	JNZ	CONT1
 1803/ CAB : E9 73 F9                   	JMP	ERROR			; Yes - output "?CN Error"
 1804/ CAE :                            CONT1:
 1805/ CAE : 87 DA                      	XCHG	BX,DX			; Save code string address
 1806/ CB0 : 8B 1E 1E 33                	MOV	BX,[ERRLIN]		; Get line of last break
 1807/ CB4 : 2E 89 1E 72 05             	MOV	[LINEAT],BX		; Set up current line number
 1808/ CB9 : 87 DA                      	XCHG	BX,DX			; Restore code string address
 1809/ CBB : C3                         	RET				; CONTinue where left off
 1810/ CBC :                            ;
 1811/ CBC :                            NULL:
 1812/ CBC : E8 9F 0F                   	CALL	GETINT			; Get integer 0-255
 1813/ CBF : 74 01                      	JZ	NULL1
 1814/ CC1 : C3                         	RET				; Return if bad value
 1815/ CC2 :                            NULL1:
 1816/ CC2 : 2E A2 57 05                	MOV	[NULLS],AL		; Set nulls number
 1817/ CC6 : C3                         	RET
 1818/ CC7 :                            ;
 1819/ CC7 :                            
 1820/ CC7 :                            ACCSUM:
 1821/ CC7 : 53                         	PUSH	BX			; Save address in array
 1822/ CC8 : 2E 8B 1E 60 05             	MOV	BX,[CHKSUM]		; Get check sum
 1823/ CCD : B5 00                      	MOV	CH,0			; BC - Value of byte
 1824/ CCF : 8A C8                      	MOV	CL,AL
 1825/ CD1 : 03 D9                      	ADD	BX,CX			; Add byte to check sum
 1826/ CD3 : 2E 89 1E 60 05             	MOV	[CHKSUM],BX		; Re-save check sum
 1827/ CD8 : 5B                         	POP	BX			; Restore address in array
 1828/ CD9 : C3                         	RET
 1829/ CDA :                            ;
 1830/ CDA :                            CHKLTR:
 1831/ CDA : 8A 07                      	MOV	AL,[BX]			; Get byte
 1832/ CDC : 3C 41                      	CMP	AL,'A'			; < 'A' ?
 1833/ CDE : 73 01                      	JNC	CHKLTR1
 1834/ CE0 : C3                         	RET         			  ; Carry set if not letter
 1835/ CE1 :                            CHKLTR1:
 1836/ CE1 : 3C 5B                      	CMP	AL,'Z'+1		; > 'Z' ?
 1837/ CE3 : F5                         	CMC
 1838/ CE4 : C3                         	RET				; Carry set if not letter
 1839/ CE5 :                            ;
 1840/ CE5 :                            FPSINT:
 1841/ CE5 : E8 0B FF                   	CALL	GETCHR			; Get next character
 1842/ CE8 :                            POSINT:
 1843/ CE8 : E8 EB 04                   	CALL	GETNUM			; Get integer 0 to 32767
 1844/ CEB :                            DEPINT:
 1845/ CEB : E8 FA 12                   	CALL	TSTSGN			; Test sign of FPREG
 1846/ CEE : 78 1A                      	JS	FCERR			; Negative - ?FC Error
 1847/ CF0 :                            DEINT:
 1848/ CF0 : A0 33 33                   	MOV	AL,[FPEXP]		; Get integer value to DE
 1849/ CF3 : 3C 90                      	CMP	AL,80H+16		; Exponent in range (16 bits)?
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 32 - 8/7/2025 21:50:51


 1850/ CF5 : 73 03                      	JNC	DEINT1
 1851/ CF7 : E9 FB 13                   	JMP	FPINT			; Yes - convert it
 1852/ CFA :                            DEINT1:
 1853/ CFA : B9 80 90                   	MOV	CX,9080H		; BCDE = -32768
 1854/ CFD : BA 00 00                   	MOV	DX,0000
 1855/ D00 : 53                         	PUSH	BX			; Save code string address
 1856/ D01 : E8 9F 13                   	CALL	CMPNUM			; Compare FPREG with BCDE
 1857/ D04 : 5B                         	POP	BX			; Restore code string address
 1858/ D05 : 8A F1                      	MOV	DH,CL			; MSB to D
 1859/ D07 : 75 01                      	JNZ	FCERR
 1860/ D09 : C3                         	RET				; Return if in range
 1861/ D0A :                            FCERR:
 1862/ D0A : B2 08                      	MOV	DL,FC			; ?FC Error
 1863/ D0C : E9 12 F9                   	JMP	ERROR			; Output error-
 1864/ D0F :                            ;
 1865/ D0F :                            ATOH:
 1866/ D0F : 9F                         	LAHF
 1867/ D10 : 4B                         	DEC	BX			; ASCII number to DE binary
 1868/ D11 : 9E                         	SAHF
 1869/ D12 :                            GETLN:
 1870/ D12 : BA 00 00                   	MOV	DX,0			; Get number to DE
 1871/ D15 :                            GTLNLP:
 1872/ D15 : E8 DB FE                   	CALL	GETCHR			; Get next character
 1873/ D18 : 72 01                      	JC	GTLNLP1
 1874/ D1A : C3                         	RET				; Exit if not a digit
 1875/ D1B :                            GTLNLP1:
 1876/ D1B : 53                         	PUSH	BX			; Save code string address
 1877/ D1C : 9F                         	LAHF
 1878/ D1D : 86 E0                      	XCHG	AH,AL
 1879/ D1F : 50                         	PUSH	AX			; Save digit
 1880/ D20 : 86 E0                      	XCHG	AH,AL
 1881/ D22 : BB 98 19                   	MOV	BX,65529/10		; Largest number 65529
 1882/ D25 : E8 98 FC                   	CALL	CPDEHL			; Number in range?
 1883/ D28 : 73 03                      	JNC	GTLNLP2			; No - ?SN Error
 1884/ D2A : E9 DA F8                   	JMP	SNERR
 1885/ D2D :                            GTLNLP2:
 1886/ D2D : 8B DA                      	MOV	BX,DX			; HL = Number
 1887/ D2F : 03 DA                      	ADD	BX,DX			; Times 2
 1888/ D31 : 03 DB                      	ADD	BX,BX			; Times 4
 1889/ D33 : 03 DA                      	ADD	BX,DX			; Times 5
 1890/ D35 : 03 DB                      	ADD	BX,BX			; Times 10
 1891/ D37 : 58                         	POP	AX			; Restore digit
 1892/ D38 : 86 E0                      	XCHG	AH,AL
 1893/ D3A : 9E                         	SAHF
 1894/ D3B : 2C 30                      	SUB	AL,'0'			; Make it 0 to 9
 1895/ D3D : 8A D0                      	MOV	DL,AL			; DE = Value of digit
 1896/ D3F : B6 00                      	MOV	DH,0
 1897/ D41 : 03 DA                      	ADD	BX,DX			; Add to number
 1898/ D43 : 87 DA                      	XCHG	BX,DX			; Number to DE
 1899/ D45 : 5B                         	POP	BX			; Restore code string address
 1900/ D46 : EB CD                      	JMP	GTLNLP			; Go to next character
 1901/ D48 :                            ;
 1902/ D48 :                            CLEAR:
 1903/ D48 : 75 03                      	JNZ	CLEAR1
 1904/ D4A : E9 5B FA                   	JMP	INTVAR			; Just "CLEAR" Keep parameters
 1905/ D4D :                            CLEAR1:
 1906/ D4D : E8 98 FF                   	CALL	POSINT			; Get integer 0 to 32767 to DE
 1907/ D50 :                            ;	LAHF
 1908/ D50 : 4B                         	DEC	BX			; Cancel increment
 1909/ D51 :                            ;	SAHF
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 33 - 8/7/2025 21:50:51


 1910/ D51 : E8 9F FE                   	CALL	GETCHR			; Get next character
 1911/ D54 : 53                         	PUSH	BX			; Save code string address
 1912/ D55 : 8B 1E FB 32                	MOV	BX,[LSTRAM]		; Get end of RAM
 1913/ D59 : 74 19                      	JZ	STORED			; No value given - Use stored
 1914/ D5B : 5B                         	POP	BX			; Restore code string address
 1915/ D5C : E8 6D FC                   	CALL	CHKSYN			; Check for comma
 1916/ D5F : 2C                         	DB	','
 1917/ D60 : 52                         	PUSH	DX			; Save number
 1918/ D61 : E8 84 FF                   	CALL	POSINT			; Get integer 0 to 32767
 1919/ D64 :                            ;	LAHF
 1920/ D64 : 4B                         	DEC	BX			; Cancel increment
 1921/ D65 :                            ;	SAHF
 1922/ D65 : E8 8B FE                   	CALL	GETCHR			; Get next character
 1923/ D68 : 74 03                      	JZ	CLEAR2
 1924/ D6A : E9 9A F8                   	JMP	SNERR			; ?SN Error if more on line
 1925/ D6D :                            CLEAR2:
 1926/ D6D : 8B EC                      	MOV	BP,SP
 1927/ D6F : 87 5E 00                   	XCHG	[BP],BX			; Save code string address
 1928/ D72 : 87 DA                      	XCHG	BX,DX			; Number to DE
 1929/ D74 :                            STORED:
 1930/ D74 : 8A C3                      	MOV	AL,BL			; Get LSB of new RAM top
 1931/ D76 : 2A C2                      	SUB	AL,DL			; Subtract LSB of string space
 1932/ D78 : 8A D0                      	MOV	DL,AL			; Save LSB
 1933/ D7A : 8A C7                      	MOV	AL,BH			; Get MSB of new RAM top
 1934/ D7C : 1A C6                      	SBB	AL,DH			; Subtract MSB of string space
 1935/ D7E : 8A F0                      	MOV	DH,AL			; Save MSB
 1936/ D80 : 73 03                      	JNC	STORED1
 1937/ D82 : E9 75 F8                   	JMP	OMERR			; ?OM Error if not enough mem
 1938/ D85 :                            STORED1:
 1939/ D85 : 53                         	PUSH	BX			; Save RAM top
 1940/ D86 : 8B 1E 22 33                	MOV	BX,[PROGND]		; Get program end
 1941/ D8A : B9 28 00                   	MOV	CX,40			; 40 Bytes minimum working RAM
 1942/ D8D : 03 D9                      	ADD	BX,CX			; Get lowest address
 1943/ D8F : E8 2E FC                   	CALL	CPDEHL			; Enough memory?
 1944/ D92 : 72 03                      	JC	STORED2
 1945/ D94 : E9 63 F8                   	JMP	OMERR			; No - ?OM Error
 1946/ D97 :                            STORED2:
 1947/ D97 : 87 DA                      	XCHG	BX,DX			; RAM top to HL
 1948/ D99 : 2E 89 1E 70 05             	MOV	[STRSPC],BX		; Set new string space
 1949/ D9E : 5B                         	POP	BX			; End of memory to use
 1950/ D9F : 89 1E FB 32                	MOV	[LSTRAM],BX		; Set new top of RAM
 1951/ DA3 : 5B                         	POP	BX			; Restore code string address
 1952/ DA4 : E9 01 FA                   	JMP	INTVAR			; Initialise variables
 1953/ DA7 :                            ;
 1954/ DA7 :                            RUN:
 1955/ DA7 : 75 03                      	JNZ	RUN1
 1956/ DA9 : E9 F4 F9                   	JMP	RUNFST			; RUN from start if just RUN
 1957/ DAC :                            RUN1:
 1958/ DAC : E8 F9 F9                   	CALL	INTVAR			; Initialise variables
 1959/ DAF : B9 8E 0B                   	MOV	CX,RUNCNT		; Execution driver loop
 1960/ DB2 : EB 1B                      	JMP	RUNLIN			; RUN from line number
 1961/ DB4 :                            ;
 1962/ DB4 :                            GOSUB:
 1963/ DB4 : B1 03                      	MOV	CL,3			; 3 Levels of stack needed
 1964/ DB6 : E8 1F F8                   	CALL	CHKSTK			; Check for 3 levels of stack
 1965/ DB9 : 59                         	POP	CX			; Get return address
 1966/ DBA : 53                         	PUSH	BX			; Save code string for RETURN
 1967/ DBB : 53                         	PUSH	BX			; And for GOSUB routine
 1968/ DBC : 2E 8B 1E 72 05             	MOV	BX,[LINEAT]		; Get current line
 1969/ DC1 : 8B EC                      	MOV	BP,SP
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 34 - 8/7/2025 21:50:51


 1970/ DC3 : 87 5E 00                   	XCHG	[BP],BX			; Into stack - Code string out
 1971/ DC6 : B0 8C                      	MOV	AL,ZGOSUB		; "GOSUB" token
 1972/ DC8 : 9F                         	LAHF
 1973/ DC9 : 86 E0                      	XCHG	AH,AL
 1974/ DCB : 50                         	PUSH	AX			; Save token
 1975/ DCC : 86 E0                      	XCHG	AH,AL
 1976/ DCE : 44                         	INC	SP			; Don't save flags
 1977/ DCF :                            ;
 1978/ DCF :                            RUNLIN:
 1979/ DCF : 51                         	PUSH	CX			; Save return address
 1980/ DD0 :                            GOTO:
 1981/ DD0 : E8 3C FF                   	CALL	ATOH			; ASCII number to DE binary
 1982/ DD3 : E8 5F 00                   	CALL	REM			; Get end of line
 1983/ DD6 : 53                         	PUSH	BX			; Save end of line
 1984/ DD7 : 2E 8B 1E 72 05             	MOV	BX,[LINEAT]		; Get current line
 1985/ DDC : E8 E1 FB                   	CALL	CPDEHL			; Line after current?
 1986/ DDF : 5B                         	POP	BX			; Restore end of line
 1987/ DE0 : 9F                         	LAHF
 1988/ DE1 : 43                         	INC	BX			; Start of next line
 1989/ DE2 : 9E                         	SAHF
 1990/ DE3 : 73 03                      	JNC	GOTO1
 1991/ DE5 : E8 72 F9                   	CALL	SRCHLP			; Line is after current line
 1992/ DE8 :                            GOTO1:
 1993/ DE8 : 72 03                      	JC	GOTO2
 1994/ DEA : E8 68 F9                   	CALL	SRCHLN			; Line is before current line
 1995/ DED :                            GOTO2:
 1996/ DED : 8B D9                      	MOV	BX,CX			; Set up code string address
 1997/ DEF : 9F                         	LAHF
 1998/ DF0 : 4B                         	DEC	BX			; Incremented after
 1999/ DF1 : 9E                         	SAHF
 2000/ DF2 : 73 01                      	JNC	ULERR
 2001/ DF4 : C3                         	RET				; Line found
 2002/ DF5 :                            ULERR:
 2003/ DF5 : B2 0E                      	MOV	DL,UL			; ?UL Error
 2004/ DF7 : E9 27 F8                   	JMP	ERROR			; Output error message
 2005/ DFA :                            ;
 2006/ DFA :                            RETURN:
 2007/ DFA : 74 01                      	JZ	RETURN1
 2008/ DFC : C3                         	RET				; Return if not just RETURN
 2009/ DFD :                            RETURN1:
 2010/ DFD : B6 FF                      	MOV	DH,-1			; Flag "GOSUB" search
 2011/ DFF : E8 8C F7                   	CALL	BAKSTK			; Look "GOSUB" block
 2012/ E02 : 8B E3                      	MOV	SP,BX			; Kill all FORs in subroutine
 2013/ E04 : 3C 8C                      	CMP	AL,ZGOSUB		; Test for "GOSUB" token
 2014/ E06 : B2 04                      	MOV	DL,RG			; ?RG Error
 2015/ E08 : 74 03                      	JZ	RETURN2
 2016/ E0A : E9 14 F8                   	JMP	ERROR			; Error if no "GOSUB" found
 2017/ E0D :                            RETURN2:
 2018/ E0D : 5B                         	POP	BX			; Get RETURN line number
 2019/ E0E : 2E 89 1E 72 05             	MOV	[LINEAT],BX		; Save as current
 2020/ E13 : 9F                         	LAHF
 2021/ E14 : 43                         	INC	BX			; Was it from direct statement?
 2022/ E15 : 9E                         	SAHF
 2023/ E16 : 8A C7                      	MOV	AL,BH
 2024/ E18 : 0A C3                      	OR	AL,BL			; Return to line
 2025/ E1A : 75 0A                      	JNZ	RETLIN			; No - Return to line
 2026/ E1C : A0 18 33                   	MOV	AL,[LSTBIN]		; Any INPUT in subroutine?
 2027/ E1F : 0A C0                      	OR	AL,AL			; If so buffer is corrupted
 2028/ E21 : 74 03                      	JZ	RETLIN
 2029/ E23 : E9 3F F8                   	JMP	POPNOK			; Yes - Go to command mode
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 35 - 8/7/2025 21:50:51


 2030/ E26 :                            RETLIN:
 2031/ E26 : BB 8E 0B                   	MOV	BX,RUNCNT		; Execution driver loop
 2032/ E29 : 8B EC                      	MOV	BP,SP
 2033/ E2B : 87 5E 00                   	XCHG	[BP],BX			; Into stack - Code string out
 2034/ E2E : EB 01                      	JMP	DATA			; Skip "POP BX"
 2035/ E30 :                            NXTDTA:
 2036/ E30 : 5B                         	POP	BX			; Restore code string address
 2037/ E31 :                            ;
 2038/ E31 :                            DATA:
 2039/ E31 : B1 3A                      	MOV	CL,':'			; ":" End of statemen
 2040/ E33 : EB 02                      	JMP	REM1
 2041/ E35 :                            REM:
 2042/ E35 : B1 00                      	MOV	CL,0			; 00 End of statemen
 2043/ E37 :                            REM1:
 2044/ E37 : B5 00                      	MOV	CH,0
 2045/ E39 :                            NXTSTL:
 2046/ E39 : 8A C1                      	MOV	AL,CL			; Statement and byte
 2047/ E3B : 8A CD                      	MOV	CL,CH
 2048/ E3D : 8A E8                      	MOV	CH,AL			; Statement end byte
 2049/ E3F :                            NXTSTT:
 2050/ E3F : 8A 07                      	MOV	AL,[BX]			; Get byte
 2051/ E41 : 0A C0                      	OR	AL,AL			; End of line?
 2052/ E43 : 75 01                      	JNZ	NXTSTT1
 2053/ E45 : C3                         	RET				; Yes - Exit
 2054/ E46 :                            NXTSTT1:
 2055/ E46 : 3A C5                      	CMP	AL,CH			; End of statement?
 2056/ E48 : 75 01                      	JNZ	NXTSTT2
 2057/ E4A : C3                         	RET				; Yes - Exit
 2058/ E4B :                            NXTSTT2:
 2059/ E4B : 9F                         	LAHF
 2060/ E4C : 43                         	INC	BX
 2061/ E4D : 9E                         	SAHF				; Next byte
 2062/ E4E : 3C 22                      	CMP	AL,'"'			; Literal string?
 2063/ E50 : 74 E7                      	JZ	NXTSTL			; Yes - Look for another '"'
 2064/ E52 : EB EB                      	JMP	NXTSTT			; Keep looking
 2065/ E54 :                            ;
 2066/ E54 :                            LET:
 2067/ E54 : E8 53 06                   	CALL	GETVAR			; Get variable name
 2068/ E57 : E8 72 FB                   	CALL	CHKSYN			; Make sure "=" follows
 2069/ E5A : B4                         	DB	ZEQUAL			; "=" token
 2070/ E5B : 52                         	PUSH	DX			; Save address of variable
 2071/ E5C : A0 F9 32                   	MOV	AL,[TYPE]		; Get data type
 2072/ E5F : 9F                         	LAHF
 2073/ E60 : 86 E0                      	XCHG	AH,AL
 2074/ E62 : 50                         	PUSH	AX			; Save type
 2075/ E63 : 86 E0                      	XCHG	AH,AL
 2076/ E65 : E8 87 03                   	CALL	EVAL			; Evaluate expression
 2077/ E68 : 58                         	POP	AX			; Restore type
 2078/ E69 : 86 E0                      	XCHG	AH,AL
 2079/ E6B : 9E                         	SAHF
 2080/ E6C : 8B EC                      	MOV	BP,SP
 2081/ E6E : 87 5E 00                   	XCHG	[BP],BX			; Save code - Get var addr
 2082/ E71 : 89 1E 1A 33                	MOV	[BRKLIN],BX		; Save address of variable
 2083/ E75 : D0 D8                      	RCR	AL,1			; Adjust type
 2084/ E77 : E8 64 03                   	CALL	CHKTYP			; Check types are the same
 2085/ E7A : 74 3E                      	JZ	LETNUM			; Numeric - Move value
 2086/ E7C :                            LETSTR:
 2087/ E7C : 53                         	PUSH	BX			; Save address of string var
 2088/ E7D : 8B 1E 30 33                	MOV	BX,[FPREG]		; Pointer to string entry
 2089/ E81 : 53                         	PUSH	BX			; Save it on stack
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 36 - 8/7/2025 21:50:51


 2090/ E82 :                            ;	LAHF
 2091/ E82 : 43                         	INC	BX			; Skip over length
 2092/ E83 :                            ;	SAHF
 2093/ E83 :                            ;	LAHF
 2094/ E83 : 43                         	INC	BX
 2095/ E84 :                            ;	SAHF
 2096/ E84 : 8A 17                      	MOV	DL,[BX]			; LSB of string address
 2097/ E86 :                            ;	LAHF
 2098/ E86 : 43                         	INC	BX
 2099/ E87 :                            ;	SAHF
 2100/ E87 : 8A 37                      	MOV	DH,[BX]			; MSB of string address
 2101/ E89 : 2E 8B 1E 74 05             	MOV	BX,[BASTXT]		; Point to start of program
 2102/ E8E : E8 2F FB                   	CALL	CPDEHL			; Is string before program?
 2103/ E91 : 73 15                      	JNC	CRESTR			; Yes - Create string entry
 2104/ E93 : 2E 8B 1E 70 05             	MOV	BX,[STRSPC]		; Point to string space
 2105/ E98 : E8 25 FB                   	CALL	CPDEHL			; Is string literal in program?
 2106/ E9B : 5A                         	POP	DX			; Restore address of string
 2107/ E9C : 73 13                      	JNC	MVSTPT			; Yes - Set up pointer
 2108/ E9E : BB 0B 33                   	MOV	BX,TMPSTR		; Temporary string pool
 2109/ EA1 : E8 1C FB                   	CALL	CPDEHL			; Is string in temporary pool?
 2110/ EA4 : 73 0B                      	JNC	MVSTPT			; No - Set up pointer
 2111/ EA6 : EB 01                      	JMP	CRESTR1			; Skip "POP DX"
 2112/ EA8 :                            CRESTR:
 2113/ EA8 : 5A                         	POP	DX			; Restore address of string
 2114/ EA9 :                            CRESTR1:
 2115/ EA9 : E8 39 0C                   	CALL	BAKTMP			; Back to last tmp-str entry
 2116/ EAC : 87 DA                      	XCHG	BX,DX			; Address of string entry
 2117/ EAE : E8 90 09                   	CALL	SAVSTR			; Save string in string area
 2118/ EB1 :                            MVSTPT:
 2119/ EB1 : E8 31 0C                   	CALL	BAKTMP			; Back to last tmp-str entry
 2120/ EB4 : 5B                         	POP	BX			; Get string pointer
 2121/ EB5 : E8 B7 11                   	CALL	DETHL4			; Move string pointer to var
 2122/ EB8 : 5B                         	POP	BX			; Restore code string adress
 2123/ EB9 : C3                         	RET
 2124/ EBA :                            ;
 2125/ EBA :                            LETNUM:
 2126/ EBA : 53                         	PUSH	BX			; Save address of variable
 2127/ EBB : E8 AE 11                   	CALL	FPTHL			; Move value to variable
 2128/ EBE : 5A                         	POP	DX			; Restore address of variable
 2129/ EBF : 5B                         	POP	BX			; Restore code string address
 2130/ EC0 : C3                         	RET
 2131/ EC1 :                            ;
 2132/ EC1 :                            ON:
 2133/ EC1 : E8 9A 0D                   	CALL	GETINT			; Get integer 0-255
 2134/ EC4 : 8A 07                      	MOV	AL,[BX]			; Get "GOTO" or "GOSUB" token
 2135/ EC6 : 8A E8                      	MOV	CH,AL			; Save in B
 2136/ EC8 : 3C 8C                      	CMP	AL,ZGOSUB		; "GOSUB" token?
 2137/ ECA : 74 07                      	JZ	ONGO			; Yes - Find line numbe
 2138/ ECC : E8 FD FA                   	CALL	CHKSYN			; Make sure it's "GOTO"
 2139/ ECF : 88                         	DB	ZGOTO			; "GOTO" token
 2140/ ED0 : 9F                         	LAHF
 2141/ ED1 : 4B                         	DEC	BX			; Cancel increment
 2142/ ED2 : 9E                         	SAHF
 2143/ ED3 :                            ONGO:
 2144/ ED3 : 8A CA                      	MOV	CL,DL			; Integer of branch value
 2145/ ED5 :                            ONGOLP:
 2146/ ED5 : FE C9                      	DEC	CL			; Count branches
 2147/ ED7 : 8A C5                      	MOV	AL,CH			; Get "GOTO" or "GOSUB" token
 2148/ ED9 : 75 03                      	JNZ	ONGOLP1
 2149/ EDB : E9 F0 FC                   	JMP	ONJMP			; Go to that line if right one
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 37 - 8/7/2025 21:50:51


 2150/ EDE :                            ONGOLP1:
 2151/ EDE : E8 31 FE                   	CALL	GETLN			; Get line number to DE
 2152/ EE1 : 3C 2C                      	CMP	AL,','			; Another line number?
 2153/ EE3 : 74 F0                      	JZ	ONGOLP
 2154/ EE5 : C3                         	RET				; No - Drop through
 2155/ EE6 : EB ED                      	JMP	ONGOLP			; Yes - loop
 2156/ EE8 :                            ;
 2157/ EE8 :                            IF:
 2158/ EE8 : E8 04 03                   	CALL	EVAL			; Evaluate expression
 2159/ EEB : 8A 07                      	MOV	AL,[BX]			; Get token
 2160/ EED : 3C 88                      	CMP	AL,ZGOTO		; "GOTO" token?
 2161/ EEF : 74 07                      	JZ	IFGO			; Yes - Get line
 2162/ EF1 : E8 D8 FA                   	CALL	CHKSYN			; Make sure it's "THEN"
 2163/ EF4 : A9                         	DB	ZTHEN			; "THEN" token
 2164/ EF5 : 9F                         	LAHF
 2165/ EF6 : 4B                         	DEC	BX			; Cancel increment
 2166/ EF7 : 9E                         	SAHF
 2167/ EF8 :                            IFGO:
 2168/ EF8 : E8 DE 02                   	CALL	TSTNUM			; Make sure it's numeric
 2169/ EFB : E8 EA 10                   	CALL	TSTSGN			; Test state of expression
 2170/ EFE : 75 03                      	JNZ	IFGO1
 2171/ F00 : E9 32 FF                   	JMP	REM			; False - Drop through
 2172/ F03 :                            IFGO1:
 2173/ F03 : E8 ED FC                   	CALL	GETCHR			; Get next character
 2174/ F06 : 73 03                      	JNC	IFGO2
 2175/ F08 : E9 C5 FE                   	JMP	GOTO			; Number - GOTO that line
 2176/ F0B :                            IFGO2:
 2177/ F0B : E9 BD FC                   	JMP	IFJMP			; Otherwise do statemen
 2178/ F0E :                            ;
 2179/ F0E :                            MRPRNT:
 2180/ F0E :                            ;	LAHF
 2181/ F0E : 4B                         	DEC	BX			; DEC 'cos GETCHR INCs
 2182/ F0F :                            ;	SAHF
 2183/ F0F : E8 E1 FC                   	CALL	GETCHR			; Get next character
 2184/ F12 :                            PRINT:
 2185/ F12 : 74 74                      	JZ	PRCRLF			; CRLF if just PRINT
 2186/ F14 :                            PRNTLP:
 2187/ F14 : 75 01                      	JNZ	PRNTLP1
 2188/ F16 : C3                         	RET				; End of list - Exit
 2189/ F17 :                            PRNTLP1:
 2190/ F17 : 3C A5                      	CMP	AL,ZTAB			; "TAB(" token?
 2191/ F19 : 75 03                      	JNZ	PRNTLP2
 2192/ F1B : E9 AD 00                   	JMP	DOTAB			; Yes - Do TAB routine
 2193/ F1E :                            PRNTLP2:
 2194/ F1E : 3C A8                      	CMP	AL,ZSPC			; "SPC(" token?
 2195/ F20 : 75 03                      	JNZ	PRNTLP3
 2196/ F22 : E9 A6 00                   	JMP	DOTAB			; Yes - Do SPC routine
 2197/ F25 :                            PRNTLP3:
 2198/ F25 : 53                         	PUSH	BX			; Save code string address
 2199/ F26 : 3C 2C                      	CMP	AL,','			; Comma?
 2200/ F28 : 75 03                      	JNZ	PRNTLP4
 2201/ F2A : E9 84 00                   	JMP	DOCOM			; Yes - Move to next zone
 2202/ F2D :                            PRNTLP4:
 2203/ F2D : 3C 3B                      	CMP	AL,';'			; Semi-colon?
 2204/ F2F : 75 03                      	JNZ	PRNTLP5
 2205/ F31 : E9 C6 00                   	JMP	NEXITM			; Do semi-colon routine
 2206/ F34 :                            PRNTLP5:
 2207/ F34 : 59                         	POP	CX			; Code string address to BC
 2208/ F35 : E8 B7 02                   	CALL	EVAL			; Evaluate expression
 2209/ F38 : 53                         	PUSH	BX			; Save code string address
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 38 - 8/7/2025 21:50:51


 2210/ F39 : A0 F9 32                   	MOV	AL,[TYPE]		; Get variable type
 2211/ F3C : 0A C0                      	OR	AL,AL			; Is it a string variable?
 2212/ F3E : 75 32                      	JNZ	PRNTST			; Yes - Output string contents
 2213/ F40 : E8 17 13                   	CALL	NUMASC			; Convert number to text
 2214/ F43 : E8 32 09                   	CALL	CRTST			; Create temporary strig
 2215/ F46 : C6 07 20                   	MOV	BYTE PTR [BX],' '	; Followed by a space
 2216/ F49 : 8B 1E 30 33                	MOV	BX,[FPREG]		; Get length of output
 2217/ F4D : FE 07                      	INC	BYTE PTR [BX]		; Plus 1 for the space
 2218/ F4F : 8B 1E 30 33                	MOV	BX,[FPREG]		; < Not needed >
 2219/ F53 : 2E A0 58 05                	MOV	AL,[LWIDTH]		; Get width of line
 2220/ F57 : 8A E8                      	MOV	CH,AL			; To B
 2221/ F59 : FE C5                      	INC	CH			; Width 255 (No limit)?
 2222/ F5B : 74 10                      	JZ	PRNTNB			; Yes - Output number string
 2223/ F5D : FE C5                      	INC	CH			; Adjust it
 2224/ F5F : A0 F7 32                   	MOV	AL,[CURPOS]		; Get cursor position
 2225/ F62 : 02 07                      	ADD	AL,[BX]			; Add length of string
 2226/ F64 : FE C8                      	DEC	AL			; Adjust it
 2227/ F66 : 3A C5                      	CMP	AL,CH			; Will output fit on this line?
 2228/ F68 : 72 03                      	JC	PRNTNB
 2229/ F6A : E8 1B 00                   	CALL	PRCRLF			; No - CRLF first
 2230/ F6D :                            PRNTNB:
 2231/ F6D : E8 66 09                   	CALL	PRS1			; Output string at (HL)
 2232/ F70 : 32 C0                      	XOR	AL,AL			; Skip CALL by setting address
 2233/ F72 :                            PRNTST:
 2234/ F72 : 74 03                      	JZ	PRNTST1
 2235/ F74 : E8 5F 09                   	CALL	PRS1			; Output string at (HL)
 2236/ F77 :                            PRNTST1:
 2237/ F77 : 5B                         	POP	BX			; Restore code string address
 2238/ F78 : EB 94                      	JMP	MRPRNT			; See if more to PRINT
 2239/ F7A :                            ;
 2240/ F7A :                            STTLIN:
 2241/ F7A : A0 F7 32                   	MOV	AL,[CURPOS]		; Make sure on new line
 2242/ F7D : 0A C0                      	OR	AL,AL			; Already at start?
 2243/ F7F : 75 07                      	JNZ	PRCRLF			; Start a new line
 2244/ F81 : C3                         	RET				; Yes - Do nothing
 2245/ F82 :                            ;	JMP	PRCRLF			; Start a new line
 2246/ F82 :                            ;
 2247/ F82 :                            ENDINP:
 2248/ F82 : C6 07 00                   	MOV	BYTE PTR [BX],0		; Mark end of buffer
 2249/ F85 : BB AC 32                   	MOV	BX,BUFFER-1		; Point to buffer
 2250/ F88 :                            PRCRLF:
 2251/ F88 : B0 0D                      	MOV	AL,CR			; Load a CR
 2252/ F8A : E8 58 FA                   	CALL	OUTC			; Output character
 2253/ F8D : B0 0A                      	MOV	AL,LF			; Load a LF
 2254/ F8F : E8 53 FA                   	CALL	OUTC			; Output character
 2255/ F92 :                            DONULL:
 2256/ F92 : 32 C0                      	XOR	AL,AL			; Set to position 0
 2257/ F94 : A2 F7 32                   	MOV	[CURPOS],AL		; Store it
 2258/ F97 : 2E A0 57 05                	MOV	AL,[NULLS]		; Get number of nulls
 2259/ F9B :                            NULLP:
 2260/ F9B : FE C8                      	DEC	AL			; Count them
 2261/ F9D : 75 01                      	JNZ	NULLP1
 2262/ F9F : C3                         	RET				; Return if done
 2263/ FA0 :                            NULLP1:
 2264/ FA0 : 9F                         	LAHF
 2265/ FA1 : 86 E0                      	XCHG	AH,AL
 2266/ FA3 : 50                         	PUSH	AX			; Save count
 2267/ FA4 : 86 E0                      	XCHG	AH,AL
 2268/ FA6 : 32 C0                      	XOR	AL,AL			; Load a null
 2269/ FA8 : E8 3A FA                   	CALL	OUTC			; Output it
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 39 - 8/7/2025 21:50:51


 2270/ FAB : 58                         	POP	AX			; Restore count
 2271/ FAC : 86 E0                      	XCHG	AH,AL
 2272/ FAE : 9E                         	SAHF
 2273/ FAF : EB EA                      	JMP	NULLP			; Keep counting
 2274/ FB1 :                            ;
 2275/ FB1 :                            DOCOM:
 2276/ FB1 : 2E A0 59 05                	MOV	AL,[COMMAN]		; Get comma width
 2277/ FB5 : 8A E8                      	MOV	CH,AL			; Save in B
 2278/ FB7 : A0 F7 32                   	MOV	AL,[CURPOS]		; Get current position
 2279/ FBA : 3A C5                      	CMP	AL,CH			; Within the limit?
 2280/ FBC : 72 03                      	JC	DOCOM1
 2281/ FBE : E8 C7 FF                   	CALL	PRCRLF			; No - output CRLF
 2282/ FC1 :                            DOCOM1:
 2283/ FC1 : 73 37                      	JNC	NEXITM			; Get next item
 2284/ FC3 :                            ZONELP:
 2285/ FC3 : 2C 0E                      	SUB	AL,14			; Next zone of 14 characters
 2286/ FC5 : 73 FC                      	JNC	ZONELP			; Repeat if more zones
 2287/ FC7 : F6 D0                      	NOT	AL			; Number of spaces to output
 2288/ FC9 : EB 22                      	JMP	ASPCS			; Output them
 2289/ FCB :                            ;
 2290/ FCB :                            DOTAB:
 2291/ FCB : 9F                         	LAHF
 2292/ FCC : 86 E0                      	XCHG	AH,AL
 2293/ FCE : 50                         	PUSH	AX			; Save token
 2294/ FCF : 86 E0                      	XCHG	AH,AL
 2295/ FD1 : E8 87 0C                   	CALL	FNDNUM			; Evaluate expression
 2296/ FD4 : E8 F5 F9                   	CALL	CHKSYN			; Make sure ")" follows
 2297/ FD7 : 29                         	DB	")"
 2298/ FD8 : 9F                         	LAHF
 2299/ FD9 : 4B                         	DEC	BX			; Back space on to ")"
 2300/ FDA : 9E                         	SAHF
 2301/ FDB : 58                         	POP	AX			; Restore token
 2302/ FDC : 86 E0                      	XCHG	AH,AL
 2303/ FDE : 9E                         	SAHF
 2304/ FDF : 2C A8                      	SUB	AL,ZSPC			; Was it "SPC(" ?
 2305/ FE1 : 53                         	PUSH	BX			; Save code string address
 2306/ FE2 : 74 03                      	JZ	DOSPC			; Yes - Do 'E' spaces
 2307/ FE4 : A0 F7 32                   	MOV	AL,[CURPOS]		; Get current position
 2308/ FE7 :                            DOSPC:
 2309/ FE7 : F6 D0                      	NOT	AL			; Number of spaces to print to
 2310/ FE9 : 02 C2                      	ADD	AL,DL			; Total number to print
 2311/ FEB : 73 0D                      	JNC	NEXITM			; TAB < Current POS(X)
 2312/ FED :                            ASPCS:
 2313/ FED : FE C0                      	INC	AL			; Output A spaces
 2314/ FEF : 8A E8                      	MOV	CH,AL			; Save number to print
 2315/ FF1 : B0 20                      	MOV	AL,' '			; Space
 2316/ FF3 :                            SPCLP:
 2317/ FF3 : E8 EF F9                   	CALL	OUTC			; Output character in A
 2318/ FF6 : FE CD                      	DEC	CH			; Count them
 2319/ FF8 : 75 F9                      	JNZ	SPCLP			; Repeat if more
 2320/ FFA :                            NEXITM:
 2321/ FFA : 5B                         	POP	BX			; Restore code string address
 2322/ FFB : E8 F5 FB                   	CALL	GETCHR			; Get next character
 2323/ FFE : E9 13 FF                   	JMP	PRNTLP			; More to print
 2324/1001 :                            ;
 2325/1001 :                            REDO:
 2326/1001 : 3F 52 65 64 6F 20 66 72 6F 	DB	"?Redo from start",CR,LF,0
      100A : 6D 20 73 74 61 72 74 0D 0A
      1013 : 00                        
 2327/1014 :                            
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 40 - 8/7/2025 21:50:51


 2328/1014 :                            ;
 2329/1014 :                            BADINP:
 2330/1014 : A0 19 33                   	MOV	AL,[READFG]		; READ or INPUT?
 2331/1017 : 0A C0                      	OR	AL,AL
 2332/1019 : 74 03                      	JZ	BADINP1			; READ - ?SN Error
 2333/101B : E9 E0 F5                   	JMP	DATSNR
 2334/101E :                            BADINP1:
 2335/101E : 59                         	POP	CX			; Throw away code string addr
 2336/101F : BB 01 10                   	MOV	BX,REDO			; "Redo from start" message
 2337/1022 : E8 AE 08                   	CALL	PRS			; Output string
 2338/1025 : E9 BF F7                   	JMP	DOAGN			; Do last INPUT again
 2339/1028 :                            ;
 2340/1028 :                            INPUT:
 2341/1028 : E8 DD 07                   	CALL	IDTEST			; Test for illegal direct
 2342/102B : 8A 07                      	MOV	AL,[BX]			; Get character after "INPUT"
 2343/102D : 3C 22                      	CMP	AL,'"'			; Is there a prompt string?
 2344/102F : B0 00                      	MOV	AL,0			; Clear A and leave flags
 2345/1031 : 2E A2 5B 05                	MOV	[CTLOFG],AL		; Enable output
 2346/1035 : 75 0D                      	JNZ	NOPMPT			; No prompt - get input
 2347/1037 : E8 41 08                   	CALL	QTSTR			; Get string terminated by '"'
 2348/103A : E8 8F F9                   	CALL	CHKSYN			; Check for ';' after prompt
 2349/103D : 3B                         	DB	';'
 2350/103E : 53                         	PUSH	BX			; Save code string address
 2351/103F : E8 94 08                   	CALL	PRS1			; Output prompt string
 2352/1042 : EB 01                      	JMP	NOPMPT1			; Skip "PUSH BX"
 2353/1044 :                            NOPMPT:
 2354/1044 : 53                         	PUSH	BX			; Save code string addr
 2355/1045 :                            NOPMPT1:
 2356/1045 : E8 A4 F7                   	CALL	PROMPT			; Get input with "? " prompt
 2357/1048 : 59                         	POP	CX			; Restore code string address
 2358/1049 : 73 03                      	JNC	NOPMPT2
 2359/104B : E9 17 FC                   	JMP	INPBRK			; Break pressed - Exit
 2360/104E :                            NOPMPT2:
 2361/104E : 9F                         	LAHF
 2362/104F : 43                         	INC	BX			; Next byte
 2363/1050 : 9E                         	SAHF
 2364/1051 : 8A 07                      	MOV	AL,[BX]			; Get it
 2365/1053 : 0A C0                      	OR	AL,AL			; End of line?
 2366/1055 : 9F                         	LAHF
 2367/1056 : 4B                         	DEC	BX			; Back again
 2368/1057 : 9E                         	SAHF
 2369/1058 : 51                         	PUSH	CX			; Re-save code string address
 2370/1059 : 75 03                      	JNZ	NOPMPT3			; Yes - Find next DATA stmt
 2371/105B : E9 D2 FD                   	JMP	NXTDTA
 2372/105E :                            NOPMPT3:
 2373/105E : C6 07 2C                   	MOV	BYTE PTR [BX],','	; Store comma as separator
 2374/1061 : EB 09                      	JMP	NXTITM			; Get next item
 2375/1063 :                            ;
 2376/1063 :                            READ:
 2377/1063 : 53                         	PUSH	BX			; Save code string address
 2378/1064 : 8B 1E 28 33                	MOV	BX,[NXTDAT]		; Next DATA statement
 2379/1068 : 0C AF                      	OR	AL,0AFH			; Flag "READ"
 2380/106A : EB 02                      	JMP	NXTITM1
 2381/106C :                            NXTITM:
 2382/106C : 32 C0                      	XOR	AL,AL			; Flag "INPUT"
 2383/106E :                            NXTITM1:
 2384/106E : A2 19 33                   	MOV	[READFG],AL		; Save "READ"/"INPUT" flag
 2385/1071 : 8B EC                      	MOV	BP,SP
 2386/1073 : 87 5E 00                   	XCHG	[BP],BX			; Get code str' , Save pointer
 2387/1076 : EB 04                      	JMP	GTVLUS			; Get values
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 41 - 8/7/2025 21:50:51


 2388/1078 :                            ;
 2389/1078 :                            NEDMOR:
 2390/1078 : E8 51 F9                   	CALL	CHKSYN			; Check for comma between items
 2391/107B : 2C                         	DB	','
 2392/107C :                            GTVLUS:
 2393/107C : E8 2B 04                   	CALL	GETVAR			; Get variable name
 2394/107F : 8B EC                      	MOV	BP,SP
 2395/1081 : 87 5E 00                   	XCHG	[BP],BX			; Save code str" , Get pointer
 2396/1084 : 52                         	PUSH	DX			; Save variable address
 2397/1085 : 8A 07                      	MOV	AL,[BX]			; Get next "INPUT"/"DATA" byte
 2398/1087 : 3C 2C                      	CMP	AL,','			; Comma?
 2399/1089 : 74 2A                      	JZ	ANTVLU			; Yes - Get another value
 2400/108B : A0 19 33                   	MOV	AL,[READFG]		; Is it READ?
 2401/108E : 0A C0                      	OR	AL,AL
 2402/1090 : 74 03                      	JZ	GTVLUS1			; Yes - Find next DATA stmt
 2403/1092 : E9 A8 00                   	JMP	FDTLP
 2404/1095 :                            GTVLUS1:
 2405/1095 : B0 3F                      	MOV	AL,'?'			; More INPUT needed
 2406/1097 : E8 4B F9                   	CALL	OUTC			; Output character
 2407/109A : E8 4F F7                   	CALL	PROMPT			; Get INPUT with prompt
 2408/109D : 5A                         	POP	DX			; Variable address
 2409/109E : 59                         	POP	CX			; Code string address
 2410/109F : 73 03                      	JNC	GTVLUS2
 2411/10A1 : E9 C1 FB                   	JMP	INPBRK			; Break pressed
 2412/10A4 :                            GTVLUS2:
 2413/10A4 : 9F                         	LAHF
 2414/10A5 : 43                         	INC	BX			; Point to next DATA byte
 2415/10A6 : 9E                         	SAHF
 2416/10A7 : 8A 07                      	MOV	AL,[BX]			; Get byte
 2417/10A9 : 0A C0                      	OR	AL,AL			; Is it zero (No input) ?
 2418/10AB : 9F                         	LAHF
 2419/10AC : 4B                         	DEC	BX			; Back space INPUT pointer
 2420/10AD : 9E                         	SAHF
 2421/10AE : 51                         	PUSH	CX			; Save code string address
 2422/10AF : 75 03                      	JNZ	GTVLUS3			; Find end of buffer
 2423/10B1 : E9 7C FD                   	JMP	NXTDTA
 2424/10B4 :                            GTVLUS3:
 2425/10B4 : 52                         	PUSH	DX			; Save variable address
 2426/10B5 :                            ANTVLU:
 2427/10B5 : A0 F9 32                   	MOV	AL,[TYPE]		; Check data type
 2428/10B8 : 0A C0                      	OR	AL,AL			; Is it numeric?
 2429/10BA : 74 2C                      	JZ	INPBIN			; Yes - Convert to binary
 2430/10BC : E8 34 FB                   	CALL	GETCHR			; Get next character
 2431/10BF : 8A F0                      	MOV	DH,AL			; Save input character
 2432/10C1 : 8A E8                      	MOV	CH,AL			; Again
 2433/10C3 : 3C 22                      	CMP	AL,'"'			; Start of literal sting?
 2434/10C5 : 74 10                      	JZ	STRENT			; Yes - Create string entry
 2435/10C7 : A0 19 33                   	MOV	AL,[READFG]		; "READ" or "INPUT" ?
 2436/10CA : 0A C0                      	OR	AL,AL
 2437/10CC : 8A F0                      	MOV	DH,AL			; Save 00 if "INPUT"
 2438/10CE : 74 02                      	JZ	ITMSEP			; "INPUT" - End with 00
 2439/10D0 : B6 3A                      	MOV	DH,':'			; "DATA" - End with 00 or ":"
 2440/10D2 :                            ITMSEP:
 2441/10D2 : B5 2C                      	MOV	CH,','			; Item separator
 2442/10D4 : 9F                         	LAHF
 2443/10D5 : 4B                         	DEC	BX			; Back space for DTSTR
 2444/10D6 : 9E                         	SAHF
 2445/10D7 :                            STRENT:
 2446/10D7 : E8 A5 07                   	CALL	DTSTR			; Get string terminated by D
 2447/10DA : 87 DA                      	XCHG	BX,DX			; String address to DE
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 42 - 8/7/2025 21:50:51


 2448/10DC : BB F7 10                   	MOV	BX,LTSTND		; Where to go after LETSTR
 2449/10DF : 8B EC                      	MOV	BP,SP
 2450/10E1 : 87 5E 00                   	XCHG	[BP],BX			; Save HL , get input ppinter
 2451/10E4 : 52                         	PUSH	DX			; Save address of string
 2452/10E5 : E9 94 FD                   	JMP	LETSTR			; Assign string to variable
 2453/10E8 :                            ;
 2454/10E8 :                            INPBIN:
 2455/10E8 : E8 08 FB                   	CALL	GETCHR			; Get next character
 2456/10EB : E8 9B 10                   	CALL	ASCTFP			; Convert ASCII to FP number
 2457/10EE : 8B EC                      	MOV	BP,SP
 2458/10F0 : 87 5E 00                   	XCHG	[BP],BX			; Save input ptr, Get var addr
 2459/10F3 : E8 76 0F                   	CALL	FPTHL			; Move FPREG to variable
 2460/10F6 : 5B                         	POP	BX			; Restore input pointer
 2461/10F7 :                            LTSTND:
 2462/10F7 :                            ;	LAHF
 2463/10F7 : 4B                         	DEC	BX			; DEC 'cos GETCHR INCs
 2464/10F8 :                            ;	SAHF
 2465/10F8 : E8 F8 FA                   	CALL	GETCHR			; Get next character
 2466/10FB : 74 07                      	JZ	MORDT			; End of line - More needed?
 2467/10FD : 3C 2C                      	CMP	AL,','			; Another value?
 2468/10FF : 74 03                      	JZ	MORDT			; No - Bad input
 2469/1101 : E9 10 FF                   	JMP	BADINP
 2470/1104 :                            MORDT:
 2471/1104 : 8B EC                      	MOV	BP,SP
 2472/1106 : 87 5E 00                   	XCHG	[BP],BX			; Get code string address
 2473/1109 :                            ;	LAHF
 2474/1109 : 4B                         	DEC	BX			; DEC 'cos GETCHR INCs
 2475/110A :                            ;	SAHF
 2476/110A : E8 E6 FA                   	CALL	GETCHR			; Get next character
 2477/110D : 74 03                      	JZ	MORDT1			; More needed - Get it
 2478/110F : E9 66 FF                   	JMP	NEDMOR
 2479/1112 :                            MORDT1:
 2480/1112 : 5A                         	POP	DX			; Restore DATA pointer
 2481/1113 : A0 19 33                   	MOV	AL,[READFG]		; "READ" or "INPUT" ?
 2482/1116 : 0A C0                      	OR	AL,AL
 2483/1118 : 87 DA                      	XCHG	BX,DX			; DATA pointer to HL
 2484/111A : 74 03                      	JZ	MORDT2
 2485/111C : E9 05 FB                   	JMP	UPDATA			; Update DATA pointer if "READ"
 2486/111F :                            MORDT2:
 2487/111F : 52                         	PUSH	DX			; Save code string address
 2488/1120 : 0A 07                      	OR	AL,[BX]			; More input given?
 2489/1122 : BB 2C 11                   	MOV	BX,EXTIG		; "?Extra ignored" message
 2490/1125 : 74 03                      	JZ	MORDT3
 2491/1127 : E8 A9 07                   	CALL	PRS			; Output string if extra given
 2492/112A :                            MORDT3:
 2493/112A : 5B                         	POP	BX			; Restore code string address
 2494/112B : C3                         	RET
 2495/112C :                            ;
 2496/112C :                            EXTIG:
 2497/112C : 3F 45 78 74 72 61 20 69 67 	DB	"?Extra ignored",CR,LF,0
      1135 : 6E 6F 72 65 64 0D 0A 00   
 2498/113D :                            
 2499/113D :                            
 2500/113D :                            ;
 2501/113D :                            FDTLP:
 2502/113D : E8 F1 FC                   	CALL	DATA			; Get next statement
 2503/1140 : 0A C0                      	OR	AL,AL			; End of line?
 2504/1142 : 75 23                      	JNZ	FANDT			; No - See if DATA statement
 2505/1144 : 9F                         	LAHF
 2506/1145 : 43                         	INC	BX
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 43 - 8/7/2025 21:50:51


 2507/1146 : 9E                         	SAHF
 2508/1147 : 8A 07                      	MOV	AL,[BX]			; End of program?
 2509/1149 : 9F                         	LAHF
 2510/114A : 43                         	INC	BX
 2511/114B : 9E                         	SAHF
 2512/114C : 0A 07                      	OR	AL,[BX]			; 00 00 Ends program
 2513/114E : B2 06                      	MOV	DL,OD			; ?OD Error
 2514/1150 : 75 03                      	JNZ	FDTLP1
 2515/1152 : E9 CC F4                   	JMP	ERROR			; Yes - Out of DATA
 2516/1155 :                            FDTLP1:
 2517/1155 : 9F                         	LAHF
 2518/1156 : 43                         	INC	BX
 2519/1157 : 9E                         	SAHF
 2520/1158 : 8A 17                      	MOV	DL,[BX]			; LSB of line number
 2521/115A : 9F                         	LAHF
 2522/115B : 43                         	INC	BX
 2523/115C : 9E                         	SAHF
 2524/115D : 8A 37                      	MOV	DH,[BX]			; MSB of line number
 2525/115F : 87 DA                      	XCHG	BX,DX
 2526/1161 : 89 1E 15 33                	MOV	[DATLIN],BX		; Set line of current DATA item
 2527/1165 : 87 DA                      	XCHG	BX,DX
 2528/1167 :                            FANDT:
 2529/1167 : E8 89 FA                   	CALL	GETCHR			; Get next character
 2530/116A : 3C 83                      	CMP	AL,ZDATA		; "DATA" token
 2531/116C : 75 CF                      	JNZ	FDTLP			; No "DATA" - Keep looking
 2532/116E : E9 44 FF                   	JMP	ANTVLU			; Found - Convert input
 2533/1171 :                            ;
 2534/1171 :                            NEXT:
 2535/1171 : BA 00 00                   	MOV	DX,0			; In case no index given
 2536/1174 :                            NEXT1:
 2537/1174 : 74 03                      	JZ	NEXT2
 2538/1176 : E8 31 03                   	CALL	GETVAR			; Get index address
 2539/1179 :                            NEXT2:
 2540/1179 : 89 1E 1A 33                	MOV	[BRKLIN],BX		; Save code string address
 2541/117D : E8 0E F4                   	CALL	BAKSTK			; Look for "FOR" block
 2542/1180 : 74 03                      	JZ	NEXT3
 2543/1182 : E9 8A F4                   	JMP	NFERR			; No "FOR" - ?NF Error
 2544/1185 :                            NEXT3:
 2545/1185 : 8B E3                      	MOV	SP,BX			; Clear nested loops
 2546/1187 : 52                         	PUSH	DX			; Save index address
 2547/1188 : 8A 07                      	MOV	AL,[BX]			; Get sign of STEP
 2548/118A : 9F                         	LAHF
 2549/118B : 43                         	INC	BX
 2550/118C : 9E                         	SAHF
 2551/118D : 9F                         	LAHF
 2552/118E : 86 E0                      	XCHG	AH,AL
 2553/1190 : 50                         	PUSH	AX			; Save sign of STEP
 2554/1191 : 86 E0                      	XCHG	AH,AL
 2555/1193 : 52                         	PUSH	DX			; Save index address
 2556/1194 : E8 AF 0E                   	CALL	PHLTFP			; Move index value to FPREG
 2557/1197 : 8B EC                      	MOV	BP,SP
 2558/1199 : 87 5E 00                   	XCHG	[BP],BX			; Save address of TO value
 2559/119C : 53                         	PUSH	BX			; Save address of index
 2560/119D : E8 F9 0A                   	CALL	ADDPHL			; Add STEP to index valiable
 2561/11A0 : 5B                         	POP	BX			; Restore address of index
 2562/11A1 : E8 C8 0E                   	CALL	FPTHL			; Move value to index variable
 2563/11A4 : 5B                         	POP	BX			; Restore address of TO value
 2564/11A5 : E8 B3 0E                   	CALL	LOADFP			; Move TO value to BCDE
 2565/11A8 : 53                         	PUSH	BX			; Save address of line of FOR
 2566/11A9 : E8 F7 0E                   	CALL	CMPNUM			; Compare index with TO value
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 44 - 8/7/2025 21:50:51


 2567/11AC : 5B                         	POP	BX			; Restore address of line num
 2568/11AD : 59                         	POP	CX			; Address of sign of STEP
 2569/11AE : 2A C5                      	SUB	AL,CH			; Compare with expected sign
 2570/11B0 : E8 A8 0E                   	CALL	LOADFP			; BC = Loop stmt,DE = Line num
 2571/11B3 : 74 0C                      	JZ	KILFOR			; Loop finished - Terminal it
 2572/11B5 : 87 DA                      	XCHG	BX,DX			; Loop statement line number
 2573/11B7 : 2E 89 1E 72 05             	MOV	[LINEAT],BX		; Set loop line number
 2574/11BC : 8B D9                      	MOV	BX,CX			; Set code string to loop
 2575/11BE : E9 C9 F9                   	JMP	PUTFID			; Put back "FOR" and continue
 2576/11C1 :                            ;
 2577/11C1 :                            KILFOR:
 2578/11C1 : 8B E3                      	MOV	SP,BX			; Remove "FOR" block
 2579/11C3 : 8B 1E 1A 33                	MOV	BX,[BRKLIN]		; Code string after "NE XT"
 2580/11C7 : 8A 07                      	MOV	AL,[BX]			; Get next byte in code string
 2581/11C9 : 3C 2C                      	CMP	AL,','			; More NEXTs ?
 2582/11CB : 74 03                      	JZ	KILFOR1			; No - Do next statemen
 2583/11CD : E9 BE F9                   	JMP	RUNCNT
 2584/11D0 :                            KILFOR1:
 2585/11D0 : E8 20 FA                   	CALL	GETCHR			; Position to index nam
 2586/11D3 : E8 9E FF                   	CALL	NEXT1			; Re-enter NEXT routine
 2587/11D6 :                            ; < will not RETurn to here , Exit to RUNCNT or Loop >
 2588/11D6 :                            ;
 2589/11D6 :                            GETNUM:
 2590/11D6 : E8 16 00                   	CALL	EVAL			; Get a numeric expression
 2591/11D9 :                            TSTNUM:
 2592/11D9 : 0A C0                      	OR	AL,AL			; Clear carry (numeric)
 2593/11DB : EB 01                      	JMP	CHKTYP
 2594/11DD :                            TSTSTR:
 2595/11DD : F9                         	STC				; Set carry (string)
 2596/11DE :                            CHKTYP:
 2597/11DE : A0 F9 32                   	MOV	AL,[TYPE]		; Check types match
 2598/11E1 : 12 C0                      	ADC	AL,AL			; Expected + actual
 2599/11E3 : 0A C0                      	OR	AL,AL			; Clear carry , set parity
 2600/11E5 : 7B 01                      	JPO	CHKTYP1			; RET PE
 2601/11E7 : C3                         	RET				; Even parity - Types match
 2602/11E8 :                            CHKTYP1:
 2603/11E8 : E9 34 F4                   	JMP	TMERR			; Different types - Error
 2604/11EB :                            ;
 2605/11EB :                            OPNPAR:
 2606/11EB : E8 DE F7                   	CALL	CHKSYN			; Make sure "(" follows
 2607/11EE : 28                         	DB	"("
 2608/11EF :                            EVAL:
 2609/11EF : 9F                         	LAHF
 2610/11F0 : 4B                         	DEC	BX
 2611/11F1 : 9E                         	SAHF				; Evaluate expression & save
 2612/11F2 : B6 00                      	MOV	DH,0			; Precedence value
 2613/11F4 :                            EVAL1:
 2614/11F4 : 52                         	PUSH	DX			; Save precedence
 2615/11F5 : B1 01                      	MOV	CL,1
 2616/11F7 : E8 DE F3                   	CALL	CHKSTK			; Check for 1 level of stack
 2617/11FA : E8 9B 00                   	CALL	OPRND			; Get next expression value
 2618/11FD :                            EVAL2:
 2619/11FD : 89 1E 1C 33                	MOV	[NXTOPR],BX		; Save address of next operator
 2620/1201 :                            EVAL3:
 2621/1201 : 8B 1E 1C 33                	MOV	BX,[NXTOPR]		; Restore address of next opt
 2622/1205 : 59                         	POP	CX			; Precedence value and operator
 2623/1206 : 8A C5                      	MOV	AL,CH			; Get precedence value
 2624/1208 : 3C 78                      	CMP	AL,78H			; "AND" or "OR" ?
 2625/120A : 72 03                      	JC	EVAL4
 2626/120C : E8 CA FF                   	CALL	TSTNUM			; No - Make sure it's a number
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 45 - 8/7/2025 21:50:51


 2627/120F :                            EVAL4:
 2628/120F : 8A 07                      	MOV	AL,[BX]			; Get next operator / function
 2629/1211 : B6 00                      	MOV	DH,0			; Clear Last relation
 2630/1213 :                            RLTLP:
 2631/1213 : 2C B3                      	SUB	AL,ZGTR			; ">" Token
 2632/1215 : 72 1C                      	JC	FOPRND			; + - * / ^ AND OR - Test it
 2633/1217 : 3C 03                      	CMP	AL,ZLTH+1-ZGTR		; < = >
 2634/1219 : 73 18                      	JNC	FOPRND			; Function - Call it
 2635/121B : 3C 01                      	CMP	AL,ZEQUAL-ZGTR		; "="
 2636/121D : D0 D0                      	RCL	AL,1			; <- Test for legal
 2637/121F : 32 C6                      	XOR	AL,DH			; <- combinations of < = >
 2638/1221 : 3A C6                      	CMP	AL,DH			; <- by combining last token
 2639/1223 : 8A F0                      	MOV	DH,AL			; <- with current one
 2640/1225 : 73 03                      	JNC	RLTLP1
 2641/1227 : E9 DD F3                   	JMP	SNERR			; Error if "<<' '==" or ">>"
 2642/122A :                            RLTLP1:
 2643/122A : 89 1E 11 33                	MOV	[CUROPR],BX		; Save address of current token
 2644/122E : E8 C2 F9                   	CALL	GETCHR			; Get next character
 2645/1231 : EB E0                      	JMP	RLTLP			; Treat the two as one
 2646/1233 :                            ;
 2647/1233 :                            FOPRND:
 2648/1233 : 8A C6                      	MOV	AL,DH			; < = > found ?
 2649/1235 : 0A C0                      	OR	AL,AL
 2650/1237 : 74 03                      	JZ	FOPRND1
 2651/1239 : E9 9F 01                   	JMP	TSTRED			; Yes - Test for reduction
 2652/123C :                            FOPRND1:
 2653/123C : 8A 07                      	MOV	AL,[BX]			; Get operator token
 2654/123E : 89 1E 11 33                	MOV	[CUROPR],BX		; Save operator address
 2655/1242 : 2C AC                      	SUB	AL,ZPLUS		; Operator or function?
 2656/1244 : 73 01                      	JNC	FOPRND2
 2657/1246 : C3                         	RET				; Neither - Exit
 2658/1247 :                            FOPRND2:
 2659/1247 : 3C 07                      	CMP	AL,ZOR+1-ZPLUS		; Is it + - * / ^ AND OR ?
 2660/1249 : 72 01                      	JC	FOPRND3
 2661/124B : C3                         	RET				; No - Exit
 2662/124C :                            FOPRND3:
 2663/124C : 8A D0                      	MOV	DL,AL			; Coded operator
 2664/124E : A0 F9 32                   	MOV	AL,[TYPE]		; Get data type
 2665/1251 : FE C8                      	DEC	AL			; FF = numeric , 00 = string
 2666/1253 : 0A C2                      	OR	AL,DL			; Combine with coded operator
 2667/1255 : 8A C2                      	MOV	AL,DL			; Get coded operator
 2668/1257 : 75 03                      	JNZ	FOPRND4			; String concatenation
 2669/1259 : E9 E6 07                   	JMP	CONCAT
 2670/125C :                            FOPRND4:
 2671/125C : D0 C0                      	ROL	AL,1			; Times 2
 2672/125E : 02 C2                      	ADD	AL,DL			; Times 3
 2673/1260 : 8A D0                      	MOV	DL,AL			; To DE (D is 0)
 2674/1262 : BB D2 04                   	MOV	BX,PRITAB		; Precedence table
 2675/1265 : 03 DA                      	ADD	BX,DX			; To the operator concerned
 2676/1267 : 8A C5                      	MOV	AL,CH			; Last operator precedence
 2677/1269 : 8A 37                      	MOV	DH,[BX]			; Get evaluation precedence
 2678/126B : 3A C6                      	CMP	AL,DH			; Compare with eval precedence
 2679/126D : 72 01                      	JC	FOPRND5
 2680/126F : C3                         	RET				; Exit if higher precedence
 2681/1270 :                            FOPRND5:
 2682/1270 : 9F                         	LAHF
 2683/1271 : 43                         	INC	BX			; Point to routine addr
 2684/1272 : 9E                         	SAHF
 2685/1273 : E8 63 FF                   	CALL	TSTNUM			; Make sure it's a number
 2686/1276 :                            ;
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 46 - 8/7/2025 21:50:51


 2687/1276 :                            STKTHS:
 2688/1276 : 51                         	PUSH	CX			; Save last precedence token
 2689/1277 : B9 01 12                   	MOV	CX,EVAL3		; Where to go on prec' break
 2690/127A : 51                         	PUSH	CX			; Save on stack for return
 2691/127B : 8A EA                      	MOV	CH,DL			; Save operator
 2692/127D : 8A CE                      	MOV	CL,DH			; Save precedence
 2693/127F : E8 AB 0D                   	CALL	STAKFP			; Move value to stack
 2694/1282 : 8A D5                      	MOV	DL,CH			; Restore operator
 2695/1284 : 8A F1                      	MOV	DH,CL			; Restore precedence
 2696/1286 : 8A 0F                      	MOV	CL,[BX]			; Get LSB of routine address
 2697/1288 : 9F                         	LAHF
 2698/1289 : 43                         	INC	BX
 2699/128A : 9E                         	SAHF
 2700/128B : 8A 2F                      	MOV	CH,[BX]			; Get MSB of routine address
 2701/128D : 9F                         	LAHF
 2702/128E : 43                         	INC	BX
 2703/128F : 9E                         	SAHF
 2704/1290 : 51                         	PUSH	CX			; Save routine address
 2705/1291 : 8B 1E 11 33                	MOV	BX,[CUROPR]		; Address of current operator
 2706/1295 : E9 5C FF                   	JMP	EVAL1			; Loop until prec' break
 2707/1298 :                            ;
 2708/1298 :                            OPRND:
 2709/1298 : 32 C0                      	XOR	AL,AL			; Get operand routine
 2710/129A : A2 F9 32                   	MOV	[TYPE],AL		; Set numeric expected
 2711/129D : E8 53 F9                   	CALL	GETCHR			; Get next character
 2712/12A0 : B2 24                      	MOV	DL,MO			; ?MO Error
 2713/12A2 : 75 03                      	JNZ	OPRND1
 2714/12A4 : E9 7A F3                   	JMP	ERROR			; No operand - Error
 2715/12A7 :                            OPRND1:
 2716/12A7 : 73 03                      	JNC	OPRND2
 2717/12A9 : E9 DD 0E                   	JMP	ASCTFP			; Number - Get value
 2718/12AC :                            OPRND2:
 2719/12AC : E8 2B FA                   	CALL	CHKLTR			; See if a letter
 2720/12AF : 73 5E                      	JNC	CONVAR			; Letter - Find variable
 2721/12B1 : 3C 26                      	CMP	AL,'&'			; &H = HEX, &B = BINARY
 2722/12B3 : 75 18                      	JNZ	NOTAMP
 2723/12B5 : E8 3B F9                   	CALL	GETCHR			; Get next character
 2724/12B8 : 3C 48                      	CMP	AL,'H'			; Hex number indicated?
 2725/12BA : 75 03                      	JNZ	OPRND3
 2726/12BC : E9 25 14                   	JMP	HEXTFP			; Convert Hex to FPREG
 2727/12BF :                            OPRND3:
 2728/12BF : 3C 42                      	CMP	AL,'B'			; Binary number indicat
 2729/12C1 : 75 03                      	JNZ	OPRND4
 2730/12C3 : E9 A2 14                   	JMP	BINTFP			; Convert Bin to FPREG
 2731/12C6 :                            OPRND4:
 2732/12C6 : B2 02                      	MOV	DL,SN			; If neither then a ?SN
 2733/12C8 : 75 03                      	JNZ	NOTAMP
 2734/12CA : E9 54 F3                   	JMP	ERROR
 2735/12CD :                            NOTAMP:
 2736/12CD : 3C AC                      	CMP	AL,ZPLUS		; '+' Token ?
 2737/12CF : 74 C7                      	JZ	OPRND			; Yes - Look for operand
 2738/12D1 : 3C 2E                      	CMP	AL,'.'			; '.' ?
 2739/12D3 : 75 03                      	JNZ	NOTAMP1			; Yes - Create FP number
 2740/12D5 : E9 B1 0E                   	JMP	ASCTFP
 2741/12D8 :                            NOTAMP1:
 2742/12D8 : 3C AD                      	CMP	AL,ZMINUS		; '-' Token ?
 2743/12DA : 74 21                      	JZ	MINUS			; Yes - Do minus
 2744/12DC : 3C 22                      	CMP	AL,'"'			; Literal string ?
 2745/12DE : 75 03                      	JNZ	NOTAMP2
 2746/12E0 : E9 98 05                   	JMP	QTSTR			; Get string terminated
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 47 - 8/7/2025 21:50:51


 2747/12E3 :                            NOTAMP2:
 2748/12E3 : 3C AA                      	CMP	AL,ZNOT			; "NOT" Token ?
 2749/12E5 : 75 03                      	JNZ	NOTAMP3
 2750/12E7 : E9 91 01                   	JMP	EVNOT			; Yes - Eval NOT expres
 2751/12EA :                            NOTAMP3:
 2752/12EA : 3C A7                      	CMP	AL,ZFN			; "FN" Token ?
 2753/12EC : 75 03                      	JNZ	NOTAMP4
 2754/12EE : E9 AF 04                   	JMP	DOFN			; Yes - Do FN routine
 2755/12F1 :                            NOTAMP4:
 2756/12F1 : 2C B6                      	SUB	AL,ZSGN			; Is it a function?
 2757/12F3 : 73 30                      	JNC	FNOFST			; Yes - Evaluate functi
 2758/12F5 :                            EVLPAR:
 2759/12F5 : E8 F3 FE                   	CALL	OPNPAR			; Evaluate expression i
 2760/12F8 : E8 D1 F6                   	CALL	CHKSYN			; Make sure ")" follows
 2761/12FB : 29                         	DB	")"
 2762/12FC : C3                         	RET
 2763/12FD :                            ;
 2764/12FD :                            MINUS:
 2765/12FD : B6 7D                      	MOV	DH,7DH			; '-' precedence
 2766/12FF : E8 F2 FE                   	CALL	EVAL1			; Evaluate until prec' break
 2767/1302 : 8B 1E 1C 33                	MOV	BX,[NXTOPR]		; Get next operator address
 2768/1306 : 53                         	PUSH	BX			; Save next operator address
 2769/1307 : E8 19 0D                   	CALL	INVSGN			; Negate value
 2770/130A :                            RETNUM:
 2771/130A : E8 CC FE                   	CALL	TSTNUM			; Make sure it's a number
 2772/130D : 5B                         	POP	BX			; Restore next operator address
 2773/130E : C3                         	RET
 2774/130F :                            ;
 2775/130F :                            CONVAR:
 2776/130F : E8 98 01                   	CALL	GETVAR			; Get variable address to DE
 2777/1312 :                            FRMEVL:
 2778/1312 : 53                         	PUSH	BX			; Save code string address
 2779/1313 : 87 DA                      	XCHG	BX,DX			; Variable address to HL
 2780/1315 : 89 1E 30 33                	MOV	[FPREG],BX		; Save address of variable
 2781/1319 : A0 F9 32                   	MOV	AL,[TYPE]		; Get type
 2782/131C : 0A C0                      	OR	AL,AL			; Numeric?
 2783/131E : 75 03                      	JNZ	FRMEVL1
 2784/1320 : E8 23 0D                   	CALL	PHLTFP			; Yes - Move contents to FPREG
 2785/1323 :                            FRMEVL1:
 2786/1323 : 5B                         	POP	BX			; Restore code string address
 2787/1324 : C3                         	RET
 2788/1325 :                            ;
 2789/1325 :                            FNOFST:
 2790/1325 : B5 00                      	MOV	CH,0			; Get address of function
 2791/1327 : D0 C0                      	ROL	AL,1			; Double function offset
 2792/1329 : 8A C8                      	MOV	CL,AL			; BC = Offset in function table
 2793/132B : 51                         	PUSH	CX			; Save adjusted token value
 2794/132C : E8 C4 F8                   	CALL	GETCHR			; Get next character
 2795/132F : 8A C1                      	MOV	AL,CL			; Get adjusted token value
 2796/1331 : 3C 31                      	CMP	AL,2*(ZLEFT-ZSGN)-1	; Adj' LEFT$,RIGHT$ or MID$ ?
 2797/1333 : 72 24                      	JC	FNVAL			; No - Do function
 2798/1335 : E8 B3 FE                   	CALL	OPNPAR			; Evaluate expression  (X,...
 2799/1338 : E8 91 F6                   	CALL	CHKSYN			; Make sure ',' follows
 2800/133B : 2C                         	DB	','
 2801/133C : E8 9E FE                   	CALL	TSTSTR			; Make sure it's a string
 2802/133F : 87 DA                      	XCHG	BX,DX			; Save code string address
 2803/1341 : 8B 1E 30 33                	MOV	BX,[FPREG]		; Get address of string
 2804/1345 : 8B EC                      	MOV	BP,SP
 2805/1347 : 87 5E 00                   	XCHG	[BP],BX			; Save address of string
 2806/134A : 53                         	PUSH	BX			; Save adjusted token value
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 48 - 8/7/2025 21:50:51


 2807/134B : 87 DA                      	XCHG	BX,DX			; Restore code string address
 2808/134D : E8 0E 09                   	CALL	GETINT			; Get integer 0-255
 2809/1350 : 87 DA                      	XCHG	BX,DX			; Save code string address
 2810/1352 : 8B EC                      	MOV	BP,SP
 2811/1354 : 87 5E 00                   	XCHG	[BP],BX			; Save integer,HL = adj' token
 2812/1357 : EB 0C                      	JMP	GOFUNC			; Jump to string function
 2813/1359 :                            ;
 2814/1359 :                            FNVAL:
 2815/1359 : E8 99 FF                   	CALL	EVLPAR			; Evaluate expression
 2816/135C : 8B EC                      	MOV	BP,SP
 2817/135E : 87 5E 00                   	XCHG	[BP],BX			; HL = Adjusted token value
 2818/1361 : BA 0A 13                   	MOV	DX,RETNUM		; Return number from function
 2819/1364 : 52                         	PUSH	DX			; Save on stack
 2820/1365 :                            GOFUNC:
 2821/1365 : B9 31 03                   	MOV	CX,FNCTAB		; Function routine address
 2822/1368 : 03 D9                      	ADD	BX,CX			; Point to right address
 2823/136A : 8A 0F                      	MOV	CL,[BX]			; Get LSB of address
 2824/136C : 9F                         	LAHF
 2825/136D : 43                         	INC	BX
 2826/136E : 9E                         	SAHF
 2827/136F : 8A 3F                      	MOV	BH,[BX]			; Get MSB of address
 2828/1371 : 8A D9                      	MOV	BL,CL			; Address to HL
 2829/1373 : 53                         	PUSH	BX
 2830/1374 : C3                         	RET
 2831/1375 :                            ;	JMP	[BX]			; Jump to function
 2832/1375 :                            ;
 2833/1375 :                            SGNEXP:
 2834/1375 : FE CE                      	DEC	DH			; Dec to flag negative exponent
 2835/1377 : 3C AD                      	CMP	AL,ZMINUS		; '-' token ?
 2836/1379 : 75 01                      	JNZ	SGNEXP1
 2837/137B : C3                         	RET				; Yes - Return
 2838/137C :                            SGNEXP1:
 2839/137C : 3C 2D                      	CMP	AL,'-'			; '-' ASCII ?
 2840/137E : 75 01                      	JNZ	SGNEXP2
 2841/1380 : C3                         	RET				; Yes - Return
 2842/1381 :                            SGNEXP2:
 2843/1381 : FE C6                      	INC	DH			; nc to flag positive exponent
 2844/1383 : 3C 2B                      	CMP	AL,'+'			; '+' ASCII ?
 2845/1385 : 75 01                      	JNZ	SGNEXP3
 2846/1387 : C3                         	RET				; Yes - Return
 2847/1388 :                            SGNEXP3:
 2848/1388 : 3C AC                      	CMP	AL,ZPLUS		; '+' token ?
 2849/138A : 75 01                      	JNZ	SGNEXP4
 2850/138C : C3                         	RET				; Yes - Return
 2851/138D :                            SGNEXP4:
 2852/138D :                            ;	LAHF
 2853/138D : 4B                         	DEC	BX			; DEC 'cos GETCHR INCs
 2854/138E :                            ;	SAHF
 2855/138E : C3                         	RET				; Return "NZ"
 2856/138F :                            ;
 2857/138F :                            POR:
 2858/138F : 0C AF                      	OR	AL,0AFH			; Flag "OR"
 2859/1391 : EB 02                      	JMP	PAND1
 2860/1393 :                            PAND:
 2861/1393 : 32 C0                      	XOR	AL,AL			; Flag "AND"
 2862/1395 :                            PAND1:
 2863/1395 : 9F                         	LAHF
 2864/1396 : 86 E0                      	XCHG	AH,AL
 2865/1398 : 50                         	PUSH	AX			; Save "AND" / "OR" flag
 2866/1399 : 86 E0                      	XCHG	AH,AL
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 49 - 8/7/2025 21:50:51


 2867/139B : E8 3B FE                   	CALL	TSTNUM			; Make sure it's a number
 2868/139E : E8 4F F9                   	CALL	DEINT			; Get integer -32768 to 32767
 2869/13A1 : 58                         	POP	AX			; Restore "AND" / "OR" flag
 2870/13A2 : 86 E0                      	XCHG	AH,AL
 2871/13A4 : 9E                         	SAHF
 2872/13A5 : 87 DA                      	XCHG	BX,DX			; <- Get last
 2873/13A7 : 59                         	POP	CX			; <- value
 2874/13A8 : 8B EC                      	MOV	BP,SP
 2875/13AA : 87 5E 00                   	XCHG	[BP],BX			; <- from
 2876/13AD : 87 DA                      	XCHG	BX,DX			; <- stack
 2877/13AF : E8 97 0C                   	CALL	FPBCDE			; Move last value to FPREG
 2878/13B2 : 9F                         	LAHF
 2879/13B3 : 86 E0                      	XCHG	AH,AL
 2880/13B5 : 50                         	PUSH	AX			; Save "AND" / "OR" flag
 2881/13B6 : 86 E0                      	XCHG	AH,AL
 2882/13B8 : E8 35 F9                   	CALL	DEINT			; Get integer -32768 to 32767
 2883/13BB : 58                         	POP	AX			; Restore "AND" / "OR" flag
 2884/13BC : 86 E0                      	XCHG	AH,AL
 2885/13BE : 9E                         	SAHF
 2886/13BF : 59                         	POP	CX			; Get value
 2887/13C0 : 8A C1                      	MOV	AL,CL			; Get LSB
 2888/13C2 : BB 4B 17                   	MOV	BX,ACPASS		; Address of save AC as current
 2889/13C5 : 75 0A                      	JNZ	POR1			; Jump if OR
 2890/13C7 : 22 C2                      	AND	AL,DL			; "AND" LSBs
 2891/13C9 : 8A C8                      	MOV	CL,AL			; Save LSB
 2892/13CB : 8A C5                      	MOV	AL,CH			; Get MBS
 2893/13CD : 22 C6                      	AND	AL,DH			; "AND" MSBs
 2894/13CF : 53                         	PUSH	BX
 2895/13D0 : C3                         	RET
 2896/13D1 :                            ;	JMP	[BX]			; Save AC as current (ACPASS)
 2897/13D1 :                            ;
 2898/13D1 :                            POR1:
 2899/13D1 : 0A C2                      	OR	AL,DL			; "OR" LSBs
 2900/13D3 : 8A C8                      	MOV	CL,AL			; Save LSB
 2901/13D5 : 8A C5                      	MOV	AL,CH			; Get MSB
 2902/13D7 : 0A C6                      	OR	AL,DH			; "OR" MSBs
 2903/13D9 : 53                         	PUSH	BX
 2904/13DA : C3                         	RET
 2905/13DB :                            ;	JMP	[BX]			; Save AC as current (ACPASS)
 2906/13DB :                            ;
 2907/13DB :                            TSTRED:
 2908/13DB : BB F5 13                   	MOV	BX,CMPLOG		; Logical compare routi
 2909/13DE : A0 F9 32                   	MOV	AL,[TYPE]		; Get data type
 2910/13E1 : D0 D8                      	RCR	AL,1			; Carry set = string
 2911/13E3 : 8A C6                      	MOV	AL,DH			; Get last precedence value
 2912/13E5 : D0 D0                      	RCL	AL,1			; Times 2 plus carry
 2913/13E7 : 8A D0                      	MOV	DL,AL			; To E
 2914/13E9 : B6 64                      	MOV	DH,64H			; Relational precedence
 2915/13EB : 8A C5                      	MOV	AL,CH			; Get current precedence
 2916/13ED : 3A C6                      	CMP	AL,DH			; Compare with last
 2917/13EF : 72 01                      	JC	TSTRED1
 2918/13F1 : C3                         	RET				; Eval if last was rel' or log'
 2919/13F2 :                            TSTRED1:
 2920/13F2 : E9 81 FE                   	JMP	STKTHS			; Stack this one and get next
 2921/13F5 :                            ;
 2922/13F5 :                            CMPLOG:
 2923/13F5 : F7 13                      	DW	CMPLG1			; Compare two values / strings
 2924/13F7 :                            CMPLG1:
 2925/13F7 : 8A C1                      	MOV	AL,CL			; Get data type
 2926/13F9 : 0A C0                      	OR	AL,AL
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 50 - 8/7/2025 21:50:51


 2927/13FB : D0 D8                      	RCR	AL,1
 2928/13FD : 59                         	POP	CX			; Get last expression to BCDE
 2929/13FE : 5A                         	POP	DX
 2930/13FF : 9F                         	LAHF
 2931/1400 : 86 E0                      	XCHG	AH,AL
 2932/1402 : 50                         	PUSH	AX			; Save status
 2933/1403 : 86 E0                      	XCHG	AH,AL
 2934/1405 : E8 D6 FD                   	CALL	CHKTYP			; Check that types match
 2935/1408 : BB 6D 14                   	MOV	BX,CMPRES		; Result to comparison
 2936/140B : 53                         	PUSH	BX			; Save for RETurn
 2937/140C : 75 03                      	JNZ	CMPLG2
 2938/140E : E9 92 0C                   	JMP	CMPNUM			; Compare values if numeric
 2939/1411 :                            CMPLG2:
 2940/1411 : 32 C0                      	XOR	AL,AL			; Compare two strings
 2941/1413 : A2 F9 32                   	MOV	[TYPE],AL		; Set type to numeric
 2942/1416 : 52                         	PUSH	DX			; Save string name
 2943/1417 : E8 A2 06                   	CALL	GSTRCU			; Get current string
 2944/141A : 8A 07                      	MOV	AL,[BX]			; Get length of string
 2945/141C : 9F                         	LAHF
 2946/141D : 43                         	INC	BX
 2947/141E : 9E                         	SAHF
 2948/141F : 9F                         	LAHF
 2949/1420 : 43                         	INC	BX
 2950/1421 : 9E                         	SAHF
 2951/1422 : 8A 0F                      	MOV	CL,[BX]			; Get LSB of address
 2952/1424 : 9F                         	LAHF
 2953/1425 : 43                         	INC	BX
 2954/1426 : 9E                         	SAHF
 2955/1427 : 8A 2F                      	MOV	CH,[BX]			; Get MSB of address
 2956/1429 : 5A                         	POP	DX			; Restore string name
 2957/142A : 51                         	PUSH	CX			; Save address of string
 2958/142B : 9F                         	LAHF
 2959/142C : 86 E0                      	XCHG	AH,AL
 2960/142E : 50                         	PUSH	AX			; Save length of string
 2961/142F : 86 E0                      	XCHG	AH,AL
 2962/1431 : E8 8E 06                   	CALL	GSTRDE			; Get second string
 2963/1434 : E8 24 0C                   	CALL	LOADFP			; Get address of second string
 2964/1437 : 58                         	POP	AX			; Restore length of string 1
 2965/1438 : 86 E0                      	XCHG	AH,AL
 2966/143A : 9E                         	SAHF
 2967/143B : 8A F0                      	MOV	DH,AL			; Length to D
 2968/143D : 5B                         	POP	BX			; Restore address of string 1
 2969/143E :                            CMPSTR:
 2970/143E : 8A C2                      	MOV	AL,DL			; Bytes of string 2 to do
 2971/1440 : 0A C6                      	OR	AL,DH			; Bytes of string 1 to do
 2972/1442 : 75 01                      	JNZ	CMPSTR1
 2973/1444 : C3                         	RET				; Exit if all bytes compared
 2974/1445 :                            CMPSTR1:
 2975/1445 : 8A C6                      	MOV	AL,DH			; Get bytes of string 1 to do
 2976/1447 : 2C 01                      	SUB	AL,1
 2977/1449 : 73 01                      	JNC	CMPSTR2
 2978/144B : C3                         	RET				; Exit if end of string 1
 2979/144C :                            CMPSTR2:
 2980/144C : 32 C0                      	XOR	AL,AL
 2981/144E : 3A C2                      	CMP	AL,DL			; Bytes of string 2 to do
 2982/1450 : FE C0                      	INC	AL
 2983/1452 : 72 01                      	JC	CMPSTR3
 2984/1454 : C3                         	RET				; Exit if end of string 2
 2985/1455 :                            CMPSTR3:
 2986/1455 : FE CE                      	DEC	DH			; Count bytes in string 1
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 51 - 8/7/2025 21:50:51


 2987/1457 : FE CA                      	DEC	DL			; Count bytes in string 2
 2988/1459 : 87 D9                      	XCHG	BX,CX
 2989/145B : 8A 07                      	MOV	AL,[BX]			; Byte in string 2
 2990/145D : 87 D9                      	XCHG	BX,CX
 2991/145F : 3A 07                      	CMP	AL,[BX]			; Compare to byte in string 1
 2992/1461 : 9F                         	LAHF
 2993/1462 : 43                         	INC	BX			; Move up string 1
 2994/1463 : 9E                         	SAHF
 2995/1464 : 9F                         	LAHF
 2996/1465 : 41                         	INC	CX			; Move up string 2
 2997/1466 : 9E                         	SAHF
 2998/1467 : 74 D5                      	JZ	CMPSTR			; Same - Try next bytes
 2999/1469 : F5                         	CMC				; Flag difference (">" or "<")
 3000/146A : E9 8E 0B                   	JMP	FLGDIF			; "<" gives -1 , ">" given +1
 3001/146D :                            ;
 3002/146D :                            CMPRES:
 3003/146D : FE C0                      	INC	AL			; Increment current value
 3004/146F : 12 C0                      	ADC	AL,AL			; Double plus carry
 3005/1471 : 59                         	POP	CX			; Get other value
 3006/1472 : 22 C5                      	AND	AL,CH			; Combine them
 3007/1474 : 04 FF                      	ADD	AL,-1			; Carry set if different
 3008/1476 : 1A C0                      	SBB	AL,AL			; 00 - Equal , FF - Different
 3009/1478 : E9 8B 0B                   	JMP	FLGREL			; Set current value & continue
 3010/147B :                            ;
 3011/147B :                            EVNOT:
 3012/147B : B6 5A                      	MOV	DH,5AH			; Precedence value for "NOT"
 3013/147D : E8 74 FD                   	CALL	EVAL1			; Eval until precedence break
 3014/1480 : E8 56 FD                   	CALL	TSTNUM			; Make sure it's a number
 3015/1483 : E8 6A F8                   	CALL	DEINT			; Get integer -32768 - 32767
 3016/1486 : 8A C2                      	MOV	AL,DL			; Get LSB
 3017/1488 : F6 D0                      	NOT	AL			; Invert LSB
 3018/148A : 8A C8                      	MOV	CL,AL			; Save "NOT" of LSB
 3019/148C : 8A C6                      	MOV	AL,DH			; Get MSB
 3020/148E : F6 D0                      	NOT	AL			; Invert MSB
 3021/1490 : E8 B8 02                   	CALL	ACPASS			; Save AC as current
 3022/1493 : 59                         	POP	CX			; Clean up stack
 3023/1494 : E9 6A FD                   	JMP	EVAL3			; Continue evaluation
 3024/1497 :                            ;
 3025/1497 :                            DIMRET:
 3026/1497 :                            ;	LAHF
 3027/1497 : 4B                         	DEC	BX			; DEC 'cos GETCHR INCs
 3028/1498 :                            ;	SAHF
 3029/1498 : E8 58 F7                   	CALL	GETCHR			; Get next character
 3030/149B : 75 01                      	JNZ	DIMRET1
 3031/149D : C3                         	RET				; End of DIM statement
 3032/149E :                            DIMRET1:
 3033/149E : E8 2B F5                   	CALL	CHKSYN			; Make sure ',' follows
 3034/14A1 : 2C                         	DB	','
 3035/14A2 :                            DIM:
 3036/14A2 : B9 97 14                   	MOV	CX,DIMRET		; Return to "DIMRET"
 3037/14A5 : 51                         	PUSH	CX			; Save on stack
 3038/14A6 : 0C AF                      	OR	AL,0AFH			; Flag "Create" variable
 3039/14A8 : EB 02                      	JMP	GETVAR1
 3040/14AA :                            GETVAR:
 3041/14AA : 32 C0                      	XOR	AL,AL			; Find variable address to DE
 3042/14AC :                            GETVAR1:
 3043/14AC : A2 F8 32                   	MOV	[LCRFLG],AL		; Set locate / create flag
 3044/14AF : 8A 2F                      	MOV	CH,[BX]			; Get First byte of name
 3045/14B1 :                            GTFNAM:
 3046/14B1 : E8 26 F8                   	CALL	CHKLTR			; See if a letter
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 52 - 8/7/2025 21:50:51


 3047/14B4 : 73 03                      	JNC	GTFNAM1
 3048/14B6 : E9 4E F1                   	JMP	SNERR			; ?SN Error if not a letter
 3049/14B9 :                            GTFNAM1:
 3050/14B9 : 32 C0                      	XOR	AL,AL
 3051/14BB : 8A C8                      	MOV	CL,AL			; Clear second byte of name
 3052/14BD : A2 F9 32                   	MOV	[TYPE],AL		; Set type to numeric
 3053/14C0 : E8 30 F7                   	CALL	GETCHR			; Get next character
 3054/14C3 : 72 05                      	JC	SVNAM2			; Numeric - Save in name
 3055/14C5 : E8 12 F8                   	CALL	CHKLTR			; See if a letter
 3056/14C8 : 72 0C                      	JC	CHARTY			; Not a letter - Check type
 3057/14CA :                            SVNAM2:
 3058/14CA : 8A C8                      	MOV	CL,AL			; Save second byte of name
 3059/14CC :                            ENDNAM:
 3060/14CC : E8 24 F7                   	CALL	GETCHR			; Get next character
 3061/14CF : 72 FB                      	JC	ENDNAM			; Numeric - Get another
 3062/14D1 : E8 06 F8                   	CALL	CHKLTR			; See if a letter
 3063/14D4 : 73 F6                      	JNC	ENDNAM			; Letter - Get another
 3064/14D6 :                            CHARTY:
 3065/14D6 : 2C 24                      	SUB	AL,'$'			; String variable?
 3066/14D8 : 75 0E                      	JNZ	NOTSTR			; No - Numeric variable
 3067/14DA : FE C0                      	INC	AL			; A = 1 (string type)
 3068/14DC : A2 F9 32                   	MOV	[TYPE],AL		; Set type to string
 3069/14DF : D0 C8                      	ROR	AL,1			; A = 80H , Flag for string
 3070/14E1 : 02 C1                      	ADD	AL,CL			; 2nd byte of name has bit 7 on
 3071/14E3 : 8A C8                      	MOV	CL,AL			; Resave second byte on name
 3072/14E5 : E8 0B F7                   	CALL	GETCHR			; Get next character
 3073/14E8 :                            NOTSTR:
 3074/14E8 : A0 17 33                   	MOV	AL,[FORFLG]		; Array name needed ?
 3075/14EB : FE C8                      	DEC	AL
 3076/14ED : 75 03                      	JNZ	NOTSTR1			; Yes - Get array name
 3077/14EF : E9 E6 00                   	JMP	ARLDSV
 3078/14F2 :                            NOTSTR1:
 3079/14F2 : 79 09                      	JNS	NSCFOR			; No array with "FOR" or "FN"
 3080/14F4 : 8A 07                      	MOV	AL,[BX]			; Get byte again
 3081/14F6 : 2C 28                      	SUB	AL,'('			; Subscripted variable?
 3082/14F8 : 75 03                      	JNZ	NSCFOR			; Yes - Sort out subscript
 3083/14FA : E9 9F 00                   	JMP	SBSCPT
 3084/14FD :                            ;
 3085/14FD :                            NSCFOR:
 3086/14FD : 32 C0                      	XOR	AL,AL			; Simple variable
 3087/14FF : A2 17 33                   	MOV	[FORFLG],AL		; Clear "FOR" flag
 3088/1502 : 53                         	PUSH	BX			; Save code string address
 3089/1503 : 8A F5                      	MOV	DH,CH			; DE = Variable name to find
 3090/1505 : 8A D1                      	MOV	DL,CL
 3091/1507 : 8B 1E 2A 33                	MOV	BX,[FNRGNM]		; FN argument name
 3092/150B : E8 B2 F4                   	CALL	CPDEHL			; Is it the FN argument?
 3093/150E : BA 2C 33                   	MOV	DX,FNARG		; Point to argument value
 3094/1511 : 75 03                      	JNZ	NSCFOR1
 3095/1513 : E9 CC 09                   	JMP	POPHRT			; Yes - Return FN argument value
 3096/1516 :                            NSCFOR1:
 3097/1516 : 8B 1E 24 33                	MOV	BX,[VAREND]		; End of variables
 3098/151A : 87 DA                      	XCHG	BX,DX			; Address of end of search
 3099/151C : 8B 1E 22 33                	MOV	BX,[PROGND]		; Start of variables address
 3100/1520 :                            FNDVAR:
 3101/1520 : E8 9D F4                   	CALL	CPDEHL			; End of variable list table?
 3102/1523 : 74 20                      	JZ	CFEVAL			; Yes - Called from EVAL?
 3103/1525 : 8A C1                      	MOV	AL,CL			; Get second byte of name
 3104/1527 : 2A 07                      	SUB	AL,[BX]			; Compare with name in list
 3105/1529 : 9F                         	LAHF
 3106/152A : 43                         	INC	BX			; Move on to first byte
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 53 - 8/7/2025 21:50:51


 3107/152B : 9E                         	SAHF
 3108/152C : 75 04                      	JNZ	FNTHR			; Different - Find another
 3109/152E : 8A C5                      	MOV	AL,CH			; Get first byte of name
 3110/1530 : 2A 07                      	SUB	AL,[BX]			; Compare with name in list
 3111/1532 :                            FNTHR:
 3112/1532 : 9F                         	LAHF
 3113/1533 : 43                         	INC	BX			; Move on to LSB of value
 3114/1534 : 9E                         	SAHF
 3115/1535 : 74 55                      	JZ	RETADR			; Found - Return address
 3116/1537 : 9F                         	LAHF
 3117/1538 : 43                         	INC	BX			; <- Skip
 3118/1539 : 9E                         	SAHF
 3119/153A : 9F                         	LAHF
 3120/153B : 43                         	INC	BX			; <- over
 3121/153C : 9E                         	SAHF
 3122/153D : 9F                         	LAHF
 3123/153E : 43                         	INC	BX			; <- F.P.
 3124/153F : 9E                         	SAHF
 3125/1540 : 9F                         	LAHF
 3126/1541 : 43                         	INC	BX			; <- value
 3127/1542 : 9E                         	SAHF
 3128/1543 : EB DB                      	JMP	FNDVAR			; Keep looking
 3129/1545 :                            ;
 3130/1545 :                            CFEVAL:
 3131/1545 : 5B                         	POP	BX			; Restore code string address
 3132/1546 : 8B EC                      	MOV	BP,SP
 3133/1548 : 87 5E 00                   	XCHG	[BP],BX			; Get return address
 3134/154B : 52                         	PUSH	DX			; Save address of variable
 3135/154C : BA 12 13                   	MOV	DX,FRMEVL		; Return address in EVAL
 3136/154F : E8 6E F4                   	CALL	CPDEHL			; Called from EVAL ?
 3137/1552 : 5A                         	POP	DX			; Restore address of variable
 3138/1553 : 74 3B                      	JZ	RETNUL			; Yes - Return null variable
 3139/1555 : 8B EC                      	MOV	BP,SP
 3140/1557 : 87 5E 00                   	XCHG	[BP],BX			; Put back return
 3141/155A : 53                         	PUSH	BX			; Save code string address
 3142/155B : 51                         	PUSH	CX			; Save variable name
 3143/155C : B9 06 00                   	MOV	CX,6			; 2 byte name plus 4 by data
 3144/155F : 8B 1E 26 33                	MOV	BX,[ARREND]		; End of arrays
 3145/1563 : 53                         	PUSH	BX			; Save end of arrays
 3146/1564 : 03 D9                      	ADD	BX,CX			; Move up 6 bytes
 3147/1566 : 59                         	POP	CX			; Source address in BC
 3148/1567 : 53                         	PUSH	BX			; Save new end address
 3149/1568 : E8 51 F0                   	CALL	MOVUP			; Move arrays up
 3150/156B : 5B                         	POP	BX			; Restore new end address
 3151/156C : 89 1E 26 33                	MOV	[ARREND],BX		; Set new end address
 3152/1570 : 8B D9                      	MOV	BX,CX			; End of variables to HL
 3153/1572 : 89 1E 24 33                	MOV	[VAREND],BX		; Set new end address
 3154/1576 :                            ;
 3155/1576 :                            ZEROLP:
 3156/1576 : 9F                         	LAHF
 3157/1577 : 4B                         	DEC	BX			; Back through to zero variable
 3158/1578 : 9E                         	SAHF
 3159/1579 : C6 07 00                   	MOV	BYTE PTR [BX],0		; Zero byte in variable
 3160/157C : E8 41 F4                   	CALL	CPDEHL			; Done them all?
 3161/157F : 75 F5                      	JNZ	ZEROLP			; No - Keep on going
 3162/1581 : 5A                         	POP	DX			; Get variable name
 3163/1582 : 88 17                      	MOV	[BX],DL			; Store second character
 3164/1584 : 9F                         	LAHF
 3165/1585 : 43                         	INC	BX
 3166/1586 : 9E                         	SAHF
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 54 - 8/7/2025 21:50:51


 3167/1587 : 88 37                      	MOV	[BX],DH			; Store first character
 3168/1589 : 9F                         	LAHF
 3169/158A : 43                         	INC	BX
 3170/158B : 9E                         	SAHF
 3171/158C :                            RETADR:
 3172/158C : 87 DA                      	XCHG	BX,DX			; Address of variable in DE
 3173/158E : 5B                         	POP	BX			; Restore code string address
 3174/158F : C3                         	RET
 3175/1590 :                            ;
 3176/1590 :                            RETNUL:
 3177/1590 : A2 33 33                   	MOV	[FPEXP],AL		; Set result to zero
 3178/1593 : BB 81 05                   	MOV	BX,ZERBYT		; Also set a null string
 3179/1596 : 89 1E 30 33                	MOV	[FPREG],BX		; Save for EVAL
 3180/159A : 5B                         	POP	BX			; Restore code string address
 3181/159B : C3                         	RET
 3182/159C :                            ;
 3183/159C :                            SBSCPT:
 3184/159C : 53                         	PUSH	BX			; Save code string address
 3185/159D : 8B 1E F8 32                	MOV	BX,[LCRFLG]		; Locate/Create and Type
 3186/15A1 : 8B EC                      	MOV	BP,SP
 3187/15A3 : 87 5E 00                   	XCHG	[BP],BX			; Save and get code string
 3188/15A6 : 8A F0                      	MOV	DH,AL			; Zero number of dimensions
 3189/15A8 :                            SCPTLP:
 3190/15A8 : 52                         	PUSH	DX			; Save number of dimensions
 3191/15A9 : 51                         	PUSH	CX			; Save array name
 3192/15AA : E8 38 F7                   	CALL	FPSINT			; Get subscript (0-32767)
 3193/15AD : 59                         	POP	CX			; Restore array name
 3194/15AE : 58                         	POP	AX			; Get number of dimensions
 3195/15AF : 86 E0                      	XCHG	AH,AL
 3196/15B1 : 9E                         	SAHF
 3197/15B2 : 87 DA                      	XCHG	BX,DX
 3198/15B4 : 8B EC                      	MOV	BP,SP
 3199/15B6 : 87 5E 00                   	XCHG	[BP],BX			; Save subscript value
 3200/15B9 : 53                         	PUSH	BX			; Save LCRFLG and TYPE
 3201/15BA : 87 DA                      	XCHG	BX,DX
 3202/15BC : FE C0                      	INC	AL			; Count dimensions
 3203/15BE : 8A F0                      	MOV	DH,AL			; Save in D
 3204/15C0 : 8A 07                      	MOV	AL,[BX]			; Get next byte in code string
 3205/15C2 : 3C 2C                      	CMP	AL,','			; Comma (more to come)?
 3206/15C4 : 74 E2                      	JZ	SCPTLP			; Yes - More subscripts
 3207/15C6 : E8 03 F4                   	CALL	CHKSYN			; Make sure ")" follows
 3208/15C9 : 29                         	DB	")"
 3209/15CA : 89 1E 1C 33                	MOV	[NXTOPR],BX		; Save code string address
 3210/15CE : 5B                         	POP	BX			; Get LCRFLG and TYPE
 3211/15CF : 89 1E F8 32                	MOV	[LCRFLG],BX		; Restore Locate/create & type
 3212/15D3 : B2 00                      	MOV	DL,0			; Flag not CSAVE* or CLOAD*
 3213/15D5 : 52                         	PUSH	DX			; Save number of dimensions (D)
 3214/15D6 : EB 07                      	JMP	ARLDSV1			; Skip "PUSH HL" and "PUSH AF"
 3215/15D8 :                            ;
 3216/15D8 :                            ARLDSV:
 3217/15D8 : 53                         	PUSH	BX			; Save code string address
 3218/15D9 : 9F                         	LAHF
 3219/15DA : 86 E0                      	XCHG	AH,AL
 3220/15DC : 50                         	PUSH	AX			; A = 00 , Flags set = Z,N
 3221/15DD : 86 E0                      	XCHG	AH,AL
 3222/15DF :                            ARLDSV1:
 3223/15DF : 8B 1E 24 33                	MOV	BX,[VAREND]		; Start of arrays
 3224/15E3 : EB 02                      	JMP	FNDARY1			; Skip "ADD HL,DE"
 3225/15E5 :                            FNDARY:
 3226/15E5 : 03 DA                      	ADD	BX,DX			; Move to next array start
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 55 - 8/7/2025 21:50:51


 3227/15E7 :                            FNDARY1:
 3228/15E7 : 87 DA                      	XCHG	BX,DX
 3229/15E9 : 8B 1E 26 33                	MOV	BX,[ARREND]		; End of arrays
 3230/15ED : 87 DA                      	XCHG	BX,DX			; Current array pointer
 3231/15EF : E8 CE F3                   	CALL	CPDEHL			; End of arrays found?
 3232/15F2 : 74 3D                      	JZ	CREARY			; Yes - Create array
 3233/15F4 : 8A 07                      	MOV	AL,[BX]			; Get second byte of name
 3234/15F6 : 3A C1                      	CMP	AL,CL			; Compare with name given
 3235/15F8 : 9F                         	LAHF
 3236/15F9 : 43                         	INC	BX			; Move on
 3237/15FA : 9E                         	SAHF
 3238/15FB : 75 04                      	JNZ	NXTARY			; Different - Find next array
 3239/15FD : 8A 07                      	MOV	AL,[BX]			; Get first byte of name
 3240/15FF : 3A C5                      	CMP	AL,CH			; Compare with name given
 3241/1601 :                            NXTARY:
 3242/1601 : 9F                         	LAHF
 3243/1602 : 43                         	INC	BX			; Move on
 3244/1603 : 9E                         	SAHF
 3245/1604 : 8A 17                      	MOV	DL,[BX]			; Get LSB of next array address
 3246/1606 : 9F                         	LAHF
 3247/1607 : 43                         	INC	BX
 3248/1608 : 9E                         	SAHF
 3249/1609 : 8A 37                      	MOV	DH,[BX]			; Get MSB of next array address
 3250/160B : 9F                         	LAHF
 3251/160C : 43                         	INC	BX
 3252/160D : 9E                         	SAHF
 3253/160E : 75 D5                      	JNZ	FNDARY			; Not found - Keep looking
 3254/1610 : A0 F8 32                   	MOV	AL,[LCRFLG]		; Found Locate or Creat it?
 3255/1613 : 0A C0                      	OR	AL,AL
 3256/1615 : 74 03                      	JZ	NXTARY1			; Create - ?DD Error
 3257/1617 : E9 F9 EF                   	JMP	DDERR
 3258/161A :                            NXTARY1:
 3259/161A : 58                         	POP	AX			; Locate - Get number of dimensions
 3260/161B : 86 E0                      	XCHG	AH,AL
 3261/161D : 9E                         	SAHF
 3262/161E : 8B CB                      	MOV	CX,BX			; BC Points to array dimensions
 3263/1620 : 75 03                      	JNZ	NXTARY2			; Jump if array load/save
 3264/1622 : E9 BD 08                   	JMP	POPHRT
 3265/1625 :                            NXTARY2:
 3266/1625 : 2A 07                      	SUB	AL,[BX]			; Same number of dimensions?
 3267/1627 : 75 03                      	JNZ	BSERR			; Yes - Find element
 3268/1629 : E9 AA 00                   	JMP	FINDEL
 3269/162C :                            BSERR:
 3270/162C : B2 10                      	MOV	DL,BS			; ?BS Error
 3271/162E : E9 F0 EF                   	JMP	ERROR			; Output error
 3272/1631 :                            ;
 3273/1631 :                            CREARY:
 3274/1631 : BA 04 00                   	MOV	DX,4			; 4 Bytes per entry
 3275/1634 : 58                         	POP	AX			; Array to save or 0 dimensions?
 3276/1635 : 86 E0                      	XCHG	AH,AL
 3277/1637 : 9E                         	SAHF
 3278/1638 : 75 03                      	JNZ	CREARY1
 3279/163A : E9 CD F6                   	JMP	FCERR			; Yes - ?FC Error
 3280/163D :                            CREARY1:
 3281/163D : 88 0F                      	MOV	[BX],CL			; Save second byte of n
 3282/163F : 9F                         	LAHF
 3283/1640 : 43                         	INC	BX
 3284/1641 : 9E                         	SAHF
 3285/1642 : 88 2F                      	MOV	[BX],CH			; Save first byte of name
 3286/1644 : 9F                         	LAHF
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 56 - 8/7/2025 21:50:51


 3287/1645 : 43                         	INC	BX
 3288/1646 : 9E                         	SAHF
 3289/1647 : 8A C8                      	MOV	CL,AL			; Number of dimensions to C
 3290/1649 : E8 8C EF                   	CALL	CHKSTK			; Check if enough memory
 3291/164C : 9F                         	LAHF
 3292/164D : 43                         	INC	BX			; Point to number of dimensions
 3293/164E : 9E                         	SAHF
 3294/164F : 9F                         	LAHF
 3295/1650 : 43                         	INC	BX
 3296/1651 : 9E                         	SAHF
 3297/1652 : 89 1E 11 33                	MOV	[CUROPR],BX		; Save address of pointer
 3298/1656 : 88 0F                      	MOV	[BX],CL			; Set number of dimensions
 3299/1658 : 9F                         	LAHF
 3300/1659 : 43                         	INC	BX
 3301/165A : 9E                         	SAHF
 3302/165B : A0 F8 32                   	MOV	AL,[LCRFLG]		; Locate of Create?
 3303/165E : D0 D0                      	RCL	AL,1			; Carry set = Create
 3304/1660 : 8A C1                      	MOV	AL,CL			; Get number of dimensions
 3305/1662 :                            CRARLP:
 3306/1662 : B9 0B 00                   	MOV	CX,10+1			; Default dimension size 10
 3307/1665 : 73 04                      	JNC	DEFSIZ			; Locate - Set default size
 3308/1667 : 59                         	POP	CX			; Get specified dimension size
 3309/1668 : 9F                         	LAHF
 3310/1669 : 41                         	INC	CX			; Include zero element
 3311/166A : 9E                         	SAHF
 3312/166B :                            DEFSIZ:
 3313/166B : 88 0F                      	MOV	[BX],CL			; Save LSB of dimension size
 3314/166D : 9F                         	LAHF
 3315/166E : 43                         	INC	BX
 3316/166F : 9E                         	SAHF
 3317/1670 : 88 2F                      	MOV	[BX],CH			; Save MSB of dimension size
 3318/1672 : 9F                         	LAHF
 3319/1673 : 43                         	INC	BX
 3320/1674 : 9E                         	SAHF
 3321/1675 : 9F                         	LAHF
 3322/1676 : 86 E0                      	XCHG	AH,AL
 3323/1678 : 50                         	PUSH	AX			; Save num' of dimensions an status
 3324/1679 : 86 E0                      	XCHG	AH,AL
 3325/167B : 53                         	PUSH	BX			; Save address of dimensions size
 3326/167C : E8 E3 0A                   	CALL	MLDEBC			; Multiply DE by BC to find
 3327/167F : 87 DA                      	XCHG	BX,DX			; amount of mem needed (to DE)
 3328/1681 : 5B                         	POP	BX			; Restore address of dimension
 3329/1682 : 58                         	POP	AX			; Restore number of dimensions
 3330/1683 : 86 E0                      	XCHG	AH,AL
 3331/1685 : 9E                         	SAHF
 3332/1686 : FE C8                      	DEC	AL			; Count them
 3333/1688 : 75 D8                      	JNZ	CRARLP			; Do next dimension if more
 3334/168A : 9F                         	LAHF
 3335/168B : 86 E0                      	XCHG	AH,AL
 3336/168D : 50                         	PUSH	AX			; Save locate/create flag
 3337/168E : 86 E0                      	XCHG	AH,AL
 3338/1690 : 8B CA                      	MOV	CX,DX			; memory needed
 3339/1692 : 87 DA                      	XCHG	BX,DX
 3340/1694 : 03 DA                      	ADD	BX,DX			; Add bytes to array start
 3341/1696 : 73 03                      	JNC	DEFSIZ1
 3342/1698 : E9 5F EF                   	JMP	OMERR			; Too big - Error
 3343/169B :                            DEFSIZ1:
 3344/169B : E8 47 EF                   	CALL	ENFMEM			; See if enough memory
 3345/169E : 89 1E 26 33                	MOV	[ARREND],BX		; Save new end of array
 3346/16A2 :                            ;
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 57 - 8/7/2025 21:50:51


 3347/16A2 :                            ZERARY:
 3348/16A2 : 9F                         	LAHF
 3349/16A3 : 4B                         	DEC	BX			; Back through array data
 3350/16A4 : 9E                         	SAHF
 3351/16A5 : C6 07 00                   	MOV	BYTE PTR [BX],0		; Set array element to zero
 3352/16A8 : E8 15 F3                   	CALL	CPDEHL			; All elements zeroed?
 3353/16AB : 75 F5                      	JNZ	ZERARY			; No - Keep on going
 3354/16AD : 9F                         	LAHF
 3355/16AE : 41                         	INC	CX			; Number of bytes + 1
 3356/16AF : 9E                         	SAHF
 3357/16B0 : 8A F0                      	MOV	DH,AL			; A=0
 3358/16B2 : 8B 1E 11 33                	MOV	BX,[CUROPR]		; Get address of array
 3359/16B6 : 8A 17                      	MOV	DL,[BX]			; Number of dimensions
 3360/16B8 : 87 DA                      	XCHG	BX,DX			; To HL
 3361/16BA : 03 DB                      	ADD	BX,BX			; Two bytes per dimension size
 3362/16BC : 03 D9                      	ADD	BX,CX			; Add number of bytes
 3363/16BE : 87 DA                      	XCHG	BX,DX			; Bytes needed to DE
 3364/16C0 : 9F                         	LAHF
 3365/16C1 : 4B                         	DEC	BX
 3366/16C2 : 9E                         	SAHF
 3367/16C3 : 9F                         	LAHF
 3368/16C4 : 4B                         	DEC	BX
 3369/16C5 : 9E                         	SAHF
 3370/16C6 : 88 17                      	MOV	[BX],DL			; Save LSB of bytes needed
 3371/16C8 : 9F                         	LAHF
 3372/16C9 : 43                         	INC	BX
 3373/16CA : 9E                         	SAHF
 3374/16CB : 88 37                      	MOV	[BX],DH			; Save MSB of bytes needed
 3375/16CD : 9F                         	LAHF
 3376/16CE : 43                         	INC	BX
 3377/16CF : 9E                         	SAHF
 3378/16D0 : 58                         	POP	AX			; Locate / Create?
 3379/16D1 : 86 E0                      	XCHG	AH,AL
 3380/16D3 : 9E                         	SAHF
 3381/16D4 : 72 43                      	JC	ENDDIM			; A is 0 , End if create
 3382/16D6 :                            FINDEL:
 3383/16D6 : 8A E8                      	MOV	CH,AL			; Find array element
 3384/16D8 : 8A C8                      	MOV	CL,AL
 3385/16DA : 8A 07                      	MOV	AL,[BX]			; Number of dimensions
 3386/16DC : 9F                         	LAHF
 3387/16DD : 43                         	INC	BX
 3388/16DE : 9E                         	SAHF
 3389/16DF : EB 01                      	JMP	FNDELP1			; Skip "POP BX"
 3390/16E1 :                            FNDELP:
 3391/16E1 : 5B                         	POP	BX			; Address of next dim' size
 3392/16E2 :                            FNDELP1:
 3393/16E2 : 8A 17                      	MOV	DL,[BX]			; Get LSB of dim'n size
 3394/16E4 : 9F                         	LAHF
 3395/16E5 : 43                         	INC	BX
 3396/16E6 : 9E                         	SAHF
 3397/16E7 : 8A 37                      	MOV	DH,[BX]			; Get MSB of dim'n size
 3398/16E9 : 9F                         	LAHF
 3399/16EA : 43                         	INC	BX
 3400/16EB : 9E                         	SAHF
 3401/16EC : 8B EC                      	MOV	BP,SP
 3402/16EE : 87 5E 00                   	XCHG	[BP],BX			; Save address - Get index
 3403/16F1 : 9F                         	LAHF
 3404/16F2 : 86 E0                      	XCHG	AH,AL
 3405/16F4 : 50                         	PUSH	AX			; Save number of dimensions
 3406/16F5 : 86 E0                      	XCHG	AH,AL
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 58 - 8/7/2025 21:50:51


 3407/16F7 : E8 C6 F2                   	CALL	CPDEHL			; Dimension too large?
 3408/16FA : 72 03                      	JC	FNDELP2
 3409/16FC : E9 2D FF                   	JMP	BSERR			; Yes - ?BS Error
 3410/16FF :                            FNDELP2:
 3411/16FF : 53                         	PUSH	BX			; Save index
 3412/1700 : E8 5F 0A                   	CALL	MLDEBC			; Multiply previous by size
 3413/1703 : 5A                         	POP	DX			; Index supplied to DE
 3414/1704 : 03 DA                      	ADD	BX,DX			; Add index to pointer
 3415/1706 : 58                         	POP	AX			; Number of dimensions
 3416/1707 : 86 E0                      	XCHG	AH,AL
 3417/1709 : 9E                         	SAHF
 3418/170A : FE C8                      	DEC	AL			; Count them
 3419/170C : 8B CB                      	MOV	CX,BX			; pointer
 3420/170E : 75 D1                      	JNZ	FNDELP			; More - Keep going
 3421/1710 : 03 DB                      	ADD	BX,BX			; 4 Bytes per element
 3422/1712 : 03 DB                      	ADD	BX,BX
 3423/1714 : 59                         	POP	CX			; Start of array
 3424/1715 : 03 D9                      	ADD	BX,CX			; Point to element
 3425/1717 : 87 DA                      	XCHG	BX,DX			; Address of element to DE
 3426/1719 :                            ENDDIM:
 3427/1719 : 8B 1E 1C 33                	MOV	BX,[NXTOPR]		; Got code string address
 3428/171D : C3                         	RET
 3429/171E :                            ;
 3430/171E :                            FRE:
 3431/171E : 8B 1E 26 33                	MOV	BX,[ARREND]		; Start of free memory
 3432/1722 : 87 DA                      	XCHG	BX,DX			; To DE
 3433/1724 : BB 00 00                   	MOV	BX,0			; End of free memory
 3434/1727 : 03 DC                      	ADD	BX,SP			; Current stack value
 3435/1729 : A0 F9 32                   	MOV	AL,[TYPE]		; Dummy argument type
 3436/172C : 0A C0                      	OR	AL,AL
 3437/172E : 74 11                      	JZ	FRENUM			; Numeric - Free variable space
 3438/1730 : E8 89 03                   	CALL	GSTRCU			; Current string to pool
 3439/1733 : E8 0E 02                   	CALL	GARBGE			; Garbage collection
 3440/1736 : 2E 8B 1E 70 05             	MOV	BX,[STRSPC]		; Bottom of string space in use
 3441/173B : 87 DA                      	XCHG	BX,DX			; To DE
 3442/173D : 8B 1E 0F 33                	MOV	BX,[STRBOT]		; Bottom of string space
 3443/1741 :                            FRENUM:
 3444/1741 : 8A C3                      	MOV	AL,BL			; Get LSB of end
 3445/1743 : 2A C2                      	SUB	AL,DL			; Subtract LSB of beginning
 3446/1745 : 8A C8                      	MOV	CL,AL			; Save difference if C
 3447/1747 : 8A C7                      	MOV	AL,BH			; Get MSB of end
 3448/1749 : 1A C6                      	SBB	AL,DH			; Subtract MSB of beginning
 3449/174B :                            ACPASS:
 3450/174B : 8A E9                      	MOV	CH,CL			; Return integer AC
 3451/174D :                            ABPASS:
 3452/174D : 8A F5                      	MOV	DH,CH			; Return integer AB
 3453/174F : B2 00                      	MOV	DL,0
 3454/1751 : BB F9 32                   	MOV	BX,TYPE			; Point to type
 3455/1754 : 88 17                      	MOV	[BX],DL			; Set type to numeric
 3456/1756 : B5 90                      	MOV	CH,80H+16		; 16 bit integer
 3457/1758 : E9 B0 08                   	JMP	RETINT			; Return the integr
 3458/175B :                            ;
 3459/175B :                            POS:
 3460/175B : A0 F7 32                   	MOV	AL,[CURPOS]		; Get cursor position
 3461/175E :                            PASSA:
 3462/175E : 8A E8                      	MOV	CH,AL			; Put A into AB
 3463/1760 : 32 C0                      	XOR	AL,AL			; Zero A
 3464/1762 : EB E9                      	JMP	ABPASS			; Return integer AB
 3465/1764 :                            ;
 3466/1764 :                            DEF:
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 59 - 8/7/2025 21:50:51


 3467/1764 : E8 B7 00                   	CALL	CHEKFN			; Get "FN" and name
 3468/1767 : E8 9E 00                   	CALL	IDTEST			; Test for illegal direct
 3469/176A : B9 31 0E                   	MOV	CX,DATA			; To get next statement
 3470/176D : 51                         	PUSH	CX			; Save address for RETurn
 3471/176E : 52                         	PUSH	DX			; Save address of function ptr
 3472/176F : E8 5A F2                   	CALL	CHKSYN			; Make sure "(" follows
 3473/1772 : 28                         	DB	"("
 3474/1773 : E8 34 FD                   	CALL	GETVAR			; Get argument variable name
 3475/1776 : 53                         	PUSH	BX			; Save code string address
 3476/1777 : 87 DA                      	XCHG	BX,DX			; Argument address to HL
 3477/1779 : 9F                         	LAHF
 3478/177A : 4B                         	DEC	BX
 3479/177B : 9E                         	SAHF
 3480/177C : 8A 37                      	MOV	DH,[BX]			; Get first byte of arg name
 3481/177E : 9F                         	LAHF
 3482/177F : 4B                         	DEC	BX
 3483/1780 : 9E                         	SAHF
 3484/1781 : 8A 17                      	MOV	DL,[BX]			; Get second byte of ar
 3485/1783 : 5B                         	POP	BX			; Restore code string address
 3486/1784 : E8 52 FA                   	CALL	TSTNUM			; Make sure numeric argument
 3487/1787 : E8 42 F2                   	CALL	CHKSYN			; Make sure ")" follows
 3488/178A : 29                         	DB	")"
 3489/178B : E8 3E F2                   	CALL	CHKSYN			; Make sure "=" follows
 3490/178E : B4                         	DB	ZEQUAL			; "=" token
 3491/178F : 8B CB                      	MOV	CX,BX			; Code string address to BC
 3492/1791 : 8B EC                      	MOV	BP,SP
 3493/1793 : 87 5E 00                   	XCHG	[BP],BX			; Save code str , Get FN ptr
 3494/1796 : 88 0F                      	MOV	[BX],CL			; Save LSB of FN code string
 3495/1798 : 9F                         	LAHF
 3496/1799 : 43                         	INC	BX
 3497/179A : 9E                         	SAHF
 3498/179B : 88 2F                      	MOV	[BX],CH			; Save MSB of FN code string
 3499/179D : E9 CC 00                   	JMP	SVSTAD			; Save address and do function
 3500/17A0 :                            ;
 3501/17A0 :                            DOFN:
 3502/17A0 : E8 7B 00                   	CALL	CHEKFN			; Make sure FN follows
 3503/17A3 : 52                         	PUSH	DX			; Save function pointer address
 3504/17A4 : E8 4E FB                   	CALL	EVLPAR			; Evaluate expression in "()"
 3505/17A7 : E8 2F FA                   	CALL	TSTNUM			; Make sure numeric result
 3506/17AA : 8B EC                      	MOV	BP,SP
 3507/17AC : 87 5E 00                   	XCHG	[BP],BX			; Save code str , Get FN ptr
 3508/17AF : 8A 17                      	MOV	DL,[BX]			; Get LSB of FN code string
 3509/17B1 : 9F                         	LAHF
 3510/17B2 : 43                         	INC	BX
 3511/17B3 : 9E                         	SAHF
 3512/17B4 : 8A 37                      	MOV	DH,[BX]			; Get MSB of FN code string
 3513/17B6 : 9F                         	LAHF
 3514/17B7 : 43                         	INC	BX
 3515/17B8 : 9E                         	SAHF
 3516/17B9 : 8A C6                      	MOV	AL,DH			; And function DEFined?
 3517/17BB : 0A C2                      	OR	AL,DL
 3518/17BD : 75 03                      	JNZ	DOFN1
 3519/17BF : E9 55 EE                   	JMP	UFERR			; No - ?UF Error
 3520/17C2 :                            DOFN1:
 3521/17C2 : 8A 07                      	MOV	AL,[BX]			; Get LSB of argument address
 3522/17C4 : 9F                         	LAHF
 3523/17C5 : 43                         	INC	BX
 3524/17C6 : 9E                         	SAHF
 3525/17C7 : 8A 3F                      	MOV	BH,[BX]			; Get MSB of argument address
 3526/17C9 : 8A D8                      	MOV	BL,AL			; HL = Arg variable address
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 60 - 8/7/2025 21:50:51


 3527/17CB : 53                         	PUSH	BX			; Save it
 3528/17CC : 8B 1E 2A 33                	MOV	BX,[FNRGNM]		; Get old argument name
 3529/17D0 : 8B EC                      	MOV	BP,SP
 3530/17D2 : 87 5E 00                   	XCHG	[BP],BX			; Save old , Get new
 3531/17D5 : 89 1E 2A 33                	MOV	[FNRGNM],BX		; Set new argument name
 3532/17D9 : 8B 1E 2E 33                	MOV	BX,[FNARG+2]		; Get LSB,NLSB of old arg value
 3533/17DD : 53                         	PUSH	BX			; Save it
 3534/17DE : 8B 1E 2C 33                	MOV	BX,[FNARG]		; Get MSB,EXP of old arg value
 3535/17E2 : 53                         	PUSH	BX			; Save it
 3536/17E3 : BB 2C 33                   	MOV	BX,FNARG		; HL = Value of argument
 3537/17E6 : 52                         	PUSH	DX			; Save FN code string address
 3538/17E7 : E8 82 08                   	CALL	FPTHL			; Move FPREG to argument
 3539/17EA : 5B                         	POP	BX			; Get FN code string address
 3540/17EB : E8 E8 F9                   	CALL	GETNUM			; Get value from function
 3541/17EE :                            ;	LAHF
 3542/17EE : 4B                         	DEC	BX			; DEC 'cos GETCHR INCs
 3543/17EF :                            ;	SAHF
 3544/17EF : E8 01 F4                   	CALL	GETCHR			; Get next character
 3545/17F2 : 74 03                      	JZ	DOFN2
 3546/17F4 : E9 10 EE                   	JMP	SNERR			; Bad character in FN - Error
 3547/17F7 :                            DOFN2:
 3548/17F7 : 5B                         	POP	BX			; Get MSB,EXP of old arg
 3549/17F8 : 89 1E 2C 33                	MOV	[FNARG],BX		; Restore it
 3550/17FC : 5B                         	POP	BX			; Get LSB,NLSB of old arg
 3551/17FD : 89 1E 2E 33                	MOV	[FNARG+2],BX		; Restore it
 3552/1801 : 5B                         	POP	BX			; Get name of old arg
 3553/1802 : 89 1E 2A 33                	MOV	[FNRGNM],BX		; Restore it
 3554/1806 : 5B                         	POP	BX			; Restore code string address
 3555/1807 : C3                         	RET
 3556/1808 :                            ;
 3557/1808 :                            IDTEST:
 3558/1808 : 53                         	PUSH	BX			; Save code string address
 3559/1809 : 2E 8B 1E 72 05             	MOV	BX,[LINEAT]		; Get current line number
 3560/180E : 9F                         	LAHF
 3561/180F : 43                         	INC	BX			; -1 means direct statement
 3562/1810 : 9E                         	SAHF
 3563/1811 : 8A C7                      	MOV	AL,BH
 3564/1813 : 0A C3                      	OR	AL,BL
 3565/1815 : 5B                         	POP	BX			; Restore code string address
 3566/1816 : 74 01                      	JZ	IDTEST1
 3567/1818 : C3                         	RET				; Return if in program
 3568/1819 :                            IDTEST1:
 3569/1819 : B2 16                      	MOV	DL,ID			; ?ID Error
 3570/181B : E9 03 EE                   	JMP	ERROR
 3571/181E :                            ;
 3572/181E :                            CHEKFN:
 3573/181E : E8 AB F1                   	CALL	CHKSYN			; Make sure FN follows
 3574/1821 : A7                         	DB	ZFN			; "FN" token
 3575/1822 : B0 80                      	MOV	AL,80H
 3576/1824 : A2 17 33                   	MOV	[FORFLG],AL		; Flag FN name to find
 3577/1827 : 0A 07                      	OR	AL,[BX]			; FN name has bit 7 set
 3578/1829 : 8A E8                      	MOV	CH,AL			; in first byte of name
 3579/182B : E8 83 FC                   	CALL	GTFNAM			; Get FN name
 3580/182E : E9 A8 F9                   	JMP	TSTNUM			; Make sure numeric function
 3581/1831 :                            ;
 3582/1831 :                            STR:
 3583/1831 : E8 A5 F9                   	CALL	TSTNUM			; Make sure it's a number
 3584/1834 : E8 23 0A                   	CALL	NUMASC			; Turn number into text
 3585/1837 :                            STR1:
 3586/1837 : E8 3E 00                   	CALL	CRTST			; Create string entry for it
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 61 - 8/7/2025 21:50:51


 3587/183A : E8 7F 02                   	CALL	GSTRCU			; Current string to pool
 3588/183D : B9 37 1B                   	MOV	CX,TOPOOL		; Save in string pool
 3589/1840 : 51                         	PUSH	CX			; Save address on stack
 3590/1841 :                            ;
 3591/1841 :                            SAVSTR:
 3592/1841 : 8A 07                      	MOV	AL,[BX]			; Get string length
 3593/1843 : 9F                         	LAHF
 3594/1844 : 43                         	INC	BX
 3595/1845 : 9E                         	SAHF
 3596/1846 : 9F                         	LAHF
 3597/1847 : 43                         	INC	BX
 3598/1848 : 9E                         	SAHF
 3599/1849 : 53                         	PUSH	BX			; Save pointer to string
 3600/184A : E8 AB 00                   	CALL	TESTR			; See if enough string space
 3601/184D : 5B                         	POP	BX			; Restore pointer to string
 3602/184E : 8A 0F                      	MOV	CL,[BX]			; Get LSB of address
 3603/1850 : 9F                         	LAHF
 3604/1851 : 43                         	INC	BX
 3605/1852 : 9E                         	SAHF
 3606/1853 : 8A 2F                      	MOV	CH,[BX]			; Get MSB of address
 3607/1855 : E8 0B 00                   	CALL	CRTMST			; Create string entry
 3608/1858 : 53                         	PUSH	BX			; Save pointer to MSB of addr
 3609/1859 : 8A D8                      	MOV	BL,AL			; Length of string
 3610/185B : E8 44 02                   	CALL	TOSTRA			; Move to string area
 3611/185E : 5A                         	POP	DX			; Restore pointer to MSB
 3612/185F : C3                         	RET
 3613/1860 :                            ;
 3614/1860 :                            MKTMST:
 3615/1860 : E8 95 00                   	CALL	TESTR			; See if enough string space
 3616/1863 :                            CRTMST:
 3617/1863 : BB 0B 33                   	MOV	BX,TMPSTR		; Temporary string
 3618/1866 : 53                         	PUSH	BX			; Save it
 3619/1867 : 88 07                      	MOV	[BX],AL			; Save length of string
 3620/1869 : 9F                         	LAHF
 3621/186A : 43                         	INC	BX
 3622/186B : 9E                         	SAHF
 3623/186C :                            SVSTAD:
 3624/186C : 9F                         	LAHF
 3625/186D : 43                         	INC	BX
 3626/186E : 9E                         	SAHF
 3627/186F : 88 17                      	MOV	[BX],DL			; Save LSB of address
 3628/1871 : 9F                         	LAHF
 3629/1872 : 43                         	INC	BX
 3630/1873 : 9E                         	SAHF
 3631/1874 : 88 37                      	MOV	[BX],DH			; Save MSB of address
 3632/1876 : 5B                         	POP	BX			; Restore pointer
 3633/1877 : C3                         	RET
 3634/1878 :                            ;
 3635/1878 :                            CRTST:
 3636/1878 : 9F                         	LAHF
 3637/1879 : 4B                         	DEC	BX			; DEC - INCed after
 3638/187A : 9E                         	SAHF
 3639/187B :                            QTSTR:
 3640/187B : B5 22                      	MOV	CH,'"'			; Terminating quote
 3641/187D : 8A F5                      	MOV	DH,CH			; Quote to D
 3642/187F :                            DTSTR:
 3643/187F : 53                         	PUSH	BX			; Save start
 3644/1880 : B1 FF                      	MOV	CL,-1			; Set counter to -1
 3645/1882 :                            QTSTLP:
 3646/1882 : 9F                         	LAHF
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 62 - 8/7/2025 21:50:51


 3647/1883 : 43                         	INC	BX			; Move on
 3648/1884 : 9E                         	SAHF
 3649/1885 : 8A 07                      	MOV	AL,[BX]			; Get byte
 3650/1887 : FE C1                      	INC	CL			; Count bytes
 3651/1889 : 0A C0                      	OR	AL,AL			; End of line?
 3652/188B : 74 08                      	JZ	CRTSTE			; Yes - Create string entry
 3653/188D : 3A C6                      	CMP	AL,DH			; Terminator D found?
 3654/188F : 74 04                      	JZ	CRTSTE			; Yes - Create string entry
 3655/1891 : 3A C5                      	CMP	AL,CH			; Terminator B found?
 3656/1893 : 75 ED                      	JNZ	QTSTLP			; No - Keep looking
 3657/1895 :                            CRTSTE:
 3658/1895 : 3C 22                      	CMP	AL,'"'			; End with '"'?
 3659/1897 : 75 03                      	JNZ	CRTSTE1
 3660/1899 : E8 57 F3                   	CALL	GETCHR			; Yes - Get next charac
 3661/189C :                            CRTSTE1:
 3662/189C : 8B EC                      	MOV	BP,SP
 3663/189E : 87 5E 00                   	XCHG	[BP],BX			; Starting quote
 3664/18A1 : 9F                         	LAHF
 3665/18A2 : 43                         	INC	BX			; First byte of string
 3666/18A3 : 9E                         	SAHF
 3667/18A4 : 87 DA                      	XCHG	BX,DX			; To DE
 3668/18A6 : 8A C1                      	MOV	AL,CL			; Get length
 3669/18A8 : E8 B8 FF                   	CALL	CRTMST			; Create string entry
 3670/18AB :                            TSTOPL:
 3671/18AB : BA 0B 33                   	MOV	DX,TMPSTR		; Temporary string
 3672/18AE : 8B 1E FD 32                	MOV	BX,[TMSTPT]		; Temporary string pool pointer
 3673/18B2 : 89 1E 30 33                	MOV	[FPREG],BX		; Save address of string ptr
 3674/18B6 : B0 01                      	MOV	AL,1
 3675/18B8 : A2 F9 32                   	MOV	[TYPE],AL		; Set type to string
 3676/18BB : E8 B1 07                   	CALL	DETHL4			; Move string to pool
 3677/18BE : E8 FF F0                   	CALL	CPDEHL			; Out of string pool?
 3678/18C1 : 89 1E FD 32                	MOV	[TMSTPT],BX		; Save new pointer
 3679/18C5 : 5B                         	POP	BX			; Restore code string address
 3680/18C6 : 8A 07                      	MOV	AL,[BX]			; Get next code byte
 3681/18C8 : 74 01                      	JZ	TSTOPL1
 3682/18CA : C3                         	RET				; Return if pool OK
 3683/18CB :                            TSTOPL1:
 3684/18CB : B2 1E                      	MOV	DL,ST			; ?ST Error
 3685/18CD : E9 51 ED                   	JMP	ERROR			; String pool overflow
 3686/18D0 :                            ;
 3687/18D0 :                            PRNUMS:
 3688/18D0 : 9F                         	LAHF
 3689/18D1 : 43                         	INC	BX			; Skip leading space
 3690/18D2 : 9E                         	SAHF
 3691/18D3 :                            PRS:
 3692/18D3 : E8 A2 FF                   	CALL	CRTST			; Create string entry for it
 3693/18D6 :                            PRS1:
 3694/18D6 : E8 E3 01                   	CALL	GSTRCU			; Current string to pool
 3695/18D9 : E8 7F 07                   	CALL	LOADFP			; Move string block to BCDE
 3696/18DC : FE C2                      	INC	DL			; Length + 1
 3697/18DE :                            PRSLP:
 3698/18DE : FE CA                      	DEC	DL			; Count characters
 3699/18E0 : 75 01                      	JNZ	PRSLP1
 3700/18E2 : C3                         	RET				; End of string
 3701/18E3 :                            PRSLP1:
 3702/18E3 : 87 D9                      	XCHG	BX,CX
 3703/18E5 : 8A 07                      	MOV	AL,[BX]			; Get byte to output
 3704/18E7 : 87 D9                      	XCHG	BX,CX
 3705/18E9 : E8 F9 F0                   	CALL	OUTC			; Output character in A
 3706/18EC : 3C 0D                      	CMP	AL,CR			; Return?
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 63 - 8/7/2025 21:50:51


 3707/18EE : 75 03                      	JNZ	PRSLP2
 3708/18F0 : E8 9F F6                   	CALL	DONULL			; Yes - Do nulls
 3709/18F3 :                            PRSLP2:
 3710/18F3 : 9F                         	LAHF
 3711/18F4 : 41                         	INC	CX			; Next byte in string
 3712/18F5 : 9E                         	SAHF
 3713/18F6 : EB E6                      	JMP	PRSLP			; More characters to output
 3714/18F8 :                            ;
 3715/18F8 :                            TESTR:
 3716/18F8 : 0A C0                      	OR	AL,AL			; Test if enough room
 3717/18FA : EB 04                      	JMP	GRBDON1			; No garbage collection done
 3718/18FC :                            GRBDON:
 3719/18FC : 58                         	POP	AX			; Garbage collection done
 3720/18FD : 86 E0                      	XCHG	AH,AL
 3721/18FF : 9E                         	SAHF
 3722/1900 :                            GRBDON1:
 3723/1900 : 9F                         	LAHF
 3724/1901 : 86 E0                      	XCHG	AH,AL
 3725/1903 : 50                         	PUSH	AX			; Save status
 3726/1904 : 86 E0                      	XCHG	AH,AL
 3727/1906 : 2E 8B 1E 70 05             	MOV	BX,[STRSPC]		; Bottom of string space in use
 3728/190B : 87 DA                      	XCHG	BX,DX			; To DE
 3729/190D : 8B 1E 0F 33                	MOV	BX,[STRBOT]		; Bottom of string area
 3730/1911 : F6 D0                      	NOT	AL			; Negate length (Top down)
 3731/1913 : 8A C8                      	MOV	CL,AL			; -Length to BC
 3732/1915 : B5 FF                      	MOV	CH,-1			; BC = -ve length of string
 3733/1917 : 03 D9                      	ADD	BX,CX			; Add to bottom of space in use
 3734/1919 :                            ;	LAHF
 3735/1919 : 43                         	INC	BX			; Plus one for 2's complement
 3736/191A :                            ;	SAHF
 3737/191A : E8 A3 F0                   	CALL	CPDEHL			; Below string RAM area?
 3738/191D : 72 0E                      	JC	TESTOS			; Tidy up if not done else err
 3739/191F : 89 1E 0F 33                	MOV	[STRBOT],BX		; Save new bottom of area
 3740/1923 : 9F                         	LAHF
 3741/1924 : 43                         	INC	BX			; Point to first byte of string
 3742/1925 : 9E                         	SAHF
 3743/1926 : 87 DA                      	XCHG	BX,DX			; Address to DE
 3744/1928 :                            POPAF:
 3745/1928 : 58                         	POP	AX			; Throw away status push
 3746/1929 : 86 E0                      	XCHG	AH,AL
 3747/192B : 9E                         	SAHF
 3748/192C : C3                         	RET
 3749/192D :                            ;
 3750/192D :                            TESTOS:
 3751/192D : 58                         	POP	AX			; Garbage collect been done?
 3752/192E : 86 E0                      	XCHG	AH,AL
 3753/1930 : 9E                         	SAHF
 3754/1931 : B2 1A                      	MOV	DL,OS			; ?OS Error
 3755/1933 : 75 03                      	JNZ	TESTOS1
 3756/1935 : E9 E9 EC                   	JMP	ERROR			; Yes - Not enough strig space
 3757/1938 :                            TESTOS1:
 3758/1938 : 3A C0                      	CMP	AL,AL			; Flag garbage collect done
 3759/193A : 9F                         	LAHF
 3760/193B : 86 E0                      	XCHG	AH,AL
 3761/193D : 50                         	PUSH	AX			; Save status
 3762/193E : 86 E0                      	XCHG	AH,AL
 3763/1940 : B9 FC 18                   	MOV	CX,GRBDON		; Garbage collection done
 3764/1943 : 51                         	PUSH	CX			; Save for RETurn
 3765/1944 :                            GARBGE:
 3766/1944 : 8B 1E FB 32                	MOV	BX,[LSTRAM]		; Get end of RAM pointer
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 64 - 8/7/2025 21:50:51


 3767/1948 :                            GARBLP:
 3768/1948 : 89 1E 0F 33                	MOV	[STRBOT],BX		; Reset string pointer
 3769/194C : BB 00 00                   	MOV	BX,0
 3770/194F : 53                         	PUSH	BX			; Flag no string found
 3771/1950 : 2E 8B 1E 70 05             	MOV	BX,[STRSPC]		; Get bottom of string space
 3772/1955 : 53                         	PUSH	BX			; Save bottom of string space
 3773/1956 : BB FF 32                   	MOV	BX,TMSTPL		; Temporary string pool
 3774/1959 :                            GRBLP:
 3775/1959 : 87 DA                      	XCHG	BX,DX
 3776/195B : 8B 1E FD 32                	MOV	BX,[TMSTPT]		; Temporary string pool pointer
 3777/195F : 87 DA                      	XCHG	BX,DX
 3778/1961 : E8 5C F0                   	CALL	CPDEHL			; Temporary string pool done?
 3779/1964 : B9 59 19                   	MOV	CX,GRBLP		; Loop until string pool done
 3780/1967 : 75 56                      	JNZ	STPOOL			; No - See if in string area
 3781/1969 : 8B 1E 22 33                	MOV	BX,[PROGND]		; Start of simple variables
 3782/196D :                            SMPVAR:
 3783/196D : 87 DA                      	XCHG	BX,DX
 3784/196F : 8B 1E 24 33                	MOV	BX,[VAREND]		; End of simple variables
 3785/1973 : 87 DA                      	XCHG	BX,DX
 3786/1975 : E8 48 F0                   	CALL	CPDEHL			; All simple strings done?
 3787/1978 : 74 0C                      	JZ	ARRLP			; Yes - Do string arrays
 3788/197A : 8A 07                      	MOV	AL,[BX]			; Get type of variable
 3789/197C :                            ;	LAHF
 3790/197C : 43                         	INC	BX
 3791/197D :                            ;	SAHF
 3792/197D :                            ;	LAHF
 3793/197D : 43                         	INC	BX
 3794/197E :                            ;	SAHF
 3795/197E : 0A C0                      	OR	AL,AL			; "S" flag set if strings done?
 3796/1980 : E8 3F 00                   	CALL	STRADD			; See if string in strig area
 3797/1983 : EB E8                      	JMP	SMPVAR			; Loop until simple ones done
 3798/1985 :                            ;
 3799/1985 :                            GNXARY:
 3800/1985 : 59                         	POP	CX			; Scrap address of this array
 3801/1986 :                            ARRLP:
 3802/1986 : 87 DA                      	XCHG	BX,DX
 3803/1988 : 8B 1E 26 33                	MOV	BX,[ARREND]		; End of string arrays
 3804/198C : 87 DA                      	XCHG	BX,DX
 3805/198E : E8 2F F0                   	CALL	CPDEHL			; All string arrays done?
 3806/1991 : 74 6F                      	JZ	SCNEND			; Yes - Move string if found
 3807/1993 : E8 C5 06                   	CALL	LOADFP			; Get array name to BCDE
 3808/1996 : 8A C2                      	MOV	AL,DL			; Get type of array
 3809/1998 : 53                         	PUSH	BX			; Save address of num of dimensions
 3810/1999 : 03 D9                      	ADD	BX,CX			; Start of next array
 3811/199B : 0A C0                      	OR	AL,AL			; Test type of array
 3812/199D : 79 E6                      	JNS	GNXARY			; Numeric array - Ignore it
 3813/199F : 89 1E 11 33                	MOV	[CUROPR],BX		; Save address of next array
 3814/19A3 : 5B                         	POP	BX			; Get address of num of dimensions
 3815/19A4 : 8A 0F                      	MOV	CL,[BX]			; BC = Number of dimensions
 3816/19A6 : B5 00                      	MOV	CH,0
 3817/19A8 : 03 D9                      	ADD	BX,CX			; Two bytes per dimension size
 3818/19AA : 03 D9                      	ADD	BX,CX
 3819/19AC : 9F                         	LAHF
 3820/19AD : 43                         	INC	BX			; Plus one for number of dimensions
 3821/19AE : 9E                         	SAHF
 3822/19AF :                            GRBARY:
 3823/19AF : 87 DA                      	XCHG	BX,DX
 3824/19B1 : 8B 1E 11 33                	MOV	BX,[CUROPR]		; Get address of next array
 3825/19B5 : 87 DA                      	XCHG	BX,DX
 3826/19B7 : E8 06 F0                   	CALL	CPDEHL			; Is this array finished?
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 65 - 8/7/2025 21:50:51


 3827/19BA : 74 CA                      	JZ	ARRLP			; Yes - Get next one
 3828/19BC : B9 AF 19                   	MOV	CX,GRBARY		; Loop until array all done
 3829/19BF :                            STPOOL:
 3830/19BF : 51                         	PUSH	CX			; Save return address
 3831/19C0 : 0C 80                      	OR	AL,80H			; Flag string type
 3832/19C2 :                            STRADD:
 3833/19C2 : 8A 07                      	MOV	AL,[BX]			; Get string length
 3834/19C4 : 9F                         	LAHF
 3835/19C5 : 43                         	INC	BX
 3836/19C6 :                            ;	SAHF
 3837/19C6 :                            ;	LAHF
 3838/19C6 : 43                         	INC	BX
 3839/19C7 :                            ;	SAHF
 3840/19C7 : 8A 17                      	MOV	DL,[BX]			; Get LSB of string address
 3841/19C9 :                            ;	LAHF
 3842/19C9 : 43                         	INC	BX
 3843/19CA :                            ;	SAHF
 3844/19CA : 8A 37                      	MOV	DH,[BX]			; Get MSB of string address
 3845/19CC :                            ;	LAHF
 3846/19CC : 43                         	INC	BX
 3847/19CD : 9E                         	SAHF
 3848/19CE : 78 01                      	JS	STRADD1
 3849/19D0 : C3                         	RET				; Not a string - Return
 3850/19D1 :                            STRADD1:
 3851/19D1 : 0A C0                      	OR	AL,AL			; Set flags on string length
 3852/19D3 : 75 01                      	JNZ	STRADD2
 3853/19D5 : C3                         	RET				; Null string - Return
 3854/19D6 :                            STRADD2:
 3855/19D6 : 8B CB                      	MOV	CX,BX			; Save variable pointer
 3856/19D8 : 8B 1E 0F 33                	MOV	BX,[STRBOT]		; Bottom of new area
 3857/19DC : E8 E1 EF                   	CALL	CPDEHL			; String been done?
 3858/19DF : 8B D9                      	MOV	BX,CX			; Restore variable pointer
 3859/19E1 : 73 01                      	JNC	STRADD3
 3860/19E3 : C3                         	RET				; String done - Ignore
 3861/19E4 :                            STRADD3:
 3862/19E4 : 5B                         	POP	BX			; Return address
 3863/19E5 : 8B EC                      	MOV	BP,SP
 3864/19E7 : 87 5E 00                   	XCHG	[BP],BX			; Lowest available string area
 3865/19EA : E8 D3 EF                   	CALL	CPDEHL			; String within string area?
 3866/19ED : 8B EC                      	MOV	BP,SP
 3867/19EF : 87 5E 00                   	XCHG	[BP],BX			; Lowest available string area
 3868/19F2 : 53                         	PUSH	BX			; Re-save return address
 3869/19F3 : 8B D9                      	MOV	BX,CX			; Restore variable pointer
 3870/19F5 : 72 01                      	JC	STRADD4
 3871/19F7 : C3                         	RET				; Outside string area - Ignore
 3872/19F8 :                            STRADD4:
 3873/19F8 : 59                         	POP	CX			; Get return , Throw 2 away
 3874/19F9 : 58                         	POP	AX
 3875/19FA :                            ;	XCHG	AH,AL
 3876/19FA :                            ;	SAHF
 3877/19FA : 58                         	POP	AX
 3878/19FB : 86 E0                      	XCHG	AH,AL
 3879/19FD : 9E                         	SAHF
 3880/19FE : 53                         	PUSH	BX			; Save variable pointer
 3881/19FF : 52                         	PUSH	DX			; Save address of current
 3882/1A00 : 51                         	PUSH	CX			; Put back return address
 3883/1A01 : C3                         	RET				; Go to it
 3884/1A02 :                            ;
 3885/1A02 :                            SCNEND:
 3886/1A02 : 5A                         	POP	DX			; Addresses of strings
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 66 - 8/7/2025 21:50:51


 3887/1A03 : 5B                         	POP	BX			;
 3888/1A04 : 8A C3                      	MOV	AL,BL			; HL = 0 if no more to do
 3889/1A06 : 0A C7                      	OR	AL,BH
 3890/1A08 : 75 01                      	JNZ	SCNEND1
 3891/1A0A : C3                         	RET				; No more to do - Return
 3892/1A0B :                            SCNEND1:
 3893/1A0B : 9F                         	LAHF
 3894/1A0C : 4B                         	DEC	BX
 3895/1A0D : 9E                         	SAHF
 3896/1A0E : 8A 2F                      	MOV	CH,[BX]			; MSB of address of string
 3897/1A10 : 9F                         	LAHF
 3898/1A11 : 4B                         	DEC	BX
 3899/1A12 : 9E                         	SAHF
 3900/1A13 : 8A 0F                      	MOV	CL,[BX]			; LSB of address of string
 3901/1A15 : 53                         	PUSH	BX			; Save variable address
 3902/1A16 : 9F                         	LAHF
 3903/1A17 : 4B                         	DEC	BX
 3904/1A18 : 9E                         	SAHF
 3905/1A19 : 9F                         	LAHF
 3906/1A1A : 4B                         	DEC	BX
 3907/1A1B : 9E                         	SAHF
 3908/1A1C : 8A 1F                      	MOV	BL,[BX]			; HL = Length of string
 3909/1A1E : B7 00                      	MOV	BH,0
 3910/1A20 : 03 D9                      	ADD	BX,CX			; Address of end of string
 3911/1A22 : 8A F5                      	MOV	DH,CH			; String address to DE
 3912/1A24 : 8A D1                      	MOV	DL,CL
 3913/1A26 : 9F                         	LAHF
 3914/1A27 : 4B                         	DEC	BX			; Last byte in string
 3915/1A28 : 9E                         	SAHF
 3916/1A29 : 8B CB                      	MOV	CX,BX			; Address to BC
 3917/1A2B : 8B 1E 0F 33                	MOV	BX,[STRBOT]		; Current bottom of string area
 3918/1A2F : E8 8D EB                   	CALL	MOVSTR			; Move string to new address
 3919/1A32 : 5B                         	POP	BX			; Restore variable address
 3920/1A33 : 88 0F                      	MOV	[BX],CL			; Save new LSB of address
 3921/1A35 : 9F                         	LAHF
 3922/1A36 : 43                         	INC	BX
 3923/1A37 : 9E                         	SAHF
 3924/1A38 : 88 2F                      	MOV	[BX],CH			; Save new MSB of address
 3925/1A3A : 8B D9                      	MOV	BX,CX			; Next string area+1 to HL
 3926/1A3C : 9F                         	LAHF
 3927/1A3D : 4B                         	DEC	BX
 3928/1A3E : 9E                         	SAHF				; Next string area address
 3929/1A3F : E9 06 FF                   	JMP	GARBLP			; Look for more strings
 3930/1A42 :                            ;
 3931/1A42 :                            CONCAT:
 3932/1A42 : 51                         	PUSH	CX			; Save prec' opr & code string
 3933/1A43 : 53                         	PUSH	BX			;
 3934/1A44 : 8B 1E 30 33                	MOV	BX,[FPREG]		; Get first string
 3935/1A48 : 8B EC                      	MOV	BP,SP
 3936/1A4A : 87 5E 00                   	XCHG	[BP],BX			; Save first string
 3937/1A4D : E8 48 F8                   	CALL	OPRND			; Get second string
 3938/1A50 : 8B EC                      	MOV	BP,SP
 3939/1A52 : 87 5E 00                   	XCHG	[BP],BX			; Restore first string
 3940/1A55 : E8 85 F7                   	CALL	TSTSTR			; Make sure it's a string
 3941/1A58 : 8A 07                      	MOV	AL,[BX]			; Get length of second string
 3942/1A5A : 53                         	PUSH	BX			; Save first string
 3943/1A5B : 8B 1E 30 33                	MOV	BX,[FPREG]		; Get second string
 3944/1A5F : 53                         	PUSH	BX			; Save second string
 3945/1A60 : 02 07                      	ADD	AL,[BX]			; Add length of second string
 3946/1A62 : B2 1C                      	MOV	DL,LS			; ?LS Error
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 67 - 8/7/2025 21:50:51


 3947/1A64 : 73 03                      	JNC	CONCAT1			; String too long - Error
 3948/1A66 : E9 B8 EB                   	JMP	ERROR
 3949/1A69 :                            CONCAT1:
 3950/1A69 : E8 F4 FD                   	CALL	MKTMST			; Make temporary string
 3951/1A6C : 5A                         	POP	DX			; Get second string to DE
 3952/1A6D : E8 52 00                   	CALL	GSTRDE			; Move to string pool if needed
 3953/1A70 : 8B EC                      	MOV	BP,SP
 3954/1A72 : 87 5E 00                   	XCHG	[BP],BX			; Get first string
 3955/1A75 : E8 48 00                   	CALL	GSTRHL			; Move to string pool if needed
 3956/1A78 : 53                         	PUSH	BX			; Save first string
 3957/1A79 : 8B 1E 0D 33                	MOV	BX,[TMPSTR+2]		; Temporary string address
 3958/1A7D : 87 DA                      	XCHG	BX,DX			; To DE
 3959/1A7F : E8 0F 00                   	CALL	SSTSA			; First string to string area
 3960/1A82 : E8 0C 00                   	CALL	SSTSA			; Second string to strig area
 3961/1A85 : BB FD 11                   	MOV	BX,EVAL2		; Return to evaluation loop
 3962/1A88 : 8B EC                      	MOV	BP,SP
 3963/1A8A : 87 5E 00                   	XCHG	[BP],BX			; Save return,get code string
 3964/1A8D : 53                         	PUSH	BX			; Save code string address
 3965/1A8E : E9 1A FE                   	JMP	TSTOPL			; To temporary string to pool
 3966/1A91 :                            ;
 3967/1A91 :                            SSTSA:
 3968/1A91 : 5B                         	POP	BX			; Return address
 3969/1A92 : 8B EC                      	MOV	BP,SP
 3970/1A94 : 87 5E 00                   	XCHG	[BP],BX			; Get string block,save return
 3971/1A97 : 8A 07                      	MOV	AL,[BX]			; Get length of string
 3972/1A99 :                            ;	LAHF
 3973/1A99 : 43                         	INC	BX
 3974/1A9A :                            ;	SAHF
 3975/1A9A :                            ;	LAHF
 3976/1A9A : 43                         	INC	BX
 3977/1A9B :                            ;	SAHF
 3978/1A9B : 8A 0F                      	MOV	CL,[BX]			; Get LSB of string address
 3979/1A9D :                            ;	LAHF
 3980/1A9D : 43                         	INC	BX
 3981/1A9E :                            ;	SAHF
 3982/1A9E : 8A 2F                      	MOV	CH,[BX]			; Get MSB of string address
 3983/1AA0 : 8A D8                      	MOV	BL,AL			; Length to L
 3984/1AA2 :                            TOSTRA:
 3985/1AA2 : FE C3                      	INC	BL			; INC - DECed after
 3986/1AA4 :                            TSALP:
 3987/1AA4 : FE CB                      	DEC	BL			; Count bytes moved
 3988/1AA6 : 75 01                      	JNZ	TSALP1
 3989/1AA8 : C3                         	RET				; End of string - Return
 3990/1AA9 :                            TSALP1:
 3991/1AA9 : 87 D9                      	XCHG	BX,CX
 3992/1AAB : 8A 07                      	MOV	AL,[BX]
 3993/1AAD : 87 D9                      	XCHG	BX,CX			; Get source
 3994/1AAF : 87 DA                      	XCHG	BX,DX
 3995/1AB1 : 88 07                      	MOV	[BX],AL
 3996/1AB3 : 87 DA                      	XCHG	BX,DX			; Save destination
 3997/1AB5 :                            ;	LAHF
 3998/1AB5 : 41                         	INC	CX			; Next source
 3999/1AB6 :                            ;	SAHF
 4000/1AB6 :                            ;	LAHF
 4001/1AB6 : 42                         	INC	DX			; Next destination
 4002/1AB7 :                            ;	SAHF
 4003/1AB7 : EB EB                      	JMP	TSALP			; Loop until string moved
 4004/1AB9 :                            ;
 4005/1AB9 :                            GETSTR:
 4006/1AB9 : E8 21 F7                   	CALL	TSTSTR			; Make sure it's a strig
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 68 - 8/7/2025 21:50:51


 4007/1ABC :                            GSTRCU:
 4008/1ABC : 8B 1E 30 33                	MOV	BX,[FPREG]		; Get current string
 4009/1AC0 :                            GSTRHL:
 4010/1AC0 : 87 DA                      	XCHG	BX,DX			; Save DE
 4011/1AC2 :                            GSTRDE:
 4012/1AC2 : E8 20 00                   	CALL	BAKTMP			; Was it last tmp-str?
 4013/1AC5 : 87 DA                      	XCHG	BX,DX			; Restore DE
 4014/1AC7 : 74 01                      	JZ	GSTRDE1
 4015/1AC9 : C3                         	RET				; No - Return
 4016/1ACA :                            GSTRDE1:
 4017/1ACA : 52                         	PUSH	DX			; Save string
 4018/1ACB : 8A F5                      	MOV	DH,CH			; String block address to DE
 4019/1ACD : 8A D1                      	MOV	DL,CL
 4020/1ACF :                            ;	LAHF
 4021/1ACF : 4A                         	DEC	DX			; Point to length
 4022/1AD0 :                            ;	SAHF
 4023/1AD0 : 8A 0F                      	MOV	CL,[BX]			; Get string length
 4024/1AD2 : 8B 1E 0F 33                	MOV	BX,[STRBOT]		; Current bottom of string area
 4025/1AD6 : E8 E7 EE                   	CALL	CPDEHL			; Last one in string area?
 4026/1AD9 : 75 08                      	JNZ	POPHL			; No - Return
 4027/1ADB : 8A E8                      	MOV	CH,AL			; Clear B (A=0)
 4028/1ADD : 03 D9                      	ADD	BX,CX			; Remove string from string area
 4029/1ADF : 89 1E 0F 33                	MOV	[STRBOT],BX		; Save new bottom of string area
 4030/1AE3 :                            POPHL:
 4031/1AE3 : 5B                         	POP	BX			; Restore string
 4032/1AE4 : C3                         	RET
 4033/1AE5 :                            ;
 4034/1AE5 :                            BAKTMP:
 4035/1AE5 : 8B 1E FD 32                	MOV	BX,[TMSTPT]		; Get temporary string pool top
 4036/1AE9 :                            ;	LAHF
 4037/1AE9 : 4B                         	DEC	BX			; Back
 4038/1AEA :                            ;	SAHF
 4039/1AEA : 8A 2F                      	MOV	CH,[BX]			; Get MSB of address
 4040/1AEC :                            ;	LAHF
 4041/1AEC : 4B                         	DEC	BX			; Back
 4042/1AED :                            ;	SAHF
 4043/1AED : 8A 0F                      	MOV	CL,[BX]			; Get LSB of address
 4044/1AEF :                            ;	LAHF
 4045/1AEF : 4B                         	DEC	BX			; Back
 4046/1AF0 :                            ;	SAHF
 4047/1AF0 :                            ;	LAHF
 4048/1AF0 : 4B                         	DEC	BX			; Back
 4049/1AF1 :                            ;	SAHF
 4050/1AF1 : E8 CC EE                   	CALL	CPDEHL			; String last in string pool?
 4051/1AF4 : 74 01                      	JZ	BAKTMP1
 4052/1AF6 : C3                         	RET				; Yes - Leave it
 4053/1AF7 :                            BAKTMP1:
 4054/1AF7 : 89 1E FD 32                	MOV	[TMSTPT],BX		; Save new string pool top
 4055/1AFB : C3                         	RET
 4056/1AFC :                            ;
 4057/1AFC :                            LEN:
 4058/1AFC : B9 5E 17                   	MOV	CX,PASSA		; To return integer A
 4059/1AFF : 51                         	PUSH	CX			; Save address
 4060/1B00 :                            GETLEN:
 4061/1B00 : E8 B6 FF                   	CALL	GETSTR			; Get string and its length
 4062/1B03 : 32 C0                      	XOR	AL,AL
 4063/1B05 : 8A F0                      	MOV	DH,AL			; Clear D
 4064/1B07 : A2 F9 32                   	MOV	[TYPE],AL		; Set type to numeric
 4065/1B0A : 8A 07                      	MOV	AL,[BX]			; Get length of string
 4066/1B0C : 0A C0                      	OR	AL,AL			; Set status flags
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 69 - 8/7/2025 21:50:51


 4067/1B0E : C3                         	RET
 4068/1B0F :                            ;
 4069/1B0F :                            ASC:
 4070/1B0F : B9 5E 17                   	MOV	CX,PASSA		; To return integer A
 4071/1B12 : 51                         	PUSH	CX			; Save address
 4072/1B13 :                            GTFLNM:
 4073/1B13 : E8 EA FF                   	CALL	GETLEN			; Get length of string
 4074/1B16 : 75 03                      	JNZ	GTFLNM1			; Null string - Error
 4075/1B18 : E9 EF F1                   	JMP	FCERR
 4076/1B1B :                            GTFLNM1:
 4077/1B1B :                            ;	LAHF
 4078/1B1B : 43                         	INC	BX
 4079/1B1C :                            ;	SAHF
 4080/1B1C :                            ;	LAHF
 4081/1B1C : 43                         	INC	BX
 4082/1B1D :                            ;	SAHF
 4083/1B1D : 8A 17                      	MOV	DL,[BX]			; Get LSB of address
 4084/1B1F :                            ;	LAHF
 4085/1B1F : 43                         	INC	BX
 4086/1B20 :                            ;	SAHF
 4087/1B20 : 8A 37                      	MOV	DH,[BX]			; Get MSB of address
 4088/1B22 : 87 DA                      	XCHG	BX,DX
 4089/1B24 : 8A 07                      	MOV	AL,[BX]
 4090/1B26 : 87 DA                      	XCHG	BX,DX			; Get first byte of string
 4091/1B28 : C3                         	RET
 4092/1B29 :                            ;
 4093/1B29 :                            CHR:
 4094/1B29 : B0 01                      	MOV	AL,1			; One character string
 4095/1B2B : E8 32 FD                   	CALL	MKTMST			; Make a temporary string
 4096/1B2E : E8 30 01                   	CALL	MAKINT			; Make it integer A
 4097/1B31 : 8B 1E 0D 33                	MOV	BX,[TMPSTR+2]		; Get address of string
 4098/1B35 : 88 17                      	MOV	[BX],DL			; Save character
 4099/1B37 :                            TOPOOL:
 4100/1B37 : 59                         	POP	CX			; Clean up stack
 4101/1B38 : E9 70 FD                   	JMP	TSTOPL			; Temporary string to pool
 4102/1B3B :                            ;
 4103/1B3B :                            LEFT:
 4104/1B3B : E8 CD 00                   	CALL	LFRGNM			; Get number and ending ")"
 4105/1B3E : 32 C0                      	XOR	AL,AL			; Start at first byte in string
 4106/1B40 :                            RIGHT1:
 4107/1B40 : 8B EC                      	MOV	BP,SP
 4108/1B42 : 87 5E 00                   	XCHG	[BP],BX			; Save code string,Get string
 4109/1B45 : 8A C8                      	MOV	CL,AL			; Starting position in string
 4110/1B47 :                            MID1:
 4111/1B47 : 53                         	PUSH	BX			; Save string block address
 4112/1B48 : 8A 07                      	MOV	AL,[BX]			; Get length of string
 4113/1B4A : 3A C5                      	CMP	AL,CH			; Compare with number given
 4114/1B4C : 72 04                      	JC	ALLFOL			; All following bytes required
 4115/1B4E : 8A C5                      	MOV	AL,CH			; Get new length
 4116/1B50 : EB 02                      	JMP	ALLFOL1			; Skip "LD C,0"
 4117/1B52 :                            ALLFOL:
 4118/1B52 : B1 00                      	MOV	CL,0			; First byte of string
 4119/1B54 :                            ALLFOL1:
 4120/1B54 : 51                         	PUSH	CX			; Save position in string
 4121/1B55 : E8 A0 FD                   	CALL	TESTR			; See if enough string space
 4122/1B58 : 59                         	POP	CX			; Get position in string
 4123/1B59 : 5B                         	POP	BX			; Restore string block address
 4124/1B5A : 53                         	PUSH	BX			; And re-save it
 4125/1B5B :                            ;	LAHF
 4126/1B5B : 43                         	INC	BX
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 70 - 8/7/2025 21:50:51


 4127/1B5C :                            ;	SAHF
 4128/1B5C :                            ;	LAHF
 4129/1B5C : 43                         	INC	BX
 4130/1B5D :                            ;	SAHF
 4131/1B5D : 8A 2F                      	MOV	CH,[BX]			; Get LSB of address
 4132/1B5F :                            ;	LAHF
 4133/1B5F : 43                         	INC	BX
 4134/1B60 :                            ;	SAHF
 4135/1B60 : 8A 3F                      	MOV	BH,[BX]			; Get MSB of address
 4136/1B62 : 8A DD                      	MOV	BL,CH			; HL = address of string
 4137/1B64 : B5 00                      	MOV	CH,0			; BC = starting address
 4138/1B66 : 03 D9                      	ADD	BX,CX			; Point to that byte
 4139/1B68 : 8B CB                      	MOV	CX,BX			; BC = source string
 4140/1B6A : E8 F6 FC                   	CALL	CRTMST			; Create a string entry
 4141/1B6D : 8A D8                      	MOV	BL,AL			; Length of new string
 4142/1B6F : E8 30 FF                   	CALL	TOSTRA			; Move string to string
 4143/1B72 : 5A                         	POP	DX			; Clear stack
 4144/1B73 : E8 4C FF                   	CALL	GSTRDE			; Move to string pool if needed
 4145/1B76 : E9 32 FD                   	JMP	TSTOPL			; Temporary string to pool
 4146/1B79 :                            ;
 4147/1B79 :                            RIGHT:
 4148/1B79 : E8 8F 00                   	CALL	LFRGNM			; Get number and ending ")"
 4149/1B7C : 5A                         	POP	DX			; Get string length
 4150/1B7D : 52                         	PUSH	DX			; And re-save
 4151/1B7E : 87 DA                      	XCHG	BX,DX
 4152/1B80 : 8A 07                      	MOV	AL,[BX]
 4153/1B82 : 87 DA                      	XCHG	BX,DX			; Get length
 4154/1B84 : 2A C5                      	SUB	AL,CH			; Move back N bytes
 4155/1B86 : EB B8                      	JMP	RIGHT1			; Go and get sub-string
 4156/1B88 :                            ;
 4157/1B88 :                            MID:
 4158/1B88 : 87 DA                      	XCHG	BX,DX			; Get code string addre
 4159/1B8A : 8A 07                      	MOV	AL,[BX]			; Get next byte ',' or ")"
 4160/1B8C : E8 82 00                   	CALL	MIDNUM			; Get number supplied
 4161/1B8F : FE C5                      	INC	CH			; Is it character zero?
 4162/1B91 : FE CD                      	DEC	CH
 4163/1B93 : 75 03                      	JNZ	MID2			; Yes - Error
 4164/1B95 : E9 72 F1                   	JMP	FCERR
 4165/1B98 :                            MID2:
 4166/1B98 : 51                         	PUSH	CX			; Save starting position
 4167/1B99 : B2 FF                      	MOV	DL,255				; All of string
 4168/1B9B : 3C 29                      	CMP	AL,')'			; Any length given?
 4169/1B9D : 74 07                      	JZ	RSTSTR			; No - Rest of string
 4170/1B9F : E8 2A EE                   	CALL	CHKSYN			; Make sure ',' follows
 4171/1BA2 : 2C                         	DB	','
 4172/1BA3 : E8 B8 00                   	CALL	GETINT			; Get integer 0-255
 4173/1BA6 :                            RSTSTR:
 4174/1BA6 : E8 23 EE                   	CALL	CHKSYN			; Make sure ")" follows
 4175/1BA9 : 29                         	DB	")"
 4176/1BAA : 58                         	POP	AX			; Restore starting posion
 4177/1BAB : 86 E0                      	XCHG	AH,AL
 4178/1BAD :                            ;	SAHF
 4179/1BAD : 8B EC                      	MOV	BP,SP
 4180/1BAF : 87 5E 00                   	XCHG	[BP],BX			; Get string,8ave code string
 4181/1BB2 : B9 47 1B                   	MOV	CX,MID1			; Continuation of MID$ routine
 4182/1BB5 : 51                         	PUSH	CX			; Save for return
 4183/1BB6 : FE C8                      	DEC	AL			; Starting position-1
 4184/1BB8 : 3A 07                      	CMP	AL,[BX]			; Compare with length
 4185/1BBA : B5 00                      	MOV	CH,0			; Zero bytes length
 4186/1BBC : 72 01                      	JC	RSTSTR1
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 71 - 8/7/2025 21:50:51


 4187/1BBE : C3                         	RET				; Null string if start past end
 4188/1BBF :                            RSTSTR1:
 4189/1BBF : 8A C8                      	MOV	CL,AL			; Save starting position -1
 4190/1BC1 : 8A 07                      	MOV	AL,[BX]			; Get length of string
 4191/1BC3 : 2A C1                      	SUB	AL,CL			; Subtract start
 4192/1BC5 : 3A C2                      	CMP	AL,DL			; Enough string for it?
 4193/1BC7 : 8A E8                      	MOV	CH,AL			; Save maximum length available
 4194/1BC9 : 73 01                      	JNC	RSTSTR2
 4195/1BCB : C3                         	RET				; Truncate string if needed
 4196/1BCC :                            RSTSTR2:
 4197/1BCC : 8A EA                      	MOV	CH,DL			; Set specified length
 4198/1BCE : C3                         	RET				; Go and create string
 4199/1BCF :                            ;
 4200/1BCF :                            VAL:
 4201/1BCF : E8 2E FF                   	CALL	GETLEN			; Get length of string
 4202/1BD2 : 75 03                      	JNZ	VAL0
 4203/1BD4 : E9 6E 01                   	JMP	RESZER			; Result zero
 4204/1BD7 :                            VAL0:
 4205/1BD7 : 8A D0                      	MOV	DL,AL			; Save length
 4206/1BD9 :                            ;	LAHF
 4207/1BD9 : 43                         	INC	BX
 4208/1BDA :                            ;	SAHF
 4209/1BDA :                            ;	LAHF
 4210/1BDA : 43                         	INC	BX
 4211/1BDB :                            ;	SAHF
 4212/1BDB : 8A 07                      	MOV	AL,[BX]			; Get LSB of address
 4213/1BDD :                            ;	LAHF
 4214/1BDD : 43                         	INC	BX
 4215/1BDE :                            ;	SAHF
 4216/1BDE : 8A 3F                      	MOV	BH,[BX]			; Get MSB of address
 4217/1BE0 : 8A D8                      	MOV	BL,AL			; HL = String address
 4218/1BE2 : 53                         	PUSH	BX			; Save string address
 4219/1BE3 : 03 DA                      	ADD	BX,DX
 4220/1BE5 : 8A 2F                      	MOV	CH,[BX]			; Get end of string+1 byte
 4221/1BE7 : 88 37                      	MOV	[BX],DH			; Zero it to terminate
 4222/1BE9 : 8B EC                      	MOV	BP,SP
 4223/1BEB : 87 5E 00                   	XCHG	[BP],BX			; Save string end,get start
 4224/1BEE : 51                         	PUSH	CX			; Save end+1 byte
 4225/1BEF : 8A 07                      	MOV	AL,[BX]			; Get starting byte
 4226/1BF1 : 3C 24                      	CMP	AL,'$'			; Hex number indicated?
 4227/1BF3 : 75 05                      	JNZ	VAL1
 4228/1BF5 : E8 EC 0A                   	CALL	HEXTFP			; Convert Hex to FPREG
 4229/1BF8 : EB 0C                      	JMP	VAL3
 4230/1BFA :                            VAL1:
 4231/1BFA : 3C 25                      	CMP	AL,'%'			; Binary number indicated?
 4232/1BFC : 75 05                      	JNZ	VAL2
 4233/1BFE : E8 67 0B                   	CALL	BINTFP			; Convert Bin to FPREG
 4234/1C01 : EB 03                      	JMP	VAL3
 4235/1C03 :                            VAL2:
 4236/1C03 : E8 83 05                   	CALL	ASCTFP			; Convert ASCII string to FP
 4237/1C06 :                            VAL3:
 4238/1C06 : 59                         	POP	CX			; Restore end+1 byte
 4239/1C07 : 5B                         	POP	BX			; Restore end+1 address
 4240/1C08 : 88 2F                      	MOV	[BX],CH			; Put back original byte
 4241/1C0A : C3                         	RET
 4242/1C0B :                            ;
 4243/1C0B :                            LFRGNM:
 4244/1C0B : 87 DA                      	XCHG	BX,DX			; Code string address to HL
 4245/1C0D : E8 BC ED                   	CALL	CHKSYN			; Make sure ")" follows
 4246/1C10 : 29                         	DB	")"
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 72 - 8/7/2025 21:50:51


 4247/1C11 :                            MIDNUM:
 4248/1C11 : 59                         	POP	CX			; Get return address
 4249/1C12 : 5A                         	POP	DX			; Get number supplied
 4250/1C13 : 51                         	PUSH	CX			; Re-save return address
 4251/1C14 : 8A EA                      	MOV	CH,DL			; Number to B
 4252/1C16 : C3                         	RET
 4253/1C17 :                            ;
 4254/1C17 :                            INP:
 4255/1C17 : E8 47 00                   	CALL	MAKINT			; Make it integer A
 4256/1C1A : A2 55 05                   	MOV	[INPORT],AL		; Set input port
 4257/1C1D : E8 34 E9                   	CALL	INPSUB			; Get input from port
 4258/1C20 : E9 3B FB                   	JMP	PASSA			; Return integer A
 4259/1C23 :                            ;
 4260/1C23 :                            POUT:
 4261/1C23 : E8 26 00                   	CALL	SETIO			; Set up port number
 4262/1C26 : E9 EE E8                   	JMP	OUTSUB			; Output data and return
 4263/1C29 :                            ;
 4264/1C29 :                            WAIT:
 4265/1C29 : E8 20 00                   	CALL	SETIO			; Set up port number
 4266/1C2C : 9F                         	LAHF
 4267/1C2D : 86 E0                      	XCHG	AH,AL
 4268/1C2F : 50                         	PUSH	AX			; Save AND mask
 4269/1C30 : 86 E0                      	XCHG	AH,AL
 4270/1C32 : B2 00                      	MOV	DL,0			; Assume zero if none given
 4271/1C34 :                            ;	LAHF
 4272/1C34 : 4B                         	DEC	BX			; DEC 'cos GETCHR INCs
 4273/1C35 :                            ;	SAHF
 4274/1C35 : E8 BB EF                   	CALL	GETCHR			; Get next character
 4275/1C38 : 74 07                      	JZ	NOXOR			; No XOR byte given
 4276/1C3A : E8 8F ED                   	CALL	CHKSYN			; Make sure ',' follows
 4277/1C3D : 2C                         	DB	','
 4278/1C3E : E8 1D 00                   	CALL	GETINT			; Get integer 0-255 to XOR with
 4279/1C41 :                            NOXOR:
 4280/1C41 : 59                         	POP	CX			; Restore AND mask
 4281/1C42 :                            WAITLP:
 4282/1C42 : E8 0F E9                   	CALL	INPSUB			; Get input
 4283/1C45 : 32 C2                      	XOR	AL,DL			; Flip selected bits
 4284/1C47 : 22 C5                      	AND	AL,CH			; Result non-zero?
 4285/1C49 : 74 F7                      	JZ	WAITLP			; No = keep waiting
 4286/1C4B : C3                         	RET
 4287/1C4C :                            ;
 4288/1C4C :                            SETIO:
 4289/1C4C : E8 0F 00                   	CALL	GETINT			; Get integer 0-255
 4290/1C4F : A2 55 05                   	MOV	[INPORT],AL		; Set input port
 4291/1C52 : A2 18 05                   	MOV	[OTPORT],AL		; Set output port
 4292/1C55 : E8 74 ED                   	CALL	CHKSYN			; Make sure ',' follows
 4293/1C58 : 2C                         	DB	','
 4294/1C59 : EB 03                      	JMP	GETINT			; Get integer 0-255 and return
 4295/1C5B :                            ;
 4296/1C5B :                            FNDNUM:
 4297/1C5B : E8 95 EF                   	CALL	GETCHR			; Get next character
 4298/1C5E :                            GETINT:
 4299/1C5E : E8 75 F5                   	CALL	GETNUM			; Get a number from 0 to 255
 4300/1C61 :                            MAKINT:
 4301/1C61 : E8 87 F0                   	CALL	DEPINT			; Make sure value 0 - 255
 4302/1C64 : 8A C6                      	MOV	AL,DH			; Get MSB of number
 4303/1C66 : 0A C0                      	OR	AL,AL			; Zero?
 4304/1C68 : 74 03                      	JZ	MAKINT1			; No - Error
 4305/1C6A : E9 9D F0                   	JMP	FCERR
 4306/1C6D :                            MAKINT1:
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 73 - 8/7/2025 21:50:51


 4307/1C6D :                            ;	LAHF
 4308/1C6D : 4B                         	DEC	BX			; DEC 'cos GETCHR INCs
 4309/1C6E :                            ;	SAHF
 4310/1C6E : E8 82 EF                   	CALL	GETCHR			; Get next character
 4311/1C71 : 8A C2                      	MOV	AL,DL			; Get number to A
 4312/1C73 : C3                         	RET
 4313/1C74 :                            ;
 4314/1C74 :                            PEEK:
 4315/1C74 : E8 79 F0                   	CALL	DEINT			; Get memory address
 4316/1C77 : 87 DA                      	XCHG	BX,DX
 4317/1C79 : 8A 07                      	MOV	AL,[BX]			; Get byte in memory
 4318/1C7B : 87 DA                      	XCHG	BX,DX
 4319/1C7D : E9 DE FA                   	JMP	PASSA			; Return integer A
 4320/1C80 :                            ;
 4321/1C80 :                            POKE:
 4322/1C80 : E8 53 F5                   	CALL	GETNUM			; Get memory address
 4323/1C83 : E8 6A F0                   	CALL	DEINT			; Get integer -32768 to 32767
 4324/1C86 : 52                         	PUSH	DX			; Save memory address
 4325/1C87 : E8 42 ED                   	CALL	CHKSYN			; Make sure ',' follows
 4326/1C8A : 2C                         	DB	','
 4327/1C8B : E8 D0 FF                   	CALL	GETINT			; Get integer 0-255
 4328/1C8E : 5A                         	POP	DX			; Restore memory address
 4329/1C8F : 87 DA                      	XCHG	BX,DX
 4330/1C91 : 88 07                      	MOV	[BX],AL
 4331/1C93 : 87 DA                      	XCHG	BX,DX			; Load it into memory
 4332/1C95 : C3                         	RET
 4333/1C96 :                            ;
 4334/1C96 :                            ROUND:
 4335/1C96 : BB 94 23                   	MOV	BX,HALF			; Add 0.5 to FPREG
 4336/1C99 :                            ADDPHL:
 4337/1C99 : E8 BF 03                   	CALL	LOADFP			; Load FP at (HL) to BCDE
 4338/1C9C : EB 0A                      	JMP	FPADD			; Add BCDE to FPREG
 4339/1C9E :                            ;
 4340/1C9E :                            SUBPHL:
 4341/1C9E : E8 BA 03                   	CALL	LOADFP			; FPREG = -FPREG + number at HL
 4342/1CA1 : EB 02                      	JMP	SUBCDE			; Skip "POP CX" and "POP DX"
 4343/1CA3 :                            PSUB:
 4344/1CA3 : 59                         	POP	CX			; Get FP number from stack
 4345/1CA4 : 5A                         	POP	DX
 4346/1CA5 :                            SUBCDE:
 4347/1CA5 : E8 7B 03                   	CALL	INVSGN			; Negate FPREG
 4348/1CA8 :                            FPADD:
 4349/1CA8 : 8A C5                      	MOV	AL,CH			; Get FP exponent
 4350/1CAA : 0A C0                      	OR	AL,AL			; Is number zero?
 4351/1CAC : 75 01                      	JNZ	FPADD1
 4352/1CAE : C3                         	RET				; Yes - Nothing to add
 4353/1CAF :                            FPADD1:
 4354/1CAF : A0 33 33                   	MOV	AL,[FPEXP]		; Get FPREG exponent
 4355/1CB2 : 0A C0                      	OR	AL,AL           	; Is this number zero?
 4356/1CB4 : 75 03                      	JNZ	FPADD2			; Yes - Move BCDE to FPREQ
 4357/1CB6 : E9 90 03                   	JMP	FPBCDE
 4358/1CB9 :                            FPADD2:
 4359/1CB9 : 2A C5                      	SUB	AL,CH			; BCDE number larger?
 4360/1CBB : 73 10                      	JNC	NOSWAP			; No - Don't swap them
 4361/1CBD : F6 D0                      	NOT	AL			; Two's complement
 4362/1CBF : FE C0                      	INC	AL			; FP exponent
 4363/1CC1 : 87 DA                      	XCHG	BX,DX
 4364/1CC3 : E8 67 03                   	CALL	STAKFP			; Put FPREG on stack
 4365/1CC6 : 87 DA                      	XCHG	BX,DX
 4366/1CC8 : E8 7E 03                   	CALL	FPBCDE			; Move BCDE to FPREG
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 74 - 8/7/2025 21:50:51


 4367/1CCB : 59                         	POP	CX			; Restore number from stack
 4368/1CCC : 5A                         	POP	DX
 4369/1CCD :                            NOSWAP:
 4370/1CCD : 3C 19                      	CMP	AL,24+1			; Second number insignificant?
 4371/1CCF : 72 01                      	JC	NOSWAP1
 4372/1CD1 : C3                         	RET				; Yes - First number is result
 4373/1CD2 :                            NOSWAP1:
 4374/1CD2 : 9F                         	LAHF
 4375/1CD3 : 86 E0                      	XCHG	AH,AL
 4376/1CD5 : 50                         	PUSH	AX			; Save number of bits to scale
 4377/1CD6 : 86 E0                      	XCHG	AH,AL
 4378/1CD8 : E8 A5 03                   	CALL	SIGNS			; Set MSBs & sign of result
 4379/1CDB : 8A F8                      	MOV	BH,AL			; Save sign of result
 4380/1CDD : 58                         	POP	AX			; Restore scaling factor
 4381/1CDE : 86 E0                      	XCHG	AH,AL
 4382/1CE0 : 9E                         	SAHF
 4383/1CE1 : E8 01 01                   	CALL	SCALE			; Scale BCDE to same exponent
 4384/1CE4 : 0A C7                      	OR	AL,BH			; Result to be positive?
 4385/1CE6 : BB 30 33                   	MOV	BX,FPREG		; Point to FPREG
 4386/1CE9 : 79 19                      	JNS	MINCDE			; No - Subtract FPREG from CDE
 4387/1CEB : E8 BA 00                   	CALL	PLUCDE			; Add FPREG to CDE
 4388/1CEE : 72 03                      	JC	NOSWAP2			; No overflow - Round it up
 4389/1CF0 : E9 80 00                   	JMP	RONDUP
 4390/1CF3 :                            NOSWAP2:
 4391/1CF3 : 9F                         	LAHF
 4392/1CF4 : 43                         	INC	BX			; Point to exponent
 4393/1CF5 : 9E                         	SAHF
 4394/1CF6 : FE 07                      	INC	BYTE PTR [BX]		; Increment it
 4395/1CF8 : 75 03                      	JNZ	NOSWAP3			; Number overflowed - Error
 4396/1CFA : E9 1E E9                   	JMP	OVERR
 4397/1CFD :                            NOSWAP3:
 4398/1CFD : B3 01                      	MOV	BL,1			; 1 bit to shift right
 4399/1CFF : E8 00 01                   	CALL	SHRT1			; Shift result right
 4400/1D02 : EB 6F                      	JMP	RONDUP			; Round it up
 4401/1D04 :                            ;
 4402/1D04 :                            MINCDE:
 4403/1D04 : 32 C0                      	XOR	AL,AL			; Clear A and carry
 4404/1D06 : 2A C5                      	SUB	AL,CH			; Negate exponent
 4405/1D08 : 8A E8                      	MOV	CH,AL			; Re-save exponent
 4406/1D0A : 8A 07                      	MOV	AL,[BX]			; Get LSB of FPREG
 4407/1D0C : 1A C2                      	SBB	AL,DL			; Subtract LSB of BCDE
 4408/1D0E : 8A D0                      	MOV	DL,AL			; Save LSB of BCDE
 4409/1D10 : 9F                         	LAHF
 4410/1D11 : 43                         	INC	BX
 4411/1D12 : 9E                         	SAHF
 4412/1D13 : 8A 07                      	MOV	AL,[BX]			; Get NMSB of FPREG
 4413/1D15 : 1A C6                      	SBB	AL,DH			; Subtract NMSB of BCDE
 4414/1D17 : 8A F0                      	MOV	DH,AL			; Save NMSB of BCDE
 4415/1D19 : 9F                         	LAHF
 4416/1D1A : 43                         	INC	BX
 4417/1D1B : 9E                         	SAHF
 4418/1D1C : 8A 07                      	MOV	AL,[BX]			; Get MSB of FPREG
 4419/1D1E : 1A C1                      	SBB	AL,CL			; Subtract MSB of BCDE
 4420/1D20 : 8A C8                      	MOV	CL,AL			; Save MSB of BCDE
 4421/1D22 :                            CONPOS:
 4422/1D22 : 73 03                      	JNC	BNORM
 4423/1D24 : E8 9A 00                   	CALL	COMPL			; Overflow - Make it positive
 4424/1D27 :                            ;
 4425/1D27 :                            BNORM:
 4426/1D27 : 8A DD                      	MOV	BL,CH			; L = Exponent
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 75 - 8/7/2025 21:50:51


 4427/1D29 : 8A FA                      	MOV	BH,DL			; H = LSB
 4428/1D2B : 32 C0                      	XOR	AL,AL
 4429/1D2D :                            BNRMLP:
 4430/1D2D : 8A E8                      	MOV	CH,AL			; Save bit count
 4431/1D2F : 8A C1                      	MOV	AL,CL			; Get MSB
 4432/1D31 : 0A C0                      	OR	AL,AL			; Is it zero?
 4433/1D33 : 75 26                      	JNZ	PNORM			; No - Do it bit at a time
 4434/1D35 : 8A CE                      	MOV	CL,DH			; MSB = NMSB
 4435/1D37 : 8A F7                      	MOV	DH,BH			; NMSB= LSB
 4436/1D39 : 8A FB                      	MOV	BH,BL			; LSB = VLSB
 4437/1D3B : 8A D8                      	MOV	BL,AL			; VLSB= 0
 4438/1D3D : 8A C5                      	MOV	AL,CH			; Get exponent
 4439/1D3F : 2C 08                      	SUB	AL,8			; Count 8 bits
 4440/1D41 : 3C E0                      	CMP	AL,-24-8		; Was number zero?
 4441/1D43 : 75 E8                      	JNZ	BNRMLP			; No - Keep normalising
 4442/1D45 :                            RESZER:
 4443/1D45 : 32 C0                      	XOR	AL,AL			; Result is zero
 4444/1D47 :                            SAVEXP:
 4445/1D47 : A2 33 33                   	MOV	[FPEXP],AL		; Save result as zero
 4446/1D4A : C3                         	RET
 4447/1D4B :                            ;
 4448/1D4B :                            NORMAL:
 4449/1D4B : FE CD                      	DEC	CH			; Count bits
 4450/1D4D : 03 DB                      	ADD	BX,BX			; Shift HL left
 4451/1D4F : 8A C6                      	MOV	AL,DH			; Get NMSB
 4452/1D51 : D0 D0                      	RCL	AL,1			; Shift left with last bit
 4453/1D53 : 8A F0                      	MOV	DH,AL			; Save NMSB
 4454/1D55 : 8A C1                      	MOV	AL,CL			; Get MSB
 4455/1D57 : 12 C0                      	ADC	AL,AL			; Shift left with last bit
 4456/1D59 : 8A C8                      	MOV	CL,AL			; Save MSB
 4457/1D5B :                            PNORM:
 4458/1D5B : 79 EE                      	JNS	NORMAL			; Not done - Keep going
 4459/1D5D : 8A C5                      	MOV	AL,CH			; Number of bits shifted
 4460/1D5F : 8A D7                      	MOV	DL,BH			; Save HL in EB
 4461/1D61 : 8A EB                      	MOV	CH,BL
 4462/1D63 : 0A C0                      	OR	AL,AL			; Any shifting done?
 4463/1D65 : 74 0C                      	JZ	RONDUP			; No - Round it up
 4464/1D67 : BB 33 33                   	MOV	BX,FPEXP		; Point to exponent
 4465/1D6A : 02 07                      	ADD	AL,[BX]			; Add shifted bits
 4466/1D6C : 88 07                      	MOV	[BX],AL			; Re-save exponent
 4467/1D6E : 73 D5                      	JNC	RESZER			; Underflow - Result is zero
 4468/1D70 : 75 01                      	JNZ	RONDUP
 4469/1D72 : C3                         	RET				; Result is zero
 4470/1D73 :                            RONDUP:
 4471/1D73 : 8A C5                      	MOV	AL,CH			; Get VLSB of number
 4472/1D75 :                            RONDB:
 4473/1D75 : BB 33 33                   	MOV	BX,FPEXP		; Point to exponent
 4474/1D78 : 0A C0                      	OR	AL,AL			; Any rounding?
 4475/1D7A : 79 03                      	JNS	RONDB1
 4476/1D7C : E8 10 00                   	CALL	FPROND			; Yes - Round number up
 4477/1D7F :                            RONDB1:
 4478/1D7F : 8A 2F                      	MOV	CH,[BX]			; B = Exponent
 4479/1D81 : 9F                         	LAHF
 4480/1D82 : 43                         	INC	BX
 4481/1D83 : 9E                         	SAHF
 4482/1D84 : 8A 07                      	MOV	AL,[BX]			; Get sign of result
 4483/1D86 : 24 80                      	AND	AL,10000000B		; Only bit 7 needed
 4484/1D88 : 32 C1                      	XOR	AL,CL			; Set correct sign
 4485/1D8A : 8A C8                      	MOV	CL,AL			; Save correct sign in number
 4486/1D8C : E9 BA 02                   	JMP	FPBCDE			; Move BCDE to FPREG
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 76 - 8/7/2025 21:50:51


 4487/1D8F :                            ;
 4488/1D8F :                            FPROND:
 4489/1D8F : FE C2                      	INC	DL			; Round LSB
 4490/1D91 : 74 01                      	JZ	FPROND1
 4491/1D93 : C3                         	RET				; Return if ok
 4492/1D94 :                            FPROND1:
 4493/1D94 : FE C6                      	INC	DH			; Round NMSB
 4494/1D96 : 74 01                      	JZ	FPROND2
 4495/1D98 : C3                         	RET				; Return if ok
 4496/1D99 :                            FPROND2:
 4497/1D99 : FE C1                      	INC	CL			; Round MSB
 4498/1D9B : 74 01                      	JZ	FPROND3
 4499/1D9D : C3                         	RET				; Return if ok
 4500/1D9E :                            FPROND3:
 4501/1D9E : B1 80                      	MOV	CL,80H			; Set normal value
 4502/1DA0 : FE 07                      	INC	BYTE PTR [BX]		; Increment exponent
 4503/1DA2 : 74 01                      	JZ	FPROND4
 4504/1DA4 : C3                         	RET				; Return if ok
 4505/1DA5 :                            FPROND4:
 4506/1DA5 : E9 73 E8                   	JMP	OVERR			; Overflow error
 4507/1DA8 :                            ;
 4508/1DA8 :                            PLUCDE:
 4509/1DA8 : 8A 07                      	MOV	AL,[BX]			; Get LSB of FPREG
 4510/1DAA : 02 C2                      	ADD	AL,DL			; Add LSB of BCDE
 4511/1DAC : 8A D0                      	MOV	DL,AL			; Save LSB of BCDE
 4512/1DAE : 9F                         	LAHF
 4513/1DAF : 43                         	INC	BX
 4514/1DB0 : 9E                         	SAHF
 4515/1DB1 : 8A 07                      	MOV	AL,[BX]			; Get NMSB of FPREG
 4516/1DB3 : 12 C6                      	ADC	AL,DH			; Add NMSB of BCDE
 4517/1DB5 : 8A F0                      	MOV	DH,AL			; Save NMSB of BCDE
 4518/1DB7 : 9F                         	LAHF
 4519/1DB8 : 43                         	INC	BX
 4520/1DB9 : 9E                         	SAHF
 4521/1DBA : 8A 07                      	MOV	AL,[BX]			; Get MSB of FPREG
 4522/1DBC : 12 C1                      	ADC	AL,CL			; Add MSB of BCDE
 4523/1DBE : 8A C8                      	MOV	CL,AL			; Save MSB of BCDE
 4524/1DC0 : C3                         	RET
 4525/1DC1 :                            ;
 4526/1DC1 :                            COMPL:
 4527/1DC1 : BB 34 33                   	MOV	BX,SGNRES		; Sign of result
 4528/1DC4 : 8A 07                      	MOV	AL,[BX]			; Get sign of result
 4529/1DC6 : F6 D0                      	NOT	AL			; Negate it
 4530/1DC8 : 88 07                      	MOV	[BX],AL			; Put it back
 4531/1DCA : 32 C0                      	XOR	AL,AL
 4532/1DCC : 8A D8                      	MOV	BL,AL			; Set L to zero
 4533/1DCE : 2A C5                      	SUB	AL,CH			; Negate exponent,set carry
 4534/1DD0 : 8A E8                      	MOV	CH,AL			; Re-save exponent
 4535/1DD2 : 8A C3                      	MOV	AL,BL			; Load zero
 4536/1DD4 : 1A C2                      	SBB	AL,DL			; Negate LSB
 4537/1DD6 : 8A D0                      	MOV	DL,AL			; Re-save LSB
 4538/1DD8 : 8A C3                      	MOV	AL,BL			; Load zero
 4539/1DDA : 1A C6                      	SBB	AL,DH			; Negate NMSB
 4540/1DDC : 8A F0                      	MOV	DH,AL			; Re-save NMSB
 4541/1DDE : 8A C3                      	MOV	AL,BL			; Load zero
 4542/1DE0 : 1A C1                      	SBB	AL,CL			; Negate MSB
 4543/1DE2 : 8A C8                      	MOV	CL,AL			; Re-save MSB
 4544/1DE4 : C3                         	RET
 4545/1DE5 :                            ;
 4546/1DE5 :                            SCALE:
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 77 - 8/7/2025 21:50:51


 4547/1DE5 : B5 00                      	MOV	CH,0			; Clear underflow
 4548/1DE7 :                            SCALLP:
 4549/1DE7 : 2C 08                      	SUB	AL,8			; 8 bits (a whole byte)?
 4550/1DE9 : 72 0A                      	JC	SHRITE			; No - Shift right A bits
 4551/1DEB : 8A EA                      	MOV	CH,DL			; <- Shift
 4552/1DED : 8A D6                      	MOV	DL,DH			; <- right
 4553/1DEF : 8A F1                      	MOV	DH,CL			; <- eight
 4554/1DF1 : B1 00                      	MOV	CL,0			; <- bits
 4555/1DF3 : EB F2                      	JMP	SCALLP			; More bits to shift
 4556/1DF5 :                            ;
 4557/1DF5 :                            SHRITE:
 4558/1DF5 : 04 09                      	ADD	AL,8+1			; Adjust count
 4559/1DF7 : 8A D8                      	MOV	BL,AL			; Save bits to shift
 4560/1DF9 :                            SHRLP:
 4561/1DF9 : 32 C0                      	XOR	AL,AL			; Flag for all done
 4562/1DFB : FE CB                      	DEC	BL			; All shifting done?
 4563/1DFD : 75 01                      	JNZ	SHRLP1
 4564/1DFF : C3                         	RET				; Yes - Return
 4565/1E00 :                            SHRLP1:
 4566/1E00 : 8A C1                      	MOV	AL,CL			; Get MSB
 4567/1E02 :                            SHRT1:
 4568/1E02 : D0 D8                      	RCR	AL,1			; Shift it right
 4569/1E04 : 8A C8                      	MOV	CL,AL			; Re-save
 4570/1E06 : 8A C6                      	MOV	AL,DH			; Get NMSB
 4571/1E08 : D0 D8                      	RCR	AL,1			; Shift right with last bit
 4572/1E0A : 8A F0                      	MOV	DH,AL			; Re-save it
 4573/1E0C : 8A C2                      	MOV	AL,DL			; Get LSB
 4574/1E0E : D0 D8                      	RCR	AL,1			; Shift right with last bit
 4575/1E10 : 8A D0                      	MOV	DL,AL			; Re-save it
 4576/1E12 : 8A C5                      	MOV	AL,CH			; Get underflow
 4577/1E14 : D0 D8                      	RCR	AL,1			; Shift right with last bit
 4578/1E16 : 8A E8                      	MOV	CH,AL			; Re-save underflow
 4579/1E18 : EB DF                      	JMP	SHRLP			; More bits to do
 4580/1E1A :                            ;
 4581/1E1A :                            UNITY:
 4582/1E1A : 00 00 00 81                	DB	000H,000H,000H,081H 	; 1.00000
 4583/1E1E :                            ;
 4584/1E1E :                            LOGTAB:
 4585/1E1E : 03                         	DB	3           		; Table used by LOG
 4586/1E1F : AA 56 19 80                	DB	0AAH,056H,019H,080H	; 0.59898
 4587/1E23 : F1 22 76 80                	DB	0F1H,022H,076H,080H	; 0.96147
 4588/1E27 : 45 AA 38 82                	DB	045H,0AAH,038H,082H	; 2.88539
 4589/1E2B :                            ;
 4590/1E2B :                            LOG:
 4591/1E2B : E8 BA 01                   	CALL	TSTSGN			; Test sign of value
 4592/1E2E : 0A C0                      	OR	AL,AL
 4593/1E30 : 7B 03                      	JPO	LOG1			; ?FC Error if <= zero	JP PE,FCERR
 4594/1E32 : E9 D5 EE                   	JMP	FCERR
 4595/1E35 :                            LOG1:
 4596/1E35 : BB 33 33                   	MOV	BX,FPEXP		; Point to exponent
 4597/1E38 : 8A 07                      	MOV	AL,[BX]			; Get exponent
 4598/1E3A : B9 35 80                   	MOV	CX,8035H		; BCDE = SQR(1/2)
 4599/1E3D : BA F3 04                   	MOV	DX,04F3H
 4600/1E40 : 2A C5                      	SUB	AL,CH			; Scale value to be < 1
 4601/1E42 : 9F                         	LAHF
 4602/1E43 : 86 E0                      	XCHG	AH,AL
 4603/1E45 : 50                         	PUSH	AX			; Save scale factor
 4604/1E46 : 86 E0                      	XCHG	AH,AL
 4605/1E48 : 88 2F                      	MOV	[BX],CH			; Save new exponent
 4606/1E4A : 52                         	PUSH	DX			; Save SQR(1/2)
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 78 - 8/7/2025 21:50:51


 4607/1E4B : 51                         	PUSH	CX
 4608/1E4C : E8 59 FE                   	CALL	FPADD			; Add SQR(1/2) to value
 4609/1E4F : 59                         	POP	CX			; Restore SQR(1/2)
 4610/1E50 : 5A                         	POP	DX
 4611/1E51 : FE C5                      	INC	CH			; Make it SQR(2)
 4612/1E53 : E8 A5 00                   	CALL	DVBCDE			; Divide by SQR(2)
 4613/1E56 : BB 1A 1E                   	MOV	BX,UNITY		; Point to 1.
 4614/1E59 : E8 42 FE                   	CALL	SUBPHL			; Subtract FPREG from 1
 4615/1E5C : BB 1E 1E                   	MOV	BX,LOGTAB		; Coefficient table
 4616/1E5F : E8 25 06                   	CALL	SUMSER			; Evaluate sum of series
 4617/1E62 : B9 80 80                   	MOV	CX,8080H		; BCDE = -0.5
 4618/1E65 : BA 00 00                   	MOV	DX,0000H
 4619/1E68 : E8 3D FE                   	CALL	FPADD			; Subtract 0.5 from FPREG
 4620/1E6B : 58                         	POP	AX			; Restore scale factor
 4621/1E6C : 86 E0                      	XCHG	AH,AL
 4622/1E6E : 9E                         	SAHF
 4623/1E6F : E8 B5 03                   	CALL	RSCALE			; Re-scale number
 4624/1E72 :                            MULLN2:
 4625/1E72 : B9 31 80                   	MOV	CX,8031H		; BCDE = Ln(2)
 4626/1E75 : BA 18 72                   	MOV	DX,7218H
 4627/1E78 : EB 02                      	JMP	FPMULT			; Skip "POP CX" and "POP DX"
 4628/1E7A :                            ;
 4629/1E7A :                            MULT:
 4630/1E7A : 59                         	POP	CX			; Get number from stack
 4631/1E7B : 5A                         	POP	DX
 4632/1E7C :                            FPMULT:
 4633/1E7C : E8 69 01                   	CALL	TSTSGN			; Test sign of FPREG
 4634/1E7F : 75 01                      	JNZ	FPMULT1
 4635/1E81 : C3                         	RET				; Return zero if zero
 4636/1E82 :                            FPMULT1:
 4637/1E82 : B3 00                      	MOV	BL,0			; Flag add exponents
 4638/1E84 : E8 04 01                   	CALL	ADDEXP			; Add exponents
 4639/1E87 : 8A C1                      	MOV	AL,CL			; Get MSB of multiplier
 4640/1E89 : A2 42 33                   	MOV	[MULVAL],AL		; Save MSB of multiplier
 4641/1E8C : 87 DA                      	XCHG	BX,DX
 4642/1E8E : 89 1E 43 33                	MOV	[MULVAL+1],BX		; Save rest of multiplier
 4643/1E92 : B9 00 00                   	MOV	CX,0			; Partial product (BCDE) = zero
 4644/1E95 : 8A F5                      	MOV	DH,CH
 4645/1E97 : 8A D5                      	MOV	DL,CH
 4646/1E99 : BB 27 1D                   	MOV	BX,BNORM		; Address of normalise
 4647/1E9C : 53                         	PUSH	BX			; Save for return
 4648/1E9D : BB A5 1E                   	MOV	BX,MULT8		; Address of 8 bit multiply
 4649/1EA0 : 53                         	PUSH	BX			; Save for NMSB,MSB
 4650/1EA1 : 53                         	PUSH	BX			;
 4651/1EA2 : BB 30 33                   	MOV	BX,FPREG		; Point to number
 4652/1EA5 :                            MULT8:
 4653/1EA5 : 8A 07                      	MOV	AL,[BX]			; Get LSB of number
 4654/1EA7 :                            ;	LAHF
 4655/1EA7 : 43                         	INC	BX			; Point to NMSB
 4656/1EA8 :                            ;	SAHF
 4657/1EA8 : 0A C0                      	OR	AL,AL           	; Test LSB
 4658/1EAA : 74 38                      	JZ	BYTSFT			; Zero - shift to next byte
 4659/1EAC : 53                         	PUSH	BX			; Save address of number
 4660/1EAD : B3 08                      	MOV	BL,8			; 8 bits to multiply by
 4661/1EAF :                            MUL8LP:
 4662/1EAF : D0 D8                      	RCR	AL,1			; Shift LSB right
 4663/1EB1 : 8A F8                      	MOV	BH,AL			; Save LSB
 4664/1EB3 : 8A C1                      	MOV	AL,CL			; Get MSB
 4665/1EB5 : 73 0F                      	JNC	NOMADD			; Bit was zero - Don't add
 4666/1EB7 : 53                         	PUSH	BX			; Save LSB and count
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 79 - 8/7/2025 21:50:51


 4667/1EB8 : 8B 1E 43 33                	MOV	BX,[MULVAL+1]		; Get LSB and NMSB
 4668/1EBC : 03 DA                      	ADD	BX,DX			; Add NMSB and LSB
 4669/1EBE : 87 DA                      	XCHG	BX,DX			; Leave sum in DE
 4670/1EC0 : 5B                         	POP	BX			; Restore MSB and count
 4671/1EC1 : A0 42 33                   	MOV	AL,[MULVAL]		; Get MSB of multiplier
 4672/1EC4 : 12 C1                      	ADC	AL,CL			; Add MSB
 4673/1EC6 :                            NOMADD:
 4674/1EC6 : D0 D8                      	RCR	AL,1			; Shift MSB right
 4675/1EC8 : 8A C8                      	MOV	CL,AL			; Re-save MSB
 4676/1ECA : 8A C6                      	MOV	AL,DH			; Get NMSB
 4677/1ECC : D0 D8                      	RCR	AL,1			; Shift NMSB right
 4678/1ECE : 8A F0                      	MOV	DH,AL			; Re-save NMSB
 4679/1ED0 : 8A C2                      	MOV	AL,DL			; Get LSB
 4680/1ED2 : D0 D8                      	RCR	AL,1			; Shift LSB right
 4681/1ED4 : 8A D0                      	MOV	DL,AL			; Re-save LSB
 4682/1ED6 : 8A C5                      	MOV	AL,CH			; Get VLSB
 4683/1ED8 : D0 D8                      	RCR	AL,1			; Shift VLSB right
 4684/1EDA : 8A E8                      	MOV	CH,AL			; Re-save VLSB
 4685/1EDC : FE CB                      	DEC	BL			; Count bits multiplied
 4686/1EDE : 8A C7                      	MOV	AL,BH			; Get LSB of multiplier
 4687/1EE0 : 75 CD                      	JNZ	MUL8LP			; More - Do it
 4688/1EE2 :                            POPHRT:
 4689/1EE2 : 5B                         	POP	BX			; Restore address of number
 4690/1EE3 : C3                         	RET
 4691/1EE4 :                            ;
 4692/1EE4 :                            BYTSFT:
 4693/1EE4 : 8A EA                      	MOV	CH,DL			; Shift partial product left
 4694/1EE6 : 8A D6                      	MOV	DL,DH
 4695/1EE8 : 8A F1                      	MOV	DH,CL
 4696/1EEA : 8A C8                      	MOV	CL,AL
 4697/1EEC : C3                         	RET
 4698/1EED :                            ;
 4699/1EED :                            DIV10:
 4700/1EED : E8 3D 01                   	CALL	STAKFP			; Save FPREG on stack
 4701/1EF0 : B9 20 84                   	MOV	CX,8420H		; BCDE = 10.
 4702/1EF3 : BA 00 00                   	MOV	DX,0000H
 4703/1EF6 : E8 50 01                   	CALL	FPBCDE			; Move 10 to FPREG
 4704/1EF9 :                            ;
 4705/1EF9 :                            DIV:
 4706/1EF9 : 59                         	POP	CX			; Get number from stack
 4707/1EFA : 5A                         	POP	DX
 4708/1EFB :                            DVBCDE:
 4709/1EFB : E8 EA 00                   	CALL	TSTSGN			; Test sign of FPREG
 4710/1EFE : 75 03                      	JNZ	DVBCDE1
 4711/1F00 : E9 08 E7                   	JMP	DZERR			; Error if division by zero
 4712/1F03 :                            DVBCDE1:
 4713/1F03 : B3 FF                      	MOV	BL,-1			; Flag subtract exponents
 4714/1F05 : E8 83 00                   	CALL	ADDEXP			; Subtract exponents
 4715/1F08 : FE 07                      	INC	BYTE PTR [BX]		; Add 2 to exponent to adjust
 4716/1F0A : FE 07                      	INC	BYTE PTR [BX]
 4717/1F0C :                            ;	LAHF
 4718/1F0C : 4B                         	DEC	BX			; Point to MSB
 4719/1F0D :                            ;	SAHF
 4720/1F0D : 8A 07                      	MOV	AL,[BX]			; Get MSB of dividend
 4721/1F0F : A2 27 05                   	MOV	[DIV3],AL		; Save for subtraction
 4722/1F12 :                            ;	LAHF
 4723/1F12 : 4B                         	DEC	BX
 4724/1F13 :                            ;	SAHF
 4725/1F13 : 8A 07                      	MOV	AL,[BX]			; Get NMSB of dividend
 4726/1F15 : A2 21 05                   	MOV	[DIV2],AL		; Save for subtraction
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 80 - 8/7/2025 21:50:51


 4727/1F18 :                            ;	LAHF
 4728/1F18 : 4B                         	DEC	BX
 4729/1F19 :                            ;	SAHF
 4730/1F19 : 8A 07                      	MOV	AL,[BX]			; Get MSB of dividend
 4731/1F1B : A2 1B 05                   	MOV	[DIV1],AL		; Save for subtraction
 4732/1F1E : 8A E9                      	MOV	CH,CL			; Get MSB
 4733/1F20 : 87 DA                      	XCHG	BX,DX			; NMSB,LSB to HL
 4734/1F22 : 32 C0                      	XOR	AL,AL
 4735/1F24 : 8A C8                      	MOV	CL,AL			; Clear MSB of quotient
 4736/1F26 : 8A F0                      	MOV	DH,AL			; Clear NMSB of quotient
 4737/1F28 : 8A D0                      	MOV	DL,AL			; Clear LSB of quotient
 4738/1F2A : A2 2B 05                   	MOV	[DIV4],AL		; Clear overflow count
 4739/1F2D :                            DIVLP:
 4740/1F2D : 53                         	PUSH	BX			; Save divisor
 4741/1F2E : 51                         	PUSH	CX
 4742/1F2F : 8A C3                      	MOV	AL,BL			; Get LSB of number
 4743/1F31 : E8 E6 E5                   	CALL	DIVSUP			; Subt' divisor from dividend
 4744/1F34 : 1C 00                      	SBB	AL,0			; Count for overflows
 4745/1F36 : F5                         	CMC
 4746/1F37 : 73 0B                      	JNC	RESDIV			; Restore divisor if borrow
 4747/1F39 : A2 2B 05                   	MOV	[DIV4],AL		; Re-save overflow count
 4748/1F3C : 58                         	POP	AX			; Scrap divisor
 4749/1F3D :                            ;	XCHG	AH,AL
 4750/1F3D :                            ;	SAHF
 4751/1F3D : 58                         	POP	AX
 4752/1F3E : 86 E0                      	XCHG	AH,AL
 4753/1F40 : 9E                         	SAHF
 4754/1F41 : F9                         	STC				; Set carry to
 4755/1F42 : EB 02                      	JMP	RESDIV1			; Skip "POP CX" and "POP BX"
 4756/1F44 :                            ;
 4757/1F44 :                            RESDIV:
 4758/1F44 : 59                         	POP	CX			; Restore divisor
 4759/1F45 : 5B                         	POP	BX
 4760/1F46 :                            RESDIV1:
 4761/1F46 : 8A C1                      	MOV	AL,CL			; Get MSB of quotient
 4762/1F48 : FE C0                      	INC	AL
 4763/1F4A : FE C8                      	DEC	AL
 4764/1F4C : D0 D8                      	RCR	AL,1			; Bit 0 to bit 7
 4765/1F4E : 79 03                      	JNS	RESDIV2
 4766/1F50 : E9 22 FE                   	JMP	RONDB			; Done - Normalise result
 4767/1F53 :                            RESDIV2:
 4768/1F53 : D0 D0                      	RCL	AL,1			; Restore carry
 4769/1F55 : 8A C2                      	MOV	AL,DL			; Get LSB of quotient
 4770/1F57 : D0 D0                      	RCL	AL,1			; Double it
 4771/1F59 : 8A D0                      	MOV	DL,AL			; Put it back
 4772/1F5B : 8A C6                      	MOV	AL,DH			; Get NMSB of quotient
 4773/1F5D : D0 D0                      	RCL	AL,1			; Double it
 4774/1F5F : 8A F0                      	MOV	DH,AL			; Put it back
 4775/1F61 : 8A C1                      	MOV	AL,CL			; Get MSB of quotient
 4776/1F63 : D0 D0                      	RCL	AL,1			; Double it
 4777/1F65 : 8A C8                      	MOV	CL,AL			; Put it back
 4778/1F67 : 03 DB                      	ADD	BX,BX			; Double NMSB,LSB of divisor
 4779/1F69 : 8A C5                      	MOV	AL,CH			; Get MSB of divisor
 4780/1F6B : D0 D0                      	RCL	AL,1			; Double it
 4781/1F6D : 8A E8                      	MOV	CH,AL			; Put it back
 4782/1F6F : A0 2B 05                   	MOV	AL,[DIV4]		; Get VLSB of quotient
 4783/1F72 : D0 D0                      	RCL	AL,1			; Double it
 4784/1F74 : A2 2B 05                   	MOV	[DIV4],AL		; Put it back
 4785/1F77 : 8A C1                      	MOV	AL,CL			; Get MSB of quotient
 4786/1F79 : 0A C6                      	OR	AL,DH			; Merge NMSB
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 81 - 8/7/2025 21:50:51


 4787/1F7B : 0A C2                      	OR	AL,DL			; Merge LSB
 4788/1F7D : 75 AE                      	JNZ	DIVLP			; Not done - Keep dividing
 4789/1F7F : 53                         	PUSH	BX			; Save divisor
 4790/1F80 : BB 33 33                   	MOV	BX,FPEXP		; Point to exponent
 4791/1F83 : FE 0F                      	DEC	BYTE PTR [BX]		; Divide by 2
 4792/1F85 : 5B                         	POP	BX			; Restore divisor
 4793/1F86 : 75 A5                      	JNZ	DIVLP			; Ok - Keep going
 4794/1F88 : E9 90 E6                   	JMP	OVERR			; Overflow error
 4795/1F8B :                            ;
 4796/1F8B :                            ADDEXP:
 4797/1F8B : 8A C5                      	MOV	AL,CH			; Get exponent of dividend
 4798/1F8D : 0A C0                      	OR	AL,AL			; Test it
 4799/1F8F : 74 2D                      	JZ	OVTST3			; Zero - Result zero
 4800/1F91 : 8A C3                      	MOV	AL,BL			; Get add/subtract flag
 4801/1F93 : BB 33 33                   	MOV	BX,FPEXP		; Point to exponent
 4802/1F96 : 32 07                      	XOR	AL,[BX]			; Add or subtract it
 4803/1F98 : 02 C5                      	ADD	AL,CH			; Add the other exponent
 4804/1F9A : 8A E8                      	MOV	CH,AL			; Save new exponent
 4805/1F9C : D0 D8                      	RCR	AL,1			; Test exponent for overflow
 4806/1F9E : 32 C5                      	XOR	AL,CH
 4807/1FA0 : 8A C5                      	MOV	AL,CH			; Get exponent
 4808/1FA2 : 79 18                      	JNS	OVTST2			; Positive - Test for overflow
 4809/1FA4 : 04 80                      	ADD	AL,80H			; Add excess 128
 4810/1FA6 : 88 07                      	MOV	[BX],AL			; Save new exponent
 4811/1FA8 : 75 03                      	JNZ	ADDEXP1			; Zero - Result zero
 4812/1FAA : E9 35 FF                   	JMP	POPHRT
 4813/1FAD :                            ADDEXP1:
 4814/1FAD : E8 D0 00                   	CALL	SIGNS			; Set MSBs and sign of result
 4815/1FB0 : 88 07                      	MOV	[BX],AL			; Save new exponent
 4816/1FB2 : 9F                         	LAHF
 4817/1FB3 : 4B                         	DEC	BX			; Point to MSB
 4818/1FB4 : 9E                         	SAHF
 4819/1FB5 : C3                         	RET
 4820/1FB6 :                            ;
 4821/1FB6 :                            OVTST1:
 4822/1FB6 : E8 2F 00                   	CALL	TSTSGN			; Test sign of FPREG
 4823/1FB9 : F6 D0                      	NOT	AL			; Invert sign
 4824/1FBB : 5B                         	POP	BX			; Clean up stack
 4825/1FBC :                            OVTST2:
 4826/1FBC : 0A C0                      	OR	AL,AL			; Test if new exponent zero
 4827/1FBE :                            OVTST3:
 4828/1FBE : 5B                         	POP	BX			; Clear off return addr
 4829/1FBF : 78 03                      	JS	OVTST4			; Result zero
 4830/1FC1 : E9 81 FD                   	JMP	RESZER
 4831/1FC4 :                            OVTST4:
 4832/1FC4 : E9 54 E6                   	JMP	OVERR			; Overflow error
 4833/1FC7 :                            ;
 4834/1FC7 :                            MLSP10:
 4835/1FC7 : E8 8E 00                   	CALL	BCDEFP			; Move FPREG to BCDE
 4836/1FCA : 8A C5                      	MOV	AL,CH			; Get exponent
 4837/1FCC : 0A C0                      	OR	AL,AL			; Is it zero?
 4838/1FCE : 75 01                      	JNZ	MLSP101
 4839/1FD0 : C3                         	RET				; Yes - Result is zero
 4840/1FD1 :                            MLSP101:
 4841/1FD1 : 04 02                      	ADD	AL,2			; Multiply by 4
 4842/1FD3 : 73 03                      	JNC	MLSP102
 4843/1FD5 : E9 43 E6                   	JMP	OVERR			; Overflow - ?OV Error
 4844/1FD8 :                            MLSP102:
 4845/1FD8 : 8A E8                      	MOV	CH,AL			; Re-save exponent
 4846/1FDA : E8 CB FC                   	CALL	FPADD			; Add BCDE to FPREG (Time 5)
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 82 - 8/7/2025 21:50:51


 4847/1FDD : BB 33 33                   	MOV	BX,FPEXP		; Point to exponent
 4848/1FE0 : FE 07                      	INC	BYTE PTR [BX]		; Double number (Times 10)
 4849/1FE2 : 74 01                      	JZ	MLSP103
 4850/1FE4 : C3                         	RET				; Ok - Return
 4851/1FE5 :                            MLSP103:
 4852/1FE5 : E9 33 E6                   	JMP	OVERR			; Overflow error
 4853/1FE8 :                            ;
 4854/1FE8 :                            ; Z flag
 4855/1FE8 :                            ;
 4856/1FE8 :                            TSTSGN:
 4857/1FE8 : A0 33 33                   	MOV	AL,[FPEXP]		; Get sign of FPREG
 4858/1FEB : 0A C0                      	OR	AL,AL
 4859/1FED : 75 01                      	JNZ	TSTSGN1
 4860/1FEF : C3                         	RET				; RETurn if number is zero
 4861/1FF0 :                            TSTSGN1:
 4862/1FF0 : A0 32 33                   	MOV	AL,[FPREG+2]		; Get MSB of FPREG
 4863/1FF3 : 3C 2F                      	CMP	AL,02FH
 4864/1FF5 : EB 02                      	JMP	RETREL1
 4865/1FF7 :                            RETREL:
 4866/1FF7 : F6 D0                      	NOT	AL			; Invert sign
 4867/1FF9 :                            RETREL1:
 4868/1FF9 : D0 D0                      	RCL	AL,1			; Sign bit to carry
 4869/1FFB :                            FLGDIF:
 4870/1FFB : 1A C0                      	SBB	AL,AL			; Carry to all bits of A
 4871/1FFD : 74 01                      	JZ	FLGDIF1
 4872/1FFF : C3                         	RET				; Return -1 if negative
 4873/2000 :                            FLGDIF1:
 4874/2000 : FE C0                      	INC	AL			; Bump to +1
 4875/2002 : C3                         	RET				; Positive - Return +1
 4876/2003 :                            ;
 4877/2003 :                            SGN:
 4878/2003 : E8 E2 FF                   	CALL	TSTSGN			; Test sign of FPREG
 4879/2006 :                            FLGREL:
 4880/2006 : B5 88                      	MOV	CH,80H+8		; 8 bit integer in exponent
 4881/2008 : BA 00 00                   	MOV	DX,0			; Zero NMSB and LSB
 4882/200B :                            RETINT:
 4883/200B : BB 33 33                   	MOV	BX,FPEXP		; Point to exponent
 4884/200E : 8A C8                      	MOV	CL,AL			; CDE = MSB,NMSB and LSB
 4885/2010 : 88 2F                      	MOV	[BX],CH			; Save exponent
 4886/2012 : B5 00                      	MOV	CH,0			; CDE = integer to normalise
 4887/2014 :                            ;	LAHF
 4888/2014 : 43                         	INC	BX			; Point to sign of result
 4889/2015 :                            ;	SAHF
 4890/2015 : C6 07 80                   	MOV	BYTE PTR [BX],80H	; Set sign of result
 4891/2018 : D0 D0                      	RCL	AL,1			; Carry = sign of integer
 4892/201A : E9 05 FD                   	JMP	CONPOS			; Set sign of result
 4893/201D :                            ;
 4894/201D :                            ABS:
 4895/201D : E8 C8 FF                   	CALL	TSTSGN			; Test sign of FPREG
 4896/2020 : 78 01                      	JS	INVSGN
 4897/2022 : C3                         	RET				; Return if positive
 4898/2023 :                            INVSGN:
 4899/2023 : BB 32 33                   	MOV	BX,FPREG+2		; Point to MSB
 4900/2026 : 8A 07                      	MOV	AL,[BX]			; Get sign of mantissa
 4901/2028 : 34 80                      	XOR	AL,80H			; Invert sign of mantissa
 4902/202A : 88 07                      	MOV	[BX],AL			; Re-save sign of mantissa
 4903/202C : C3                         	RET
 4904/202D :                            ;
 4905/202D :                            STAKFP:
 4906/202D : 87 DA                      	XCHG	BX,DX			; Save code string address
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 83 - 8/7/2025 21:50:51


 4907/202F : 8B 1E 30 33                	MOV	BX,[FPREG]		; LSB,NLSB of FPREG
 4908/2033 : 8B EC                      	MOV	BP,SP
 4909/2035 : 87 5E 00                   	XCHG	[BP],BX			; Stack them,get return
 4910/2038 : 53                         	PUSH	BX			; Re-save return
 4911/2039 : 8B 1E 32 33                	MOV	BX,[FPREG+2]		; MSB and exponent of FPREG
 4912/203D : 8B EC                      	MOV	BP,SP
 4913/203F : 87 5E 00                   	XCHG	[BP],BX			; Stack them,get return
 4914/2042 : 53                         	PUSH	BX			; Re-save return
 4915/2043 : 87 DA                      	XCHG	BX,DX			; Restore code string address
 4916/2045 : C3                         	RET
 4917/2046 :                            ;
 4918/2046 :                            PHLTFP:
 4919/2046 : E8 12 00                   	CALL	LOADFP			; Number at HL to BCDE
 4920/2049 :                            FPBCDE:
 4921/2049 : 87 DA                      	XCHG	BX,DX			; Save code string address
 4922/204B : 89 1E 30 33                	MOV	[FPREG],BX		; Save LSB,NLSB of number
 4923/204F : 8B D9                      	MOV	BX,CX			; Exponent of number
 4924/2051 : 89 1E 32 33                	MOV	[FPREG+2],BX		; Save MSB and exponent
 4925/2055 : 87 DA                      	XCHG	BX,DX			; Restore code string address
 4926/2057 : C3                         	RET
 4927/2058 :                            ;
 4928/2058 :                            BCDEFP:
 4929/2058 : BB 30 33                   	MOV	BX,FPREG		; Point to FPREG
 4930/205B :                            LOADFP:
 4931/205B : 8A 17                      	MOV	DL,[BX]			; Get LSB of number
 4932/205D : 9F                         	LAHF
 4933/205E : 43                         	INC	BX
 4934/205F :                            ;	SAHF
 4935/205F : 8A 37                      	MOV	DH,[BX]			; Get NMSB of number
 4936/2061 :                            ;	LAHF
 4937/2061 : 43                         	INC	BX
 4938/2062 :                            ;	SAHF
 4939/2062 : 8A 0F                      	MOV	CL,[BX]			; Get MSB of number
 4940/2064 :                            ;	LAHF
 4941/2064 : 43                         	INC	BX
 4942/2065 : 9E                         	SAHF
 4943/2066 : 8A 2F                      	MOV	CH,[BX]			; Get exponent of number
 4944/2068 :                            INCHL:
 4945/2068 : 9F                         	LAHF
 4946/2069 : 43                         	INC	BX			; Used for conditional "INC HL"
 4947/206A : 9E                         	SAHF
 4948/206B : C3                         	RET
 4949/206C :                            ;
 4950/206C :                            FPTHL:
 4951/206C : BA 30 33                   	MOV	DX,FPREG		; Point to FPREG
 4952/206F :                            DETHL4:
 4953/206F : B5 04                      	MOV	CH,4			; 4 bytes to move
 4954/2071 :                            DETHLB:
 4955/2071 : 87 DA                      	XCHG	BX,DX
 4956/2073 : 8A 07                      	MOV	AL,[BX]			; Get source
 4957/2075 : 87 DA                      	XCHG	BX,DX
 4958/2077 : 88 07                      	MOV	[BX],AL			; Save destination
 4959/2079 :                            ;	LAHF
 4960/2079 : 42                         	INC	DX			; Next source
 4961/207A :                            ;	SAHF
 4962/207A :                            ;	LAHF
 4963/207A : 43                         	INC	BX			; Next destination
 4964/207B :                            ;	SAHF
 4965/207B : FE CD                      	DEC	CH			; Count bytes
 4966/207D : 75 F2                      	JNZ	DETHLB			; Loop if more
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 84 - 8/7/2025 21:50:51


 4967/207F : C3                         	RET
 4968/2080 :                            ;
 4969/2080 :                            SIGNS:
 4970/2080 : BB 32 33                   	MOV	BX,FPREG+2		; Point to MSB of FPREG
 4971/2083 : 8A 07                      	MOV	AL,[BX]			; Get MSB
 4972/2085 : D0 C0                      	ROL	AL,1			; Old sign to carry
 4973/2087 : F9                         	STC				; Set MSBit
 4974/2088 : D0 D8                      	RCR	AL,1			; Set MSBit of MSB
 4975/208A : 88 07                      	MOV	[BX],AL			; Save new MSB
 4976/208C : F5                         	CMC				; Complement sign
 4977/208D : D0 D8                      	RCR	AL,1			; Old sign to carry
 4978/208F : 9F                         	LAHF
 4979/2090 : 43                         	INC	BX
 4980/2091 :                            ;	SAHF
 4981/2091 :                            ;	LAHF
 4982/2091 : 43                         	INC	BX
 4983/2092 : 9E                         	SAHF
 4984/2093 : 88 07                      	MOV	[BX],AL			; Set sign of result
 4985/2095 : 8A C1                      	MOV	AL,CL			; Get MSB
 4986/2097 : D0 C0                      	ROL	AL,1			; Old sign to carry
 4987/2099 : F9                         	STC				; Set MSBit
 4988/209A : D0 D8                      	RCR	AL,1			; Set MSBit of MSB
 4989/209C : 8A C8                      	MOV	CL,AL			; Save MSB
 4990/209E : D0 D8                      	RCR	AL,1
 4991/20A0 : 32 07                      	XOR	AL,[BX]			; New sign of result
 4992/20A2 : C3                         	RET
 4993/20A3 :                            ;
 4994/20A3 :                            CMPNUM:
 4995/20A3 : 8A C5                      	MOV	AL,CH			; Get exponent of numbe
 4996/20A5 : 0A C0                      	OR	AL,AL
 4997/20A7 : 75 03                      	JNZ	CMPNUM1			; Zero - Test sign of FPREG
 4998/20A9 : E9 3C FF                   	JMP	TSTSGN
 4999/20AC :                            CMPNUM1:
 5000/20AC : BB F7 1F                   	MOV	BX,RETREL		; Return relation routine
 5001/20AF : 53                         	PUSH	BX			; Save for return
 5002/20B0 : E8 35 FF                   	CALL	TSTSGN			; Test sign of FPREG
 5003/20B3 : 8A C1                      	MOV	AL,CL			; Get MSB of number
 5004/20B5 : 75 01                      	JNZ	CMPNUM2
 5005/20B7 : C3                         	RET				; FPREG zero - Number's MSB
 5006/20B8 :                            CMPNUM2:
 5007/20B8 : BB 32 33                   	MOV	BX,FPREG+2		; MSB of FPREG
 5008/20BB : 32 07                      	XOR	AL,[BX]			; Combine signs
 5009/20BD : 8A C1                      	MOV	AL,CL			; Get MSB of number
 5010/20BF : 79 01                      	JNS	CMPNUM3
 5011/20C1 : C3                         	RET				; Exit if signs different
 5012/20C2 :                            CMPNUM3:
 5013/20C2 : E8 05 00                   	CALL	CMPFP			; Compare FP numbers
 5014/20C5 : D0 D8                      	RCR	AL,1			; Get carry to sign
 5015/20C7 : 32 C1                      	XOR	AL,CL			; Combine with MSB of number
 5016/20C9 : C3                         	RET
 5017/20CA :                            ;
 5018/20CA :                            CMPFP:
 5019/20CA : 9F                         	LAHF
 5020/20CB : 43                         	INC	BX			; Point to exponent
 5021/20CC : 9E                         	SAHF
 5022/20CD : 8A C5                      	MOV	AL,CH			; Get exponent
 5023/20CF : 3A 07                      	CMP	AL,[BX]			; Compare exponents
 5024/20D1 : 74 01                      	JZ	CMPFP1
 5025/20D3 : C3                         	RET				; Different
 5026/20D4 :                            CMPFP1:
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 85 - 8/7/2025 21:50:51


 5027/20D4 : 9F                         	LAHF
 5028/20D5 : 4B                         	DEC	BX			; Point to MBS
 5029/20D6 : 9E                         	SAHF
 5030/20D7 : 8A C1                      	MOV	AL,CL			; Get MSB
 5031/20D9 : 3A 07                      	CMP	AL,[BX]			; Compare MSBs
 5032/20DB : 74 01                      	JZ	CMPFP2
 5033/20DD : C3                         	RET				; Different
 5034/20DE :                            CMPFP2:
 5035/20DE : 9F                         	LAHF
 5036/20DF : 4B                         	DEC	BX			; Point to NMSB
 5037/20E0 : 9E                         	SAHF
 5038/20E1 : 8A C6                      	MOV	AL,DH			; Get NMSB
 5039/20E3 : 3A 07                      	CMP	AL,[BX]			; Compare NMSBs
 5040/20E5 : 74 01                      	JZ	CMPFP3
 5041/20E7 : C3                         	RET				; Different
 5042/20E8 :                            CMPFP3:
 5043/20E8 : 9F                         	LAHF
 5044/20E9 : 4B                         	DEC	BX			; Point to LSB
 5045/20EA : 9E                         	SAHF
 5046/20EB : 8A C2                      	MOV	AL,DL			; Get LSB
 5047/20ED : 2A 07                      	SUB	AL,[BX]			; Compare LSBs
 5048/20EF : 74 01                      	JZ	CMPFP4
 5049/20F1 : C3                         	RET				; Different
 5050/20F2 :                            CMPFP4:
 5051/20F2 : 5B                         	POP	BX			; Drop RETurn
 5052/20F3 : 5B                         	POP	BX			; Drop another RETurn
 5053/20F4 : C3                         	RET
 5054/20F5 :                            ;
 5055/20F5 :                            FPINT:
 5056/20F5 : 8A E8                      	MOV	CH,AL			; <- Move
 5057/20F7 : 8A C8                      	MOV	CL,AL			; <- exponent
 5058/20F9 : 8A F0                      	MOV	DH,AL			; <- to all
 5059/20FB : 8A D0                      	MOV	DL,AL			; <- bits
 5060/20FD : 0A C0                      	OR	AL,AL			; Test exponent
 5061/20FF : 75 01                      	JNZ	FPINT1
 5062/2101 : C3                         	RET				; Zero - Return zero
 5063/2102 :                            FPINT1:
 5064/2102 : 53                         	PUSH	BX			; Save pointer to number
 5065/2103 : E8 52 FF                   	CALL	BCDEFP			; Move FPREG to BCDE
 5066/2106 : E8 77 FF                   	CALL	SIGNS			; Set MSBs & sign of result
 5067/2109 : 32 07                      	XOR	AL,[BX]			; Combine with sign of FPREG
 5068/210B : 8A F8                      	MOV	BH,AL			; Save combined signs
 5069/210D : 79 03                      	JNS	FPINT2
 5070/210F : E8 19 00                   	CALL	DCBCDE			; Negative - Decrement BCDE
 5071/2112 :                            FPINT2:
 5072/2112 : B0 98                      	MOV	AL,80H+24		; 24 bits
 5073/2114 : 2A C5                      	SUB	AL,CH			; Bits to shift
 5074/2116 : E8 CC FC                   	CALL	SCALE			; Shift BCDE
 5075/2119 : 8A C7                      	MOV	AL,BH			; Get combined sign
 5076/211B : D0 D0                      	RCL	AL,1			; Sign to carry
 5077/211D : 73 03                      	JNC	FPINT3
 5078/211F : E8 6D FC                   	CALL	FPROND			; Negative - Round number up
 5079/2122 :                            FPINT3:
 5080/2122 : B5 00                      	MOV	CH,0			; Zero exponent
 5081/2124 : 73 03                      	JNC	FPINT4
 5082/2126 : E8 98 FC                   	CALL    COMPL			; If negative make positive
 5083/2129 :                            FPINT4:
 5084/2129 : 5B                         	POP	BX			; Restore pointer to number
 5085/212A : C3                         	RET
 5086/212B :                            ;
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 86 - 8/7/2025 21:50:51


 5087/212B :                            DCBCDE:
 5088/212B :                            ;	LAHF
 5089/212B : 4A                         	DEC	DX			; Decrement BCDE
 5090/212C :                            ;	SAHF
 5091/212C : 8A C6                      	MOV	AL,DH			; Test LSBs
 5092/212E : 22 C2                      	AND	AL,DL
 5093/2130 : FE C0                      	INC	AL
 5094/2132 : 74 01                      	JZ	DCBCDE1
 5095/2134 : C3                         	RET				; Exit if LSBs not FFFF
 5096/2135 :                            DCBCDE1:
 5097/2135 : 9F                         	LAHF
 5098/2136 : 49                         	DEC	CX			; Decrement MSBs
 5099/2137 : 9E                         	SAHF
 5100/2138 : C3                         	RET
 5101/2139 :                            ;
 5102/2139 :                            INT:
 5103/2139 : BB 33 33                   	MOV	BX,FPEXP		; Point to exponent
 5104/213C : 8A 07                      	MOV	AL,[BX]			; Get exponent
 5105/213E : 3C 98                      	CMP	AL,80H+24		; Integer accuracy only?
 5106/2140 : A0 30 33                   	MOV	AL,[FPREG]		; Get LSB
 5107/2143 : 72 01                      	JC	INT1
 5108/2145 : C3                         	RET				; Yes - Already integer
 5109/2146 :                            INT1:
 5110/2146 : 8A 07                      	MOV	AL,[BX]			; Get exponent
 5111/2148 : E8 AA FF                   	CALL	FPINT			; F.P to integer
 5112/214B : C6 07 98                   	MOV	BYTE PTR [BX],80H+24	; Save 24 bit integer
 5113/214E : 8A C2                      	MOV	AL,DL			; Get LSB of number
 5114/2150 : 9F                         	LAHF
 5115/2151 : 86 E0                      	XCHG	AH,AL
 5116/2153 : 50                         	PUSH	AX			; Save LSB
 5117/2154 : 86 E0                      	XCHG	AH,AL
 5118/2156 : 8A C1                      	MOV	AL,CL			; Get MSB of number
 5119/2158 : D0 D0                      	RCL	AL,1			; Sign to carry
 5120/215A : E8 C5 FB                   	CALL	CONPOS			; Set sign of result
 5121/215D : 58                         	POP	AX			; Restore LSB of number
 5122/215E : 86 E0                      	XCHG	AH,AL
 5123/2160 : 9E                         	SAHF
 5124/2161 : C3                         	RET
 5125/2162 :                            ;
 5126/2162 :                            MLDEBC:
 5127/2162 : BB 00 00                   	MOV	BX,0			; Clear partial product
 5128/2165 : 8A C5                      	MOV	AL,CH			; Test multiplier
 5129/2167 : 0A C1                      	OR	AL,CL
 5130/2169 : 75 01                      	JNZ	MLDEBC1
 5131/216B : C3                         	RET				; Return zero if zero
 5132/216C :                            MLDEBC1:
 5133/216C : B0 10                      	MOV	AL,16			; 16 bits
 5134/216E :                            MLDBLP:
 5135/216E : 03 DB                      	ADD	BX,BX			; Shift P.P left
 5136/2170 : 73 03                      	JNC	MLDBLP1
 5137/2172 : E9 B7 F4                   	JMP	BSERR			; ?BS Error if overflow
 5138/2175 :                            MLDBLP1:
 5139/2175 : 87 DA                      	XCHG	BX,DX
 5140/2177 : 03 DB                      	ADD	BX,BX			; Shift multiplier left
 5141/2179 : 87 DA                      	XCHG	BX,DX
 5142/217B : 73 07                      	JNC	NOMLAD			; Bit was zero - No add
 5143/217D : 03 D9                      	ADD	BX,CX			; Add multiplicand
 5144/217F : 73 03                      	JNC	NOMLAD
 5145/2181 : E9 A8 F4                   	JMP	BSERR			; ?BS Error if overflow
 5146/2184 :                            NOMLAD:
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 87 - 8/7/2025 21:50:51


 5147/2184 : FE C8                      	DEC	AL			; Count bits
 5148/2186 : 75 E6                      	JNZ	MLDBLP			; More
 5149/2188 : C3                         	RET
 5150/2189 :                            ;
 5151/2189 :                            ASCTFP:
 5152/2189 : 3C 2D                      	CMP	AL,'-'			; Negative?
 5153/218B : 9F                         	LAHF
 5154/218C : 86 E0                      	XCHG	AH,AL
 5155/218E : 50                         	PUSH	AX			; Save it and flags
 5156/218F : 86 E0                      	XCHG	AH,AL
 5157/2191 : 74 07                      	JZ	CNVNUM			; Yes - Convert number
 5158/2193 : 3C 2B                      	CMP	AL,'+'			; Positive?
 5159/2195 : 74 03                      	JZ	CNVNUM			; Yes - Convert number
 5160/2197 : 9F                         	LAHF
 5161/2198 : 4B                         	DEC	BX			; DEC 'cos GETCHR INCs
 5162/2199 : 9E                         	SAHF
 5163/219A :                            CNVNUM:
 5164/219A : E8 A8 FB                   	CALL	RESZER			; Set result to zero
 5165/219D : 8A E8                      	MOV	CH,AL			; Digits after point counter
 5166/219F : 8A F0                      	MOV	DH,AL			; Sign of exponent
 5167/21A1 : 8A D0                      	MOV	DL,AL			; Exponent of ten
 5168/21A3 : F6 D0                      	NOT	AL
 5169/21A5 : 8A C8                      	MOV	CL,AL			; Before or after point flag
 5170/21A7 :                            MANLP:
 5171/21A7 : E8 49 EA                   	CALL	GETCHR			; Get next character
 5172/21AA : 72 5E                      	JC	ADDIG			; Digit - Add to number
 5173/21AC : 3C 2E                      	CMP	AL,'.'
 5174/21AE : 74 1B                      	JZ	DPOINT			; '.' - Flag point
 5175/21B0 : 3C 45                      	CMP	AL,'E'
 5176/21B2 : 75 1B                      	JNZ	CONEXP			; Not 'E' - Scale number
 5177/21B4 : E8 3C EA                   	CALL	GETCHR			; Get next character
 5178/21B7 : E8 BB F1                   	CALL	SGNEXP			; Get sign of exponent
 5179/21BA :                            EXPLP:
 5180/21BA : E8 36 EA                   	CALL	GETCHR			; Get next character
 5181/21BD : 72 73                      	JC	EDIGIT			; Digit - Add to exponent
 5182/21BF : FE C6                      	INC	DH			; Is sign negative?
 5183/21C1 : 75 0C                      	JNZ	CONEXP			; No - Scale number
 5184/21C3 : 32 C0                      	XOR	AL,AL
 5185/21C5 : 2A C2                      	SUB	AL,DL			; Negate exponent
 5186/21C7 : 8A D0                      	MOV	DL,AL			; And re-save it
 5187/21C9 : FE C1                      	INC	CL			; Flag end of number
 5188/21CB :                            DPOINT:
 5189/21CB : FE C1                      	INC	CL			; Flag point passed
 5190/21CD : 74 D8                      	JZ	MANLP			; Zero - Get another digit
 5191/21CF :                            CONEXP:
 5192/21CF : 53                         	PUSH	BX			; Save code string address
 5193/21D0 : 8A C2                      	MOV	AL,DL			; Get exponent
 5194/21D2 : 2A C5                      	SUB	AL,CH			; Subtract digits after point
 5195/21D4 :                            SCALMI:
 5196/21D4 : 78 03                      	JS	SCALMI1
 5197/21D6 : E8 20 00                   	CALL	SCALPL			; Positive - Multiply number
 5198/21D9 :                            SCALMI1:
 5199/21D9 : 79 0F                      	JNS	ENDCON			; Positive - All done
 5200/21DB : 9F                         	LAHF
 5201/21DC : 86 E0                      	XCHG	AH,AL
 5202/21DE : 50                         	PUSH	AX			; Save number of times to /10
 5203/21DF : 86 E0                      	XCHG	AH,AL
 5204/21E1 : E8 09 FD                   	CALL	DIV10			; Divide by 10
 5205/21E4 : 58                         	POP	AX			; Restore count
 5206/21E5 : 86 E0                      	XCHG	AH,AL
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 88 - 8/7/2025 21:50:51


 5207/21E7 : 9E                         	SAHF
 5208/21E8 : FE C0                      	INC	AL			; Count divides
 5209/21EA :                            ;
 5210/21EA :                            ENDCON:
 5211/21EA : 75 E8                      	JNZ	SCALMI			; More to do
 5212/21EC : 5A                         	POP	DX			; Restore code string address
 5213/21ED : 58                         	POP	AX			; Restore sign of number
 5214/21EE : 86 E0                      	XCHG	AH,AL
 5215/21F0 : 9E                         	SAHF
 5216/21F1 : 75 03                      	JNZ	ENDCON1
 5217/21F3 : E8 2D FE                   	CALL	INVSGN			; Negative - Negate number
 5218/21F6 :                            ENDCON1:
 5219/21F6 : 87 DA                      	XCHG	BX,DX			; Code string address to HL
 5220/21F8 : C3                         	RET
 5221/21F9 :                            ;
 5222/21F9 :                            SCALPL:
 5223/21F9 : 75 01                      	JNZ	MULTEN
 5224/21FB : C3                         	RET				; Exit if no scaling needed
 5225/21FC :                            MULTEN:
 5226/21FC :                            ;	LAHF
 5227/21FC : 86 E0                      	XCHG	AH,AL
 5228/21FE : 50                         	PUSH	AX			; Save count
 5229/21FF : 86 E0                      	XCHG	AH,AL
 5230/2201 : E8 C3 FD                   	CALL	MLSP10			; Multiply number by 10
 5231/2204 : 58                         	POP	AX			; Restore count
 5232/2205 : 86 E0                      	XCHG	AH,AL
 5233/2207 :                            ;	SAHF
 5234/2207 : FE C8                      	DEC	AL			; Count multiplies
 5235/2209 : C3                         	RET
 5236/220A :                            ;
 5237/220A :                            ADDIG:
 5238/220A : 52                         	PUSH	DX			; Save sign of exponent
 5239/220B : 8A F0                      	MOV	DH,AL			; Save digit
 5240/220D : 8A C5                      	MOV	AL,CH			; Get digits after point
 5241/220F : 12 C1                      	ADC	AL,CL			; Add one if after point
 5242/2211 : 8A E8                      	MOV	CH,AL			; Re-save counter
 5243/2213 : 51                         	PUSH	CX			; Save point flags
 5244/2214 : 53                         	PUSH	BX			; Save code string address
 5245/2215 : 52                         	PUSH	DX			; Save digit
 5246/2216 : E8 AE FD                   	CALL	MLSP10			; Multiply number by 10
 5247/2219 : 58                         	POP	AX			; Restore digit
 5248/221A : 86 E0                      	XCHG	AH,AL
 5249/221C : 9E                         	SAHF
 5250/221D : 2C 30                      	SUB	AL,'0'			; Make it absolute
 5251/221F : E8 05 00                   	CALL	RSCALE			; Re-scale number
 5252/2222 : 5B                         	POP	BX			; Restore code string address
 5253/2223 : 59                         	POP	CX			; Restore point flags
 5254/2224 : 5A                         	POP	DX			; Restore sign of exponent
 5255/2225 : EB 80                      	JMP	MANLP			; Get another digit
 5256/2227 :                            ;
 5257/2227 :                            RSCALE:
 5258/2227 : E8 03 FE                   	CALL	STAKFP			; Put number on stack
 5259/222A : E8 D9 FD                   	CALL	FLGREL			; Digit to add to FPREG
 5260/222D :                            PADD:
 5261/222D : 59                         	POP	CX			; Restore number
 5262/222E : 5A                         	POP	DX
 5263/222F : E9 76 FA                   	JMP	FPADD			; Add BCDE to FPREG and return
 5264/2232 :                            ;
 5265/2232 :                            EDIGIT:
 5266/2232 : 8A C2                      	MOV	AL,DL			; Get digit
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 89 - 8/7/2025 21:50:51


 5267/2234 : D0 C0                      	ROL	AL,1			; Times 2
 5268/2236 : D0 C0                      	ROL	AL,1			; Times 4
 5269/2238 : 02 C2                      	ADD	AL,DL			; Times 5
 5270/223A : D0 C0                      	ROL	AL,1			; Times 10
 5271/223C : 02 07                      	ADD	AL,[BX]			; Add next digit
 5272/223E : 2C 30                      	SUB	AL,'0'			; Make it absolute
 5273/2240 : 8A D0                      	MOV	DL,AL			; Save new digit
 5274/2242 : E9 75 FF                   	JMP	EXPLP			; Look for another digit
 5275/2245 :                            ;
 5276/2245 :                            LINEIN:
 5277/2245 : 53                         	PUSH	BX			; Save code string address
 5278/2246 : BB 7D 05                   	MOV	BX,INMSG		; Output " in "
 5279/2249 : E8 87 F6                   	CALL	PRS			; Output string at HL
 5280/224C : 5B                         	POP	BX			; Restore code string address
 5281/224D :                            PRNTHL:
 5282/224D : 87 DA                      	XCHG	BX,DX			; Code string address to DE
 5283/224F : 32 C0                      	XOR	AL,AL
 5284/2251 : B5 98                      	MOV	CH,80H+24		; 24 bits
 5285/2253 : E8 B5 FD                   	CALL	RETINT			; Return the integer
 5286/2256 : BB D0 18                   	MOV	BX,PRNUMS		; Print number string
 5287/2259 : 53                         	PUSH	BX			; Save for return
 5288/225A :                            NUMASC:
 5289/225A : BB 35 33                   	MOV	BX,PBUFF		; Convert number to ASCII
 5290/225D : 53                         	PUSH	BX			; Save for return
 5291/225E : E8 87 FD                   	CALL	TSTSGN			; Test sign of FPREG
 5292/2261 : C6 07 20                   	MOV	BYTE PTR [BX],' '	; Space at start
 5293/2264 : 79 03                      	JNS	SPCFST			; Positive - Space to start
 5294/2266 : C6 07 2D                   	MOV	BYTE PTR [BX],'-'	; '-' sign at start
 5295/2269 :                            SPCFST:
 5296/2269 : 9F                         	LAHF
 5297/226A : 43                         	INC	BX			; First byte of number
 5298/226B : 9E                         	SAHF
 5299/226C : C6 07 30                   	MOV	BYTE PTR [BX],'0'	; '0' if zero
 5300/226F : 75 03                      	JNZ	SPCFST1			; Return '0' if zero
 5301/2271 : E9 01 01                   	JMP	JSTZER
 5302/2274 :                            SPCFST1:
 5303/2274 : 53                         	PUSH	BX			; Save buffer address
 5304/2275 : 79 03                      	JNS	SPCFST2
 5305/2277 : E8 A9 FD                   	CALL	INVSGN			; Negate FPREG if negative
 5306/227A :                            SPCFST2:
 5307/227A : 32 C0                      	XOR	AL,AL			; Zero A
 5308/227C : 9F                         	LAHF
 5309/227D : 86 E0                      	XCHG	AH,AL
 5310/227F : 50                         	PUSH	AX			; Save it
 5311/2280 : 86 E0                      	XCHG	AH,AL
 5312/2282 : E8 FC 00                   	CALL	RNGTST			; Test number is in range
 5313/2285 :                            SIXDIG:
 5314/2285 : B9 43 91                   	MOV	CX,9143H		; BCDE - 99999.9
 5315/2288 : BA F8 4F                   	MOV	DX,4FF8H
 5316/228B : E8 15 FE                   	CALL	CMPNUM			; Compare numbers
 5317/228E : 0A C0                      	OR	AL,AL
 5318/2290 : 7B 21                      	JPO	INRNG			; > 99999.9 - Sort it out	JP PO,INGNG
 5319/2292 : 58                         	POP	AX			; Restore count
 5320/2293 : 86 E0                      	XCHG	AH,AL
 5321/2295 : 9E                         	SAHF
 5322/2296 : E8 63 FF                   	CALL	MULTEN			; Multiply by ten
 5323/2299 : 9F                         	LAHF
 5324/229A : 86 E0                      	XCHG	AH,AL
 5325/229C : 50                         	PUSH	AX			; Re-save count
 5326/229D : 86 E0                      	XCHG	AH,AL
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 90 - 8/7/2025 21:50:51


 5327/229F : EB E4                      	JMP	SIXDIG			; Test it again
 5328/22A1 :                            ;
 5329/22A1 :                            GTSIXD:
 5330/22A1 : E8 49 FC                   	CALL	DIV10			; Divide by 10
 5331/22A4 : 58                         	POP	AX			; Get count
 5332/22A5 : 86 E0                      	XCHG	AH,AL
 5333/22A7 : 9E                         	SAHF
 5334/22A8 : FE C0                      	INC	AL			; Count divides
 5335/22AA : 9F                         	LAHF
 5336/22AB : 86 E0                      	XCHG	AH,AL
 5337/22AD : 50                         	PUSH	AX			; Re-save count
 5338/22AE : 86 E0                      	XCHG	AH,AL
 5339/22B0 : E8 CE 00                   	CALL	RNGTST			; Test number is in range
 5340/22B3 :                            INRNG:
 5341/22B3 : E8 E0 F9                   	CALL	ROUND			; Add 0.5 to FPREG
 5342/22B6 : FE C0                      	INC	AL
 5343/22B8 : E8 3A FE                   	CALL	FPINT			; F.P to integer
 5344/22BB : E8 8B FD                   	CALL	FPBCDE			; Move BCDE to FPREG
 5345/22BE : B9 06 03                   	MOV	CX,0306H		; 1E+06 to 1E-03 range
 5346/22C1 : 58                         	POP	AX			; Restore count
 5347/22C2 : 86 E0                      	XCHG	AH,AL
 5348/22C4 : 9E                         	SAHF
 5349/22C5 : 02 C1                      	ADD	AL,CL			; 6 digits before point
 5350/22C7 : FE C0                      	INC	AL			; Add one
 5351/22C9 : 78 0A                      	JS	MAKNUM			; Do it in 'E' form if < 1E-02
 5352/22CB : 3C 08                      	CMP	AL,6+1+1		; More than 999999 ?
 5353/22CD : 73 06                      	JNC	MAKNUM			; Yes - Do it in 'E' form
 5354/22CF : FE C0                      	INC	AL			; Adjust for exponent
 5355/22D1 : 8A E8                      	MOV	CH,AL			; Exponent of number
 5356/22D3 : B0 02                      	MOV	AL,2			; Make it zero after
 5357/22D5 :                            ;
 5358/22D5 :                            MAKNUM:
 5359/22D5 : FE C8                      	DEC	AL			; Adjust for digits to do
 5360/22D7 : FE C8                      	DEC	AL
 5361/22D9 : 5B                         	POP	BX			; Restore buffer addres
 5362/22DA : 9F                         	LAHF
 5363/22DB : 86 E0                      	XCHG	AH,AL
 5364/22DD : 50                         	PUSH	AX			; Save count
 5365/22DE : 86 E0                      	XCHG	AH,AL
 5366/22E0 : BA 98 23                   	MOV	DX,POWERS		; Powers of ten
 5367/22E3 : FE CD                      	DEC	CH			; Count digits before point
 5368/22E5 : 75 0C                      	JNZ	DIGTXT			; Not zero - Do number
 5369/22E7 : C6 07 2E                   	MOV	BYTE PTR [BX],'.'	; Save point
 5370/22EA : 9F                         	LAHF
 5371/22EB : 43                         	INC	BX			; Move on
 5372/22EC : 9E                         	SAHF
 5373/22ED : C6 07 30                   	MOV	BYTE PTR [BX],'0'	; Save zero
 5374/22F0 : 9F                         	LAHF
 5375/22F1 : 43                         	INC	BX			; Move on
 5376/22F2 : 9E                         	SAHF
 5377/22F3 :                            DIGTXT:
 5378/22F3 : FE CD                      	DEC	CH			; Count digits before point
 5379/22F5 : C6 07 2E                   	MOV	BYTE PTR [BX],'.'	; Save point in case
 5380/22F8 : 75 03                      	JNZ	DIGTXT1
 5381/22FA : E8 6B FD                   	CALL	INCHL			; Last digit - move on
 5382/22FD :                            DIGTXT1:
 5383/22FD : 51                         	PUSH	CX			; Save digits before point
 5384/22FE : 53                         	PUSH	BX			; Save buffer address
 5385/22FF : 52                         	PUSH	DX			; Save powers of ten
 5386/2300 : E8 55 FD                   	CALL	BCDEFP			; Move FPREG to BCDE
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 91 - 8/7/2025 21:50:51


 5387/2303 : 5B                         	POP	BX			; Powers of ten table
 5388/2304 : B5 2F                      	MOV	CH,'0'-1		; ASCII '0' - 1
 5389/2306 :                            TRYAGN:
 5390/2306 : FE C5                      	INC	CH			; Count subtractions
 5391/2308 : 8A C2                      	MOV	AL,DL			; Get LSB
 5392/230A : 2A 07                      	SUB	AL,[BX]			; Subtract LSB
 5393/230C : 8A D0                      	MOV	DL,AL			; Save LSB
 5394/230E : 9F                         	LAHF
 5395/230F : 43                         	INC	BX
 5396/2310 : 9E                         	SAHF
 5397/2311 : 8A C6                      	MOV	AL,DH			; Get NMSB
 5398/2313 : 1A 07                      	SBB	AL,[BX]			; Subtract NMSB
 5399/2315 : 8A F0                      	MOV	DH,AL			; Save NMSB
 5400/2317 : 9F                         	LAHF
 5401/2318 : 43                         	INC	BX
 5402/2319 : 9E                         	SAHF
 5403/231A : 8A C1                      	MOV	AL,CL			; Get MSB
 5404/231C : 1A 07                      	SBB	AL,[BX]			; Subtract MSB
 5405/231E : 8A C8                      	MOV	CL,AL			; Save MSB
 5406/2320 : 9F                         	LAHF
 5407/2321 : 4B                         	DEC	BX			; Point back to start
 5408/2322 :                            ;	SAHF
 5409/2322 :                            ;	LAHF
 5410/2322 : 4B                         	DEC	BX
 5411/2323 : 9E                         	SAHF
 5412/2324 : 73 E0                      	JNC	TRYAGN			; No overflow - Try aga
 5413/2326 : E8 7F FA                   	CALL	PLUCDE			; Restore number
 5414/2329 : 9F                         	LAHF
 5415/232A : 43                         	INC	BX
 5416/232B : 9E                         	SAHF				; Start of next number
 5417/232C : E8 1A FD                   	CALL	FPBCDE			; Move BCDE to FPREG
 5418/232F : 87 DA                      	XCHG	BX,DX			; Save point in table
 5419/2331 : 5B                         	POP	BX			; Restore buffer address
 5420/2332 : 88 2F                      	MOV	[BX],CH			; Save digit in buffer
 5421/2334 : 9F                         	LAHF
 5422/2335 : 43                         	INC	BX			; And move on
 5423/2336 : 9E                         	SAHF
 5424/2337 : 59                         	POP	CX			; Restore digit count
 5425/2338 : FE C9                      	DEC	CL			; Count digits
 5426/233A : 75 B7                      	JNZ	DIGTXT			; More - Do them
 5427/233C : FE CD                      	DEC	CH			; Any decimal part?
 5428/233E : 74 0E                      	JZ	DOEBIT			; No - Do 'E' bit
 5429/2340 :                            SUPTLZ:
 5430/2340 :                            ;	LAHF
 5431/2340 : 4B                         	DEC	BX			; Move back through buffer
 5432/2341 :                            ;	SAHF
 5433/2341 : 8A 07                      	MOV	AL,[BX]			; Get character
 5434/2343 : 3C 30                      	CMP	AL,'0'			; '0' character?
 5435/2345 : 74 F9                      	JZ	SUPTLZ			; Yes - Look back for more
 5436/2347 : 3C 2E                      	CMP	AL,'.'			; A decimal point?
 5437/2349 : 74 03                      	JZ	DOEBIT
 5438/234B : E8 1A FD                   	CALL	INCHL			; Move back over digit
 5439/234E :                            ;
 5440/234E :                            DOEBIT:
 5441/234E : 58                         	POP	AX			; Get 'E' flag
 5442/234F : 86 E0                      	XCHG	AH,AL
 5443/2351 : 9E                         	SAHF
 5444/2352 : 74 29                      	JZ	NOENED			; No 'E' needed - End buffer
 5445/2354 : C6 07 45                   	MOV	BYTE PTR [BX],'E'	; Put 'E' in buffer
 5446/2357 : 9F                         	LAHF
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 92 - 8/7/2025 21:50:51


 5447/2358 : 43                         	INC	BX			; And move on
 5448/2359 : 9E                         	SAHF
 5449/235A : C6 07 2B                   	MOV	BYTE PTR [BX],'+'	; Put '+' in buffer
 5450/235D : 79 07                      	JNS	OUTEXP			; Positive - Output exponent
 5451/235F : C6 07 2D                   	MOV	BYTE PTR [BX],'-'	; Put '-' in buffer
 5452/2362 : F6 D0                      	NOT	AL			; Negate exponent
 5453/2364 : FE C0                      	INC	AL
 5454/2366 :                            OUTEXP:
 5455/2366 : B5 2F                      	MOV	CH,'0'-1		; ASCII '0' - 1
 5456/2368 :                            EXPTEN:
 5457/2368 : FE C5                      	INC	CH			; Count subtractions
 5458/236A : 2C 0A                      	SUB	AL,10			; Tens digit
 5459/236C : 73 FA                      	JNC	EXPTEN			; More to do
 5460/236E : 04 3A                      	ADD	AL,'0'+10		; Restore and make ASCII
 5461/2370 : 9F                         	LAHF
 5462/2371 : 43                         	INC	BX
 5463/2372 : 9E                         	SAHF				; Move on
 5464/2373 : 88 2F                      	MOV	[BX],CH			; Save MSB of exponent
 5465/2375 :                            JSTZER:
 5466/2375 : 9F                         	LAHF
 5467/2376 : 43                         	INC	BX
 5468/2377 : 9E                         	SAHF
 5469/2378 : 88 07                      	MOV	[BX],AL			; Save LSB of exponent
 5470/237A : 9F                         	LAHF
 5471/237B : 43                         	INC	BX
 5472/237C : 9E                         	SAHF
 5473/237D :                            NOENED:
 5474/237D : 88 0F                      	MOV	[BX],CL			; Mark end of buffer
 5475/237F : 5B                         	POP	BX			; Restore code string address
 5476/2380 : C3                         	RET
 5477/2381 :                            ;
 5478/2381 :                            RNGTST:
 5479/2381 : B9 74 94                   	MOV	CX,9474H		; BCDE = 999999.
 5480/2384 : BA F7 23                   	MOV	DX,23F7H
 5481/2387 : E8 19 FD                   	CALL	CMPNUM			; Compare numbers
 5482/238A : 0A C0                      	OR	AL,AL
 5483/238C : 5B                         	POP	BX			; Return address to HL
 5484/238D : 7A 03                      	JPE	RNGTST1			; Too big - Divide by ten	JP PO,GTSIND
 5485/238F : E9 0F FF                   	JMP	GTSIXD
 5486/2392 :                            RNGTST1:
 5487/2392 : 53                         	PUSH	BX
 5488/2393 : C3                         	RET
 5489/2394 :                            ;	JMP	[BX]			; Otherwise return to caller
 5490/2394 :                            ;
 5491/2394 :                            HALF:
 5492/2394 : 00 00 00 80                	DB	00H,00H,00H,80H 	; 0.5
 5493/2398 :                            ;
 5494/2398 :                            POWERS:
 5495/2398 : A0 86 01                   	DB	0A0H,086H,001H		; 100000
 5496/239B : 10 27 00                   	DB	010H,027H,000H		; 10000
 5497/239E : E8 03 00                   	DB	0E8H,003H,000H		; 1000
 5498/23A1 : 64 00 00                   	DB	064H,000H,000H		; 100
 5499/23A4 : 0A 00 00                   	DB	00AH,000H,000H		; 10
 5500/23A7 : 01 00 00                   	DB	001H,000H,000H		; 1
 5501/23AA :                            ;
 5502/23AA :                            NEGAFT:
 5503/23AA : BB 23 20                   	MOV	BX,INVSGN		; Negate result
 5504/23AD : 8B EC                      	MOV	BP,SP
 5505/23AF : 87 5E 00                   	XCHG	[BP],BX			; To be done after call
 5506/23B2 : 53                         	PUSH	BX
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 93 - 8/7/2025 21:50:51


 5507/23B3 : C3                         	RET
 5508/23B4 :                            ;	JMP	[BX]			; Return to caller
 5509/23B4 :                            ;
 5510/23B4 :                            SQR:
 5511/23B4 : E8 76 FC                   	CALL	STAKFP			; Put value on stack
 5512/23B7 : BB 94 23                   	MOV	BX,HALF			; Set power to 1/2
 5513/23BA : E8 89 FC                   	CALL	PHLTFP			; Move 1/2 to FPREG
 5514/23BD :                            ;
 5515/23BD :                            POWER:
 5516/23BD : 59                         	POP	CX			; Get base
 5517/23BE : 5A                         	POP	DX
 5518/23BF : E8 26 FC                   	CALL	TSTSGN			; Test sign of power
 5519/23C2 : 8A C5                      	MOV	AL,CH			; Get exponent of base
 5520/23C4 : 74 4E                      	JZ	EXP			; Make result 1 if zero
 5521/23C6 : 79 07                      	JNS	POWER1			; Positive base - Ok
 5522/23C8 : 0A C0                      	OR	AL,AL			; Zero to negative power?
 5523/23CA : 75 03                      	JNZ	POWER1			; Yes - ?/0 Error
 5524/23CC : E9 3C E2                   	JMP	DZERR
 5525/23CF :                            POWER1:
 5526/23CF : 0A C0                      	OR	AL,AL			; Base zero?
 5527/23D1 : 75 03                      	JNZ	POWER5			; Yes - Return zero
 5528/23D3 : E9 71 F9                   	JMP	SAVEXP
 5529/23D6 :                            POWER5:
 5530/23D6 : 52                         	PUSH	DX			; Save base
 5531/23D7 : 51                         	PUSH	CX
 5532/23D8 : 8A C1                      	MOV	AL,CL			; Get MSB of base
 5533/23DA : 0C 7F                      	OR	AL,01111111B		; Get sign status
 5534/23DC : E8 79 FC                   	CALL	BCDEFP			; Move power to BCDE
 5535/23DF : 79 15                      	JNS	POWER2			; Positive base - Ok
 5536/23E1 : 52                         	PUSH	DX			; Save power
 5537/23E2 : 51                         	PUSH	CX
 5538/23E3 : E8 53 FD                   	CALL	INT			; Get integer of power
 5539/23E6 : 59                         	POP	CX			; Restore power
 5540/23E7 : 5A                         	POP	DX
 5541/23E8 : 9F                         	LAHF
 5542/23E9 : 86 E0                      	XCHG	AH,AL
 5543/23EB : 50                         	PUSH	AX			; MSB of base
 5544/23EC : 86 E0                      	XCHG	AH,AL
 5545/23EE : E8 B2 FC                   	CALL	CMPNUM			; Power an integer?
 5546/23F1 : 5B                         	POP	BX			; Restore MSB of base
 5547/23F2 : 8A C7                      	MOV	AL,BH			; but don't affect flags
 5548/23F4 : D0 D8                      	RCR	AL,1			; Exponent odd or even?
 5549/23F6 :                            POWER2:
 5550/23F6 : 5B                         	POP	BX			; Restore MSB and exponent
 5551/23F7 : 89 1E 32 33                	MOV	[FPREG+2],BX		; Save base in FPREG
 5552/23FB : 5B                         	POP	BX			; LSBs of base
 5553/23FC : 89 1E 30 33                	MOV	[FPREG],BX		; Save in FPREG
 5554/2400 : 73 03                      	JNC	POWER3
 5555/2402 : E8 A5 FF                   	CALL	NEGAFT			; Odd power - Negate result
 5556/2405 :                            POWER3:
 5557/2405 : 75 03                      	JNZ	POWER4
 5558/2407 : E8 19 FC                   	CALL	INVSGN			; Negative base - Negate it
 5559/240A :                            POWER4:
 5560/240A : 52                         	PUSH	DX			; Save power
 5561/240B : 51                         	PUSH	CX
 5562/240C : E8 1C FA                   	CALL	LOG			; Get LOG of base
 5563/240F : 59                         	POP	CX			; Restore power
 5564/2410 : 5A                         	POP	DX
 5565/2411 : E8 68 FA                   	CALL	FPMULT			; Multiply LOG by power
 5566/2414 :                            ;
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 94 - 8/7/2025 21:50:51


 5567/2414 :                            EXP:
 5568/2414 : E8 16 FC                   	CALL	STAKFP			; Put value on stack
 5569/2417 : B9 38 81                   	MOV	CX,08138H		; BCDE = 1/Ln(2)
 5570/241A : BA 3B AA                   	MOV	DX,0AA3BH
 5571/241D : E8 5C FA                   	CALL	FPMULT			; Multiply value by 1/L(2)
 5572/2420 : A0 33 33                   	MOV	AL,[FPEXP]		; Get exponent
 5573/2423 : 3C 88                      	CMP	AL,80H+8		; Is it in range?
 5574/2425 : 72 03                      	JC	EXP1			; No - Test for overflow
 5575/2427 : E9 8C FB                   	JMP	OVTST1
 5576/242A :                            EXP1:
 5577/242A : E8 0C FD                   	CALL	INT			; Get INT of FPREG
 5578/242D : 04 80                      	ADD	AL,80H			; For excess 128
 5579/242F : 04 02                      	ADD	AL,2			; Exponent > 126?
 5580/2431 : 73 03                      	JNC	EXP2			; Yes - Test for overflow
 5581/2433 : E9 80 FB                   	JMP	OVTST1
 5582/2436 :                            EXP2:
 5583/2436 : 9F                         	LAHF
 5584/2437 : 86 E0                      	XCHG	AH,AL
 5585/2439 : 50                         	PUSH	AX			; Save scaling factor
 5586/243A : 86 E0                      	XCHG	AH,AL
 5587/243C : BB 1A 1E                   	MOV	BX,UNITY		; Point to 1.
 5588/243F : E8 57 F8                   	CALL	ADDPHL			; Add 1 to FPREG
 5589/2442 : E8 2D FA                   	CALL	MULLN2			; Multiply by LN(2)
 5590/2445 : 58                         	POP	AX			; Restore scaling factor
 5591/2446 : 86 E0                      	XCHG	AH,AL
 5592/2448 : 9E                         	SAHF
 5593/2449 : 59                         	POP	CX			; Restore exponent
 5594/244A : 5A                         	POP	DX
 5595/244B : 9F                         	LAHF
 5596/244C : 86 E0                      	XCHG	AH,AL
 5597/244E : 50                         	PUSH	AX			; Save scaling factor
 5598/244F : 86 E0                      	XCHG	AH,AL
 5599/2451 : E8 51 F8                   	CALL	SUBCDE			; Subtract exponent from FPREG
 5600/2454 : E8 CC FB                   	CALL	INVSGN			; Negate result
 5601/2457 : BB 66 24                   	MOV	BX,EXPTAB		; Coefficient table
 5602/245A : E8 39 00                   	CALL	SMSER1			; Sum the series
 5603/245D : BA 00 00                   	MOV	DX,0			; Zero LSBs
 5604/2460 : 59                         	POP	CX			; Scaling factor
 5605/2461 : 8A CE                      	MOV	CL,DH			; Zero MSB
 5606/2463 : E9 16 FA                   	JMP	FPMULT			; Scale result to correct value
 5607/2466 :                            ;
 5608/2466 :                            EXPTAB:
 5609/2466 : 08                         	DB	8                  	; Table used by EXP
 5610/2467 : 40 2E 94 74                	DB	040H,02EH,094H,074H	; -1/7! (-1/504
 5611/246B : 70 4F 2E 77                	DB	070H,04FH,02EH,077H	;  1/6! ( 1/720
 5612/246F : 6E 02 88 7A                	DB	06EH,002H,088H,07AH	; -1/5! (-1/120
 5613/2473 : E6 A0 2A 7C                	DB	0E6H,0A0H,02AH,07CH	;  1/4! ( 1/24)
 5614/2477 : 50 AA AA 7E                	DB	050H,0AAH,0AAH,07EH	; -1/3! (-1/6)
 5615/247B : FF FF 7F 7F                	DB	0FFH,0FFH,07FH,07FH	;  1/2! ( 1/2)
 5616/247F : 00 00 80 81                	DB	000H,000H,080H,081H	; -1/1! (-1/1)
 5617/2483 : 00 00 00 81                	DB	000H,000H,000H,081H	;  1/0! ( 1/1)
 5618/2487 :                            ;
 5619/2487 :                            SUMSER:
 5620/2487 : E8 A3 FB                   	CALL	STAKFP			; Put FPREG on stack
 5621/248A : BA 7A 1E                   	MOV	DX,MULT			; Multiply by "X"
 5622/248D : 52                         	PUSH	DX			; To be done after
 5623/248E : 53                         	PUSH	BX			; Save address of table
 5624/248F : E8 C6 FB                   	CALL	BCDEFP			; Move FPREG to BCDE
 5625/2492 : E8 E7 F9                   	CALL	FPMULT			; Square the value
 5626/2495 : 5B                         	POP	BX			; Restore address of table
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 95 - 8/7/2025 21:50:51


 5627/2496 :                            SMSER1:
 5628/2496 : E8 94 FB                   	CALL	STAKFP			; Put value on stack
 5629/2499 : 8A 07                      	MOV	AL,[BX]			; Get number of coefficients
 5630/249B : 9F                         	LAHF
 5631/249C : 43                         	INC	BX			; Point to start of table
 5632/249D : 9E                         	SAHF
 5633/249E : E8 A5 FB                   	CALL	PHLTFP			; Move coefficient to FPREG
 5634/24A1 : EB 03                      	JMP	SUMLP1			; Skip "POP AF"
 5635/24A3 :                            SUMLP:
 5636/24A3 : 58                         	POP	AX			; Restore count
 5637/24A4 : 86 E0                      	XCHG	AH,AL
 5638/24A6 :                            ;	SAHF
 5639/24A6 :                            SUMLP1:
 5640/24A6 : 59                         	POP	CX			; Restore number
 5641/24A7 : 5A                         	POP	DX
 5642/24A8 : FE C8                      	DEC	AL			; Cont coefficients
 5643/24AA : 75 01                      	JNZ	SUMLP2
 5644/24AC : C3                         	RET				; All done
 5645/24AD :                            SUMLP2:
 5646/24AD : 52                         	PUSH	DX			; Save number
 5647/24AE : 51                         	PUSH	CX
 5648/24AF :                            ;	LAHF
 5649/24AF : 86 E0                      	XCHG	AH,AL
 5650/24B1 : 50                         	PUSH	AX			; Save count
 5651/24B2 : 86 E0                      	XCHG	AH,AL
 5652/24B4 : 53                         	PUSH	BX			; Save address in table
 5653/24B5 : E8 C4 F9                   	CALL	FPMULT			; Multiply FPREG by BCD
 5654/24B8 : 5B                         	POP	BX			; Restore address in table
 5655/24B9 : E8 9F FB                   	CALL	LOADFP			; Number at HL to BCDE
 5656/24BC : 53                         	PUSH	BX			; Save address in table
 5657/24BD : E8 E8 F7                   	CALL	FPADD			; Add coefficient to FPREG
 5658/24C0 : 5B                         	POP	BX			; Restore address in table
 5659/24C1 : EB E0                      	JMP	SUMLP			; More coefficients
 5660/24C3 :                            ;
 5661/24C3 :                            RND:
 5662/24C3 : E8 22 FB                   	CALL	TSTSGN			; Test sign of FPREG
 5663/24C6 : BB 2F 05                   	MOV	BX,SEED+2		; Random number seed
 5664/24C9 : 78 73                      	JS	RESEED			; Negative - Re-seed
 5665/24CB : BB 50 05                   	MOV	BX,LSTRND		; Last random number
 5666/24CE : E8 75 FB                   	CALL	PHLTFP			; Move last RND to FPREG
 5667/24D1 : BB 2F 05                   	MOV	BX,SEED+2		; Random number seed
 5668/24D4 : 75 01                      	JNZ	RND0
 5669/24D6 : C3                         	RET				; Return if RND(0)
 5670/24D7 :                            RND0:
 5671/24D7 : 02 07                      	ADD	AL,[BX]			; Add (SEED)+2)
 5672/24D9 : 24 07                      	AND	AL,00000111B		; 0 to 7
 5673/24DB : B5 00                      	MOV	CH,0
 5674/24DD : 88 07                      	MOV	[BX],AL			; Re-save seed
 5675/24DF :                            ;	LAHF
 5676/24DF : 43                         	INC	BX			; Move to coefficient table
 5677/24E0 :                            ;	SAHF
 5678/24E0 : 02 C0                      	ADD	AL,AL			; 4 bytes
 5679/24E2 : 02 C0                      	ADD	AL,AL			; per entry
 5680/24E4 : 8A C8                      	MOV	CL,AL			; BC = Offset into table
 5681/24E6 : 03 D9                      	ADD	BX,CX			; Point to coefficient
 5682/24E8 : E8 70 FB                   	CALL	LOADFP			; Coefficient to BCDE
 5683/24EB : E8 8E F9                   	CALL	FPMULT			; Multiply FPREG by coefficient
 5684/24EE : 2E A0 2E 05                	MOV	AL,[SEED+1]		; Get [SEED+1]
 5685/24F2 : FE C0                      	INC	AL			; Add 1
 5686/24F4 : 24 03                      	AND	AL,00000011B		; 0 to 3
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 96 - 8/7/2025 21:50:51


 5687/24F6 : B5 00                      	MOV	CH,0
 5688/24F8 : 3C 01                      	CMP	AL,1			; Is it zero?
 5689/24FA : 12 C5                      	ADC	AL,CH			; Yes - Make it 1
 5690/24FC : 2E A2 2E 05                	MOV	[SEED+1],AL		; Re-save seed
 5691/2500 : BB 44 25                   	MOV	BX,RNDTAB-4		; Addition table
 5692/2503 : 02 C0                      	ADD	AL,AL			; 4 bytes
 5693/2505 : 02 C0                      	ADD	AL,AL			; per entry
 5694/2507 : 8A C8                      	MOV	CL,AL			; BC = Offset into table
 5695/2509 : 03 D9                      	ADD	BX,CX			; Point to value
 5696/250B : E8 8B F7                   	CALL	ADDPHL			; Add value to FPREG
 5697/250E :                            RND1:
 5698/250E : E8 47 FB                   	CALL	BCDEFP			; Move FPREG to BCDE
 5699/2511 : 8A C2                      	MOV	AL,DL			; Get LSB
 5700/2513 : 8A D1                      	MOV	DL,CL			; LSB = MSB
 5701/2515 : 34 4F                      	XOR	AL,01001111B		; Fiddle around
 5702/2517 : 8A C8                      	MOV	CL,AL			; New MSB
 5703/2519 : C6 07 80                   	MOV	BYTE PTR [BX],80H	; Set exponent
 5704/251C :                            ;	LAHF
 5705/251C : 4B                         	DEC	BX			; Point to MSB
 5706/251D :                            ;	SAHF
 5707/251D : 8A 2F                      	MOV	CH,[BX]			; Get MSB
 5708/251F : C6 07 80                   	MOV	BYTE PTR [BX],80H	; Make value -0.5
 5709/2522 : BB 2D 05                   	MOV	BX,SEED			; Random number seed
 5710/2525 : FE 07                      	INC	BYTE PTR [BX]		; Count seed
 5711/2527 : 8A 07                      	MOV	AL,[BX]			; Get seed
 5712/2529 : 2C AB                      	SUB	AL,171			; Do it modulo 171
 5713/252B : 75 08                      	JNZ	RND2			; Non-zero - Ok
 5714/252D : 88 07                      	MOV	[BX],AL			; Zero seed
 5715/252F : FE C1                      	INC	CL			; Fillde about
 5716/2531 : FE CE                      	DEC	DH			; with the
 5717/2533 : FE C2                      	INC	DL			; number
 5718/2535 :                            RND2:
 5719/2535 : E8 EF F7                   	CALL	BNORM			; Normalise number
 5720/2538 : BB 50 05                   	MOV	BX,LSTRND		; Save random number
 5721/253B : E9 2E FB                   	JMP	FPTHL			; Move FPREG to last and return
 5722/253E :                            ;
 5723/253E :                            RESEED:
 5724/253E : 88 07                      	MOV	[BX],AL			; Re-seed random number
 5725/2540 :                            ;	LAHF
 5726/2540 : 4B                         	DEC	BX
 5727/2541 :                            ;	SAHF
 5728/2541 : 88 07                      	MOV	[BX],AL
 5729/2543 :                            ;	LAHF
 5730/2543 : 4B                         	DEC	BX
 5731/2544 :                            ;	SAHF
 5732/2544 : 88 07                      	MOV	[BX],AL
 5733/2546 : EB C6                      	JMP	RND1			; Return RND seed
 5734/2548 :                            ;
 5735/2548 :                            RNDTAB:
 5736/2548 : 68 B1 46 68                	DB	068H,0B1H,046H,068H	; Table used by RND
 5737/254C : 99 E9 92 69                	DB	099H,0E9H,092H,069H
 5738/2550 : 10 D1 75 68                	DB	010H,0D1H,075H,068H
 5739/2554 :                            ;
 5740/2554 :                            COS:
 5741/2554 : BB AA 25                   	MOV	BX,HALFPI		; Point to PI/2
 5742/2557 : E8 3F F7                   	CALL	ADDPHL			; Add it to PPREG
 5743/255A :                            SIN:
 5744/255A : E8 D0 FA                   	CALL	STAKFP			; Put angle on stack
 5745/255D : B9 49 83                   	MOV	CX,8349H		; BCDE = 2 PI
 5746/2560 : BA DB 0F                   	MOV	DX,0FDBH
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 97 - 8/7/2025 21:50:51


 5747/2563 : E8 E3 FA                   	CALL	FPBCDE			; Move 2 PI to FPREG
 5748/2566 : 59                         	POP	CX			; Restore angle
 5749/2567 : 5A                         	POP	DX
 5750/2568 : E8 90 F9                   	CALL	DVBCDE			; Divide angle by 2 PI
 5751/256B : E8 BF FA                   	CALL	STAKFP			; Put it on stack
 5752/256E : E8 C8 FB                   	CALL	INT			; Get INT of result
 5753/2571 : 59                         	POP	CX			; Restore number
 5754/2572 : 5A                         	POP	DX
 5755/2573 : E8 2F F7                   	CALL	SUBCDE			; Make it 0 <= value < 1
 5756/2576 : BB AE 25                   	MOV	BX,QUARTR		; Point to 0.25
 5757/2579 : E8 22 F7                   	CALL	SUBPHL			; Subtract value from 0.25
 5758/257C : E8 69 FA                   	CALL	TSTSGN			; Test sign of value
 5759/257F : F9                         	STC				; Flag positive
 5760/2580 : 79 08                      	JNS	SIN1			; Positive - Ok
 5761/2582 : E8 11 F7                   	CALL	ROUND			; Add 0.5 to value
 5762/2585 : E8 60 FA                   	CALL	TSTSGN			; Test sign of value
 5763/2588 : 0A C0                      	OR	AL,AL			; Flag negative
 5764/258A :                            SIN1:
 5765/258A : 9F                         	LAHF
 5766/258B : 86 E0                      	XCHG	AH,AL
 5767/258D : 50                         	PUSH	AX			; Save sign
 5768/258E : 86 E0                      	XCHG	AH,AL
 5769/2590 : 78 03                      	JS	SIN2
 5770/2592 : E8 8E FA                   	CALL	INVSGN			; Negate value if positive
 5771/2595 :                            SIN2:
 5772/2595 : BB AE 25                   	MOV	BX,QUARTR		; Point to 0.25
 5773/2598 : E8 FE F6                   	CALL	ADDPHL			; Add 0.25 to value
 5774/259B : 58                         	POP	AX			; Restore sign
 5775/259C : 86 E0                      	XCHG	AH,AL
 5776/259E : 9E                         	SAHF
 5777/259F : 72 03                      	JC	SIN3
 5778/25A1 : E8 7F FA                   	CALL	INVSGN			; Negative - Make positive
 5779/25A4 :                            SIN3:
 5780/25A4 : BB B2 25                   	MOV	BX,SINTAB		; Coefficient table
 5781/25A7 : E9 DD FE                   	JMP	SUMSER			; Evaluate sum of series
 5782/25AA :                            ;
 5783/25AA :                            HALFPI:
 5784/25AA : DB 0F 49 81                	DB	0DBH,00FH,049H,081H	; 1.5708 (PI/2)
 5785/25AE :                            ;
 5786/25AE :                            QUARTR:
 5787/25AE : 00 00 00 7F                	DB	000H,000H,000H,07FH	; 0.25
 5788/25B2 :                            ;
 5789/25B2 :                            SINTAB:
 5790/25B2 : 05                         	DB	5			; Table used by SIN
 5791/25B3 : BA D7 1E 86                	DB	0BAH,0D7H,01EH,086H	; 39.711
 5792/25B7 : 64 26 99 87                	DB	064H,026H,099H,087H	;-76.575
 5793/25BB : 58 34 23 87                	DB	058H,034H,023H,087H	; 81.602
 5794/25BF : E0 5D A5 86                	DB	0E0H,05DH,0A5H,086H	;-41.342
 5795/25C3 : DA 0F 49 83                	DB	0DAH,00FH,049H,083H	; 6.2832
 5796/25C7 :                            ;
 5797/25C7 :                            TAN:
 5798/25C7 : E8 63 FA                   	CALL	STAKFP			; Put angle on stack
 5799/25CA : E8 8D FF                   	CALL	SIN			; Get SIN of angle
 5800/25CD : 59                         	POP	CX			; Restore angle
 5801/25CE : 5B                         	POP	BX
 5802/25CF : E8 5B FA                   	CALL	STAKFP			; Save SIN of angle
 5803/25D2 : 87 DA                      	XCHG	BX,DX			; BCDE = Angle
 5804/25D4 : E8 72 FA                   	CALL	FPBCDE			; Angle to FPREG
 5805/25D7 : E8 7A FF                   	CALL	COS			; Get COS of angle
 5806/25DA : E9 1C F9                   	JMP	DIV			; TAN = SIN / COS
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 98 - 8/7/2025 21:50:51


 5807/25DD :                            ;
 5808/25DD :                            ATN:
 5809/25DD : E8 08 FA                   	CALL	TSTSGN			; Test sign of value
 5810/25E0 : 79 03                      	JNS	ATN1
 5811/25E2 : E8 C5 FD                   	CALL	NEGAFT			; Negate result after if -ve
 5812/25E5 :                            ATN1:
 5813/25E5 : 79 03                      	JNS	ATN2
 5814/25E7 : E8 39 FA                   	CALL	INVSGN			; Negate value if -ve
 5815/25EA :                            ATN2:
 5816/25EA : A0 33 33                   	MOV	AL,[FPEXP]		; Get exponent
 5817/25ED : 3C 81                      	CMP	AL,81H			; Number less than 1?
 5818/25EF : 72 0E                      	JC	ATN3			; Yes - Get arc tangnt
 5819/25F1 : B9 00 81                   	MOV	CX,8100H		; BCDE = 1
 5820/25F4 : 8A F1                      	MOV	DH,CL
 5821/25F6 : 8A D1                      	MOV	DL,CL
 5822/25F8 : E8 00 F9                   	CALL	DVBCDE			; Get reciprocal of number
 5823/25FB : BB 9E 1C                   	MOV	BX,SUBPHL		; Sub angle from PI/2
 5824/25FE : 53                         	PUSH	BX			; Save for angle > 1
 5825/25FF :                            ATN3:
 5826/25FF : BB 09 26                   	MOV	BX,ATNTAB		; Coefficient table
 5827/2602 : E8 82 FE                   	CALL	SUMSER			; Evaluate sum of series
 5828/2605 : BB AA 25                   	MOV	BX,HALFPI		; PI/2 - angle in case > 1
 5829/2608 : C3                         	RET				; Number > 1 - Sub from PI/2
 5830/2609 :                            ;
 5831/2609 :                            ATNTAB:
 5832/2609 : 09                         	DB	9			; Table used by ATN
 5833/260A : 4A D7 3B 78                	DB	04AH,0D7H,03BH,078H	; 1/17
 5834/260E : 02 6E 84 7B                	DB	002H,06EH,084H,07BH	;-1/15
 5835/2612 : FE C1 2F 7C                	DB	0FEH,0C1H,02FH,07CH	; 1/13
 5836/2616 : 74 31 9A 7D                	DB	074H,031H,09AH,07DH	;-1/11
 5837/261A : 84 3D 5A 7D                	DB	084H,03DH,05AH,07DH	; 1/9
 5838/261E : C8 7F 91 7E                	DB	0C8H,07FH,091H,07EH	;-1/7
 5839/2622 : E4 BB 4C 7E                	DB	0E4H,0BBH,04CH,07EH	; 1/5
 5840/2626 : 6C AA AA 7F                	DB	06CH,0AAH,0AAH,07FH	;-1/3
 5841/262A : 00 00 00 81                	DB	000H,000H,000H,081H	; 1/1
 5842/262E :                            ;
 5843/262E :                            
 5844/262E :                            ARET:
 5845/262E : C3                         	RET				; A RETurn instruction
 5846/262F :                            ;
 5847/262F :                            CLS:
 5848/262F : B0 0C                      	MOV	AL,CLRSCRN		; ASCII Clear screen
 5849/2631 : E9 1A DA                   	JMP	putch			; Output character
 5850/2634 :                            ;
 5851/2634 :                            WIDTH:
 5852/2634 : E8 27 F6                   	CALL	GETINT			; Get integer 0-255
 5853/2637 : 8A C2                      	MOV	AL,DL			; Width to A
 5854/2639 : 2E A2 58 05                	MOV	[LWIDTH],AL		; Set width
 5855/263D : C3                         	RET
 5856/263E :                            ;
 5857/263E :                            LINES:
 5858/263E : E8 95 EB                   	CALL	GETNUM			; Get a number
 5859/2641 : E8 AC E6                   	CALL	DEINT			; Get integer -32768 to 32767
 5860/2644 : 2E 89 16 5C 05             	MOV	[LINESC],DX		; Set lines counter
 5861/2649 : 2E 89 16 5E 05             	MOV	[LINESN],DX		; Set lines number
 5862/264E : C3                         	RET
 5863/264F :                            ;
 5864/264F :                            DEEK:
 5865/264F : E8 9E E6                   	CALL	DEINT			; Get integer -32768 to 32767
 5866/2652 : 52                         	PUSH	DX			; Save number
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 99 - 8/7/2025 21:50:51


 5867/2653 : 5B                         	POP	BX			; Number to HL
 5868/2654 : 8A 2F                      	MOV	CH,[BX]			; Get LSB of contents
 5869/2656 :                            ;	LAHF
 5870/2656 : 43                         	INC	BX
 5871/2657 :                            ;	SAHF
 5872/2657 : 8A 07                      	MOV	AL,[BX]			; Get MSB of contents
 5873/2659 : E9 F1 F0                   	JMP	ABPASS			; Return integer AB
 5874/265C :                            ;
 5875/265C :                            DOKE:
 5876/265C : E8 77 EB                   	CALL	GETNUM			; Get a number
 5877/265F : E8 8E E6                   	CALL	DEINT			; Get integer -32768 to 32767
 5878/2662 : 52                         	PUSH	DX			; Save address
 5879/2663 : E8 66 E3                   	CALL	CHKSYN			; Make sure ',' follows
 5880/2666 : 2C                         	DB	','
 5881/2667 : E8 6C EB                   	CALL	GETNUM			; Get a number
 5882/266A : E8 83 E6                   	CALL	DEINT			; Get integer -32768 to 32767
 5883/266D : 8B EC                      	MOV	BP,SP
 5884/266F : 87 5E 00                   	XCHG	[BP],BX			; Save value,get address
 5885/2672 : 88 17                      	MOV	[BX],DL			; Save LSB of value
 5886/2674 :                            ;	LAHF
 5887/2674 : 43                         	INC	BX
 5888/2675 :                            ;	SAHF
 5889/2675 : 88 37                      	MOV	[BX],DH			; Save MSB of value
 5890/2677 : 5B                         	POP	BX			; Restore code string address
 5891/2678 : C3                         	RET
 5892/2679 :                            ;
 5893/2679 :                            ; HEX$(nn) Convert 16 bit number to Hexadecimal string
 5894/2679 :                            ;
 5895/2679 :                            HEX:
 5896/2679 : E8 5D EB                   	CALL	TSTNUM			; Verify it's a number
 5897/267C : E8 71 E6                   	CALL	DEINT			; Get integer -32768 to 32767
 5898/267F : 51                         	PUSH	CX			; Save contents of BC
 5899/2680 : BB 35 33                   	MOV	BX,PBUFF
 5900/2683 : 8A C6                      	MOV	AL,DH			; Get high order into A
 5901/2685 : 3C 00                      	CMP	AL,0
 5902/2687 : 74 0F                      	JZ	HEX2			; Skip output if both high digits are zero
 5903/2689 : E8 33 00                   	CALL	BYT2ASC			; Convert D to ASCII
 5904/268C : 8A C5                      	MOV	AL,CH
 5905/268E : 3C 30                      	CMP	AL,'0'
 5906/2690 : 74 03                      	JZ	HEX1			; Don't store high digit if zero
 5907/2692 : 88 2F                      	MOV	[BX],CH			; Store it to PBUFF
 5908/2694 :                            ;	LAHF
 5909/2694 : 43                         	INC	BX			; Next location
 5910/2695 :                            ;	SAHF
 5911/2695 :                            HEX1:
 5912/2695 : 88 0F                      	MOV	[BX],CL			; Store C to PBUFF+1
 5913/2697 :                            ;	LAHF
 5914/2697 : 43                         	INC	BX			; Next location
 5915/2698 :                            ;	SAHF
 5916/2698 :                            HEX2:
 5917/2698 : 8A C2                      	MOV	AL,DL			; Get lower byte
 5918/269A : E8 22 00                   	CALL	BYT2ASC			; Convert E to ASCII
 5919/269D : 8A C6                      	MOV	AL,DH
 5920/269F : 3C 00                      	CMP	AL,0
 5921/26A1 : 75 06                      	JNZ	HEX3			; If upper byte was not zero then always print lower byte
 5922/26A3 : 8A C5                      	MOV	AL,CH
 5923/26A5 : 3C 30                      	CMP	AL,'0'			; If high digit of lower byte is zero then don't print
 5924/26A7 : 74 05                      	JZ	HEX4
 5925/26A9 :                            HEX3:
 5926/26A9 : 88 2F                      	MOV	[BX],CH			; to PBUFF+2
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 100 - 8/7/2025 21:50:51


 5927/26AB : 9F                         	LAHF
 5928/26AC : 43                         	INC	BX			; Next location
 5929/26AD : 9E                         	SAHF
 5930/26AE :                            HEX4:
 5931/26AE : 88 0F                      	MOV	[BX],CL			; to PBUFF+3
 5932/26B0 :                            ;	LAHF
 5933/26B0 : 43                         	INC	BX			; PBUFF+4 to zero
 5934/26B1 :                            ;	SAHF
 5935/26B1 : 32 C0                      	XOR	AL,AL			; Terminating character
 5936/26B3 : 88 07                      	MOV	[BX],AL			; Store zero to terminate
 5937/26B5 :                            ;	LAHF
 5938/26B5 : 43                         	INC	BX			; Make sure PBUFF is terminated
 5939/26B6 :                            ;	SAHF
 5940/26B6 : 88 07                      	MOV	[BX],AL			; Store the double zero there
 5941/26B8 : 59                         	POP	CX			; Get BC back
 5942/26B9 : BB 35 33                   	MOV	BX,PBUFF		; Reset to start of PBUFF
 5943/26BC : E9 78 F1                   	JMP	STR1			; Convert the PBUFF to a string and return it
 5944/26BF :                            ;
 5945/26BF :                            BYT2ASC:
 5946/26BF : 8A E8                      	MOV	CH,AL			; Save original value
 5947/26C1 : 24 0F                      	AND	AL,0FH			; Strip off upper nybbl
 5948/26C3 : 3C 0A                      	CMP	AL,0AH			; 0-9?
 5949/26C5 : 72 02                      	JC	ADD30			; If A-F, add 7 more
 5950/26C7 : 04 07                      	ADD	AL,07H			; Bring value up to ASCII A-F
 5951/26C9 :                            ADD30:
 5952/26C9 : 04 30                      	ADD	AL,'0'			; And make ASCII
 5953/26CB : 8A C8                      	MOV	CL,AL			; Save converted char to C
 5954/26CD : 8A C5                      	MOV	AL,CH			; Retrieve original value
 5955/26CF : D0 C8                      	ROR	AL,1			; and Rotate it right
 5956/26D1 : D0 C8                      	ROR	AL,1
 5957/26D3 : D0 C8                      	ROR	AL,1
 5958/26D5 : D0 C8                      	ROR	AL,1
 5959/26D7 : 24 0F                      	AND	AL,0FH			; Mask off upper nybble
 5960/26D9 : 3C 0A                      	CMP	AL,0AH			; 0-9? < A hex?
 5961/26DB : 72 02                      	JC	ADD301			; Skip Add 7
 5962/26DD : 04 07                      	ADD	AL,07H			; Bring it up to ASCII A-F
 5963/26DF :                            ADD301:
 5964/26DF : 04 30                      	ADD	AL,'0'			; And make it full ASCII
 5965/26E1 : 8A E8                      	MOV	CH,AL			; Store high order byte
 5966/26E3 : C3                         	RET
 5967/26E4 :                            ;
 5968/26E4 :                            ; Convert "&Hnnnn" to FPREG
 5969/26E4 :                            ; Gets a character from (HL) checks for Hexadecimal ASCII numbers "&Hnnnn"
 5970/26E4 :                            ; Char is in A, NC if char is;<=>?@ A-z, CY is set if 0-9
 5971/26E4 :                            HEXTFP:
 5972/26E4 : 87 DA                      	XCHG	BX,DX			; Move code string pointer to DE
 5973/26E6 : BB 00 00                   	MOV	BX,0000H		; Zero out the value
 5974/26E9 : E8 17 00                   	CALL	GETHEX			; Check the number for valid hex
 5975/26EC : 72 40                      	JC	HXERR			; First value wasn't hex, HX error
 5976/26EE : EB 05                      	JMP	HEXLP1			; Convert first character
 5977/26F0 :                            HEXLP:
 5978/26F0 : E8 10 00                   	CALL	GETHEX			; Get second and addtional characters
 5979/26F3 : 72 2D                      	JC	HEXIT			; Exit if not a hex character
 5980/26F5 :                            HEXLP1:
 5981/26F5 : 03 DB                      	ADD	BX,BX			; Rotate 4 bits to the left
 5982/26F7 : 03 DB                      	ADD	BX,BX
 5983/26F9 : 03 DB                      	ADD	BX,BX
 5984/26FB : 03 DB                      	ADD	BX,BX
 5985/26FD : 0A C3                      	OR	AL,BL			; Add in D0-D3 into L
 5986/26FF : 8A D8                      	MOV	BL,AL			; Save new value
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 101 - 8/7/2025 21:50:51


 5987/2701 : EB ED                      	JMP	HEXLP			; And continue until all hex characters are in
 5988/2703 :                            ;
 5989/2703 :                            GETHEX:
 5990/2703 :                            ;	LAHF
 5991/2703 : 42                         	INC	DX			; Next location
 5992/2704 :                            ;	SAHF
 5993/2704 : 87 DA                      	XCHG	BX,DX
 5994/2706 : 8A 07                      	MOV	AL,[BX]
 5995/2708 : 87 DA                      	XCHG	BX,DX			; Load character at pointer
 5996/270A : 3C 20                      	CMP	AL,' '
 5997/270C : 74 F5                      	JZ	GETHEX			; Skip spaces
 5998/270E : 2C 30                      	SUB	AL,'0'			; Get absolute value
 5999/2710 : 73 01                      	JNC	GETHEX1
 6000/2712 : C3                         	RET				; < "0", error
 6001/2713 :                            GETHEX1:
 6002/2713 : 3C 0A                      	CMP	AL,0AH
 6003/2715 : 72 07                      	JC	NOSUB7			; Is already in the range 0-9
 6004/2717 : 2C 07                      	SUB	AL,07H			; Reduce to A-F
 6005/2719 : 3C 0A                      	CMP	AL,0AH			; Value should be $0A-$0F at this point
 6006/271B : 73 01                      	JNC	NOSUB7
 6007/271D : C3                         	RET				; CY set if was :		; < = > ? @
 6008/271E :                            ;
 6009/271E :                            NOSUB7:
 6010/271E : 3C 10                      	CMP	AL,10H			; > Greater than "F"?
 6011/2720 : F5                         	CMC
 6012/2721 : C3                         	RET				; CY set if it wasn't valid hex
 6013/2722 :                            ;
 6014/2722 :                            HEXIT:
 6015/2722 : 87 DA                      	XCHG	BX,DX			; Value into DE, Code string into HL
 6016/2724 : 8A C6                      	MOV	AL,DH			; Load DE into AC
 6017/2726 : 8A CA                      	MOV	CL,DL			; For prep to
 6018/2728 : 53                         	PUSH	BX
 6019/2729 : E8 1F F0                   	CALL	ACPASS			; ACPASS to set AC as integer into FPREG
 6020/272C : 5B                         	POP	BX
 6021/272D : C3                         	RET
 6022/272E :                            ;
 6023/272E :                            HXERR:
 6024/272E : B2 26                      	MOV	DL,HX			; ?HEX Error
 6025/2730 : E9 EE DE                   	JMP	ERROR
 6026/2733 :                            ;
 6027/2733 :                            ; BIN$(NN) Convert integer to a 1-16 char binary string
 6028/2733 :                            BIN:
 6029/2733 : E8 A3 EA                   	CALL	TSTNUM			; Verify it's a number
 6030/2736 : E8 B7 E5                   	CALL	DEINT			; Get integer -32768 to 32767
 6031/2739 :                            BIN2:
 6032/2739 : 51                         	PUSH	CX			; Save contents of BC
 6033/273A : BB 35 33                   	MOV	BX,PBUFF
 6034/273D : B5 11                      	MOV	CH,17			; One higher than max char count
 6035/273F :                            ZEROSUP:				; Suppress leading zero
 6036/273F : FE CD                      	DEC	CH			; Max 16 chars
 6037/2741 : 8A C5                      	MOV	AL,CH
 6038/2743 : 3C 01                      	CMP	AL,01H
 6039/2745 : 74 06                      	JZ	BITOUT			; Always output at least one character
 6040/2747 :                            ;	RCL	DL,1
 6041/2747 :                            ;	RCL	DH,1
 6042/2747 : D1 D2                      	RCL	DX,1
 6043/2749 : 73 F4                      	JNC	ZEROSUP
 6044/274B : EB 02                      	JMP	BITOUT2
 6045/274D :                            BITOUT:
 6046/274D :                            ;	RCL	DL,1
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 102 - 8/7/2025 21:50:51


 6047/274D :                            ;	RCL	DH,1
 6048/274D : D1 D2                      	RCL	DX,1
 6049/274F :                            BITOUT2:
 6050/274F : B0 30                      	MOV	AL,'0'			; Char for '0'
 6051/2751 : 14 00                      	ADC	AL,0			; If carry set then '0' --> '1'
 6052/2753 : 88 07                      	MOV	[BX],AL
 6053/2755 :                            ;	LAHF
 6054/2755 : 43                         	INC	BX
 6055/2756 :                            ;	SAHF
 6056/2756 : FE CD                      	DEC	CH
 6057/2758 : 75 F3                      	JNZ	BITOUT
 6058/275A : 32 C0                      	XOR	AL,AL			; Terminating character
 6059/275C : 88 07                      	MOV	[BX],AL			; Store zero to terminate
 6060/275E :                            ;	LAHF
 6061/275E : 43                         	INC	BX			; Make sure PBUFF is terminated
 6062/275F :                            ;	SAHF
 6063/275F : 88 07                      	MOV	[BX],AL			; Store the double zero
 6064/2761 : 59                         	POP	CX
 6065/2762 : BB 35 33                   	MOV	BX,PBUFF
 6066/2765 : E9 CF F0                   	JMP	STR1
 6067/2768 :                            ;
 6068/2768 :                            ; Convert "&Bnnnn" to FPREG
 6069/2768 :                            ; Gets a character from (HL) checks for Binary ASCII numbers "&Bnnnn"
 6070/2768 :                            BINTFP:
 6071/2768 : 87 DA                      	XCHG	BX,DX			; Move code string pointer
 6072/276A : BB 00 00                   	MOV	BX,0000H		; Zero out the value
 6073/276D : E8 1B 00                   	CALL	CHKBIN			; Check the number for valid bin
 6074/2770 : 72 2D                      	JC	BINERR			; First value wasn't bin, HX error
 6075/2772 :                            BINIT:
 6076/2772 : 2C 30                      	SUB	AL,'0'
 6077/2774 : 03 DB                      	ADD	BX,BX			; Rotate HL left
 6078/2776 : 0A C3                      	OR	AL,BL
 6079/2778 : 8A D8                      	MOV	BL,AL
 6080/277A : E8 0E 00                   	CALL	CHKBIN			; Get second and addtional characters
 6081/277D : 73 F3                      	JNC	BINIT			; Process if a bin character
 6082/277F : 87 DA                      	XCHG	BX,DX			; Value into DE, Code string into HL
 6083/2781 : 8A C6                      	MOV	AL,DH			; Load DE into AC
 6084/2783 : 8A CA                      	MOV	CL,DL			; For prep to
 6085/2785 : 53                         	PUSH	BX
 6086/2786 : E8 C2 EF                   	CALL	ACPASS			; ACPASS to set AC as integer into FPREG
 6087/2789 : 5B                         	POP	BX
 6088/278A : C3                         	RET
 6089/278B :                            ;
 6090/278B :                            ; Char is in A, NC if char is 0 or 1
 6091/278B :                            CHKBIN:
 6092/278B :                            ;	LAHF
 6093/278B : 42                         	INC	DX
 6094/278C :                            ;	SAHF
 6095/278C : 87 DA                      	XCHG	BX,DX
 6096/278E : 8A 07                      	MOV	AL,[BX]
 6097/2790 : 87 DA                      	XCHG	BX,DX
 6098/2792 : 3C 20                      	CMP	AL,' '
 6099/2794 : 74 F5                      	JZ	CHKBIN			; Skip spaces
 6100/2796 : 3C 30                      	CMP	AL,'0'			; Set C if < '0'
 6101/2798 : 73 01                      	JNC	CHKBIN1
 6102/279A : C3                         	RET
 6103/279B :                            CHKBIN1:
 6104/279B : 3C 32                      	CMP	AL,'2'
 6105/279D : F5                         	CMC				; Set C if > '1'
 6106/279E : C3                         	RET
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 103 - 8/7/2025 21:50:51


 6107/279F :                            ;
 6108/279F :                            BINERR:
 6109/279F : B2 28                      	MOV	DL,BN			; ?BIN Error
 6110/27A1 : E9 7D DE                   	JMP	ERROR
 6111/27A4 :                            ;
 6112/27A4 :                            JJUMP1:
 6113/27A4 : E9 6F DA                   	JMP	CSTART			; Go and initialise
 6114/27A7 :                            ;
 6115/27A7 :                            MONITR:
 6116/27A7 : FA                         	CLI				; Clear Interrupt flag
 6117/27A8 :                            ;	JMP	0C000H			; Restart (Normally Monitor)
 6118/27A8 : E9 98 D8                   	jmp	ret_mon
 6119/27AB :                            
 6120/27AB :                            INITST:
 6121/27AB : B0 00                      	MOV	AL,0			; Clear break flag
 6122/27AD : 2E A2 63 05                	MOV	[BRKFLG],AL
 6123/27B1 : E9 6A DA                   	JMP	INIT
 6124/27B4 :                            ;
 6125/27B4 :                            TSTBIT:
 6126/27B4 :                            ;	LAHF
 6127/27B4 : 86 E0                      	XCHG	AH,AL
 6128/27B6 : 50                         	PUSH	AX			; Save bit mask
 6129/27B7 : 86 E0                      	XCHG	AH,AL
 6130/27B9 : 22 C5                      	AND	AL,CH			; Get common bits
 6131/27BB : 59                         	POP	CX			; Restore bit mask
 6132/27BC : 3A C5                      	CMP	AL,CH           	; Same bit set?
 6133/27BE : B0 00                      	MOV	AL,0			; Return 0 in A
 6134/27C0 : C3                         	RET
 6135/27C1 :                            ;
 6136/27C1 :                            OUTNCR:
 6137/27C1 : E8 21 E2                   	CALL	OUTC			; Output character in A
 6138/27C4 : E9 C1 E7                   	JMP	PRCRLF			; Output CRLF
 6139/27C7 :                            
 6140/27C7 :                            CODE_END:
 6141/27C7 :                            
 6142/27C7 : =3200H                     SYSSTK	equ	((CODE_END+1000h)&0f000h)+200h
 6143/27C7 : =3200H                     TB_WORK		equ	SYSSTK
 6144/27C7 :                            	END
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 104 - 8/7/2025 21:50:51


  Symbol Table (* = unused):
  --------------------------

 ABPASS :                      174D C |  ABS :                         201D C |
*ACCSUM :                      0CC7 C |  ACPASS :                      174B C |
 ADD30 :                       26C9 C |  ADD301 :                      26DF C |
 ADDEXP :                      1F8B C |  ADDEXP1 :                     1FAD C |
 ADDIG :                       220A C |  ADDPHL :                      1C99 C |
 ALLFOL :                      1B52 C |  ALLFOL1 :                     1B54 C |
 ANTVLU :                      10B5 C |
*ARCHITECTURE :                                        "i386-unknown-win32" - |
*ARET :                        262E C |  ARLDSV :                      15D8 C |
 ARLDSV1 :                     15DF C |  ARREND :                      3326 - |
 ARRLP :                       1986 C |  ASC :                         1B0F C |
 ASCTFP :                      2189 C |  ASPCS :                       0FED C |
 ATN :                         25DD C |  ATN1 :                        25E5 C |
 ATN2 :                        25EA C |  ATN3 :                        25FF C |
 ATNTAB :                      2609 C |  ATOH :                        0D0F C |
 BADINP :                      1014 C |  BADINP1 :                     101E C |
 BAKSTK :                       58E C |  BAKTMP :                      1AE5 C |
 BAKTMP1 :                     1AF7 C |  BASTXT :                       574 C |
 BCDEFP :                      2058 C |  BFREE :                        2A9 C |
 BIN :                         2733 C | *BIN2 :                        2739 C |
 BINERR :                      279F C |  BINIT :                       2772 C |
 BINTFP :                      2768 C |  BITOUT :                      274D C |
 BITOUT2 :                     274F C |  BKSP :                           8 - |
 BN :                            28 - |  BNORM :                       1D27 C |
 BNRMLP :                      1D2D C |  BRK :                         0C4F C |
 BRKFLG :                       563 C |  BRKLIN :                      331A - |
 BRKMSG :                       588 C |  BRKRET :                       29B C |
 BS :                            10 - |  BSERR :                       162C C |
 BUFFER :                      32AD - |  BYT2ASC :                     26BF C |
 BYTSFT :                      1EE4 C | *CASESENSITIVE :                  0 - |
 CFEVAL :                      1545 C |  CHARTY :                      14D6 C |
 CHEKFN :                      181E C |  CHKBIN :                      278B C |
 CHKBIN1 :                     279B C |  CHKCHR :                       202 C |
 CHKLTR :                      0CDA C |  CHKLTR1 :                     0CE1 C |
 CHKSTK :                       5D8 C |  CHKSUM :                       560 C |
 CHKSYN :                       9CC C |  CHKSYN1 :                      9E2 C |
 CHKTYP :                      11DE C |  CHKTYP1 :                     11E8 C |
 CHR :                         1B29 C |  CLEAR :                       0D48 C |
 CLEAR1 :                      0D4D C |  CLEAR2 :                      0D6D C |
 CLOTST :                      0A29 C |  CLOTST1 :                     0A33 C |
 CLREG :                        7C5 C |  CLRPTR :                       78B C |
 CLRSCRN :                       0C - |  CLS :                         262F C |
 CMPFP :                       20CA C |  CMPFP1 :                      20D4 C |
 CMPFP2 :                      20DE C |  CMPFP3 :                      20E8 C |
 CMPFP4 :                      20F2 C |  CMPLG1 :                      13F7 C |
 CMPLG2 :                      1411 C |  CMPLOG :                      13F5 C |
 CMPNUM :                      20A3 C |  CMPNUM1 :                     20AC C |
 CMPNUM2 :                     20B8 C |  CMPNUM3 :                     20C2 C |
 CMPRES :                      146D C |  CMPSTR :                      143E C |
 CMPSTR1 :                     1445 C |  CMPSTR2 :                     144C C |
 CMPSTR3 :                     1455 C |  CN :                            20 - |
 CNVNUM :                      219A C |  CODE_END :                    27C7 C |
 COLD :                         20B C |  COMMAN :                       559 C |
 COMPL :                       1DC1 C |  CONCAT :                      1A42 C |
 CONCAT1 :                     1A69 C |  CONEXP :                      21CF C |
 CONPOS :                      1D22 C | *CONSTPI :        3.141592653589793 - |
 CONT :                        0C9F C |  CONT1 :                       0CAE C |
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 105 - 8/7/2025 21:50:51


 CONTAD :                      3320 - |  CONVAR :                      130F C |
 COS :                         2554 C |  COUNT :                       0AC0 C |
 COUNT1 :                      0AD6 C |  CPDEHL :                       9C0 C |
 CPDEHL1 :                      9C7 C |  CPYLIT :                       8D6 C |
 CR :                            0D - |  CRARLP :                      1662 C |
 CREARY :                      1631 C |  CREARY1 :                     163D C |
 CRESTR :                      0EA8 C |  CRESTR1 :                     0EA9 C |
 CRNCLP :                       803 C |  CRNCLP1 :                      80C C |
 CRNCLP2 :                      815 C |  CRNCLP3 :                      81C C |
 CRNCLP4 :                      828 C |  CRNCLP5 :                      830 C |
 CRTMST :                      1863 C |  CRTST :                       1878 C |
 CRTSTE :                      1895 C |  CRTSTE1 :                     189C C |
 CRUNCH :                       7F9 C |  CSTART :                       216 C |
 CS_SEG :                        40 - |  CTLOFG :                       55B C |
 CTRLC :                          3 - |  CTRLG :                          7 - |
 CTRLO :                         0F - |  CTRLQ :                         11 - |
 CTRLR :                         12 - |  CTRLS :                         13 - |
 CTRLU :                         15 - |  CUROPR :                      3311 - |
 CURPOS :                      32F7 - |  DATA :                        0E31 C |
*DATE :                  "8/7/2025" - |  DATFLG :                      32FA - |
 DATLIN :                      3315 - |  DATSNR :                       5FE C |
 DCBCDE :                      212B C |  DCBCDE1 :                     2135 C |
 DDERR :                        613 C |  DEEK :                        264F C |
 DEF :                         1764 C |  DEFSIZ :                      166B C |
 DEFSIZ1 :                     169B C |  DEINT :                       0CF0 C |
 DEINT1 :                      0CFA C |  DEL :                           7F - |
 DELCHR :                       923 C |  DEPINT :                      0CEB C |
 DETHL4 :                      206F C |  DETHLB :                      2071 C |
 DIGTXT :                      22F3 C |  DIGTXT1 :                     22FD C |
 DIM :                         14A2 C |  DIMRET :                      1497 C |
 DIMRET1 :                     149E C |  DINPOS :                      0A20 C |
 DIV :                         1EF9 C |  DIV1 :                         51B - |
 DIV10 :                       1EED C |  DIV2 :                         521 - |
 DIV2_OP :                      520 C |  DIV3 :                         527 - |
 DIV3_OP :                      526 C |  DIV4 :                         52B - |
 DIV4_OP :                      52A C |  DIVLP :                       1F2D C |
 DIVSUP :                       51A C |  DOAGN :                        7E7 C |
 DOCOM :                       0FB1 C |  DOCOM1 :                      0FC1 C |
 DODEL :                        8FE C |  DOEBIT :                      234E C |
 DOFN :                        17A0 C |  DOFN1 :                       17C2 C |
 DOFN2 :                       17F7 C |  DOKE :                        265C C |
 DONULL :                      0F92 C |  DOSPC :                       0FE7 C |
 DOTAB :                       0FCB C |  DPOINT :                      21CB C |
 DTSTR :                       187F C |  DVBCDE :                      1EFB C |
 DVBCDE1 :                     1F03 C |  DZ :                            14 - |
 DZERR :                        60B C |  ECHDEL :                       915 C |
 ECHDEL1 :                      917 C |  EDIGIT :                      2232 C |
 EMROM :                        200 - |  ENDBUF :                       8E6 C |
 ENDCON :                      21EA C |  ENDCON1 :                     21F6 C |
 ENDDIM :                      1719 C |  ENDINP :                      0F82 C |
 ENDNAM :                      14CC C |  ENDPRG :                      0C68 C |
 ENFMEM :                       5E5 C |  ENFMEM1 :                      5E6 C |
 ERRIN :                        645 C |  ERRIN1 :                       658 C |
 ERRLIN :                      331E - |  ERRMSG :                       576 C |
 ERROR :                        621 C |  ERRORS :                       4E7 C |
 ESC :                           1B - |  EVAL :                        11EF C |
 EVAL1 :                       11F4 C |  EVAL2 :                       11FD C |
 EVAL3 :                       1201 C |  EVAL4 :                       120F C |
 EVLPAR :                      12F5 C |  EVNOT :                       147B C |
 EXCUTE :                      0BC4 C |  EXP :                         2414 C |
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 106 - 8/7/2025 21:50:51


 EXP1 :                        242A C |  EXP2 :                        2436 C |
 EXPLP :                       21BA C |  EXPTAB :                      2466 C |
 EXPTEN :                      2368 C |  EXTIG :                       112C C |
*FALSE :                          0 - |  FANDT :                       1167 C |
 FC :                             8 - |  FCERR :                       0D0A C |
 FDTLP :                       113D C |  FDTLP1 :                      1155 C |
 FINDEL :                      16D6 C |  FLGDIF :                      1FFB C |
 FLGDIF1 :                     2000 C |  FLGREL :                      2006 C |
 FNARG :                       332C - |  FNCTAB :                       331 C |
 FNDARY :                      15E5 C |  FNDARY1 :                     15E7 C |
 FNDELP :                      16E1 C |  FNDELP1 :                     16E2 C |
 FNDELP2 :                     16FF C |  FNDEND :                       745 C |
 FNDNUM :                      1C5B C |  FNDTOK :                      0A90 C |
 FNDVAR :                      1520 C |  FNDWRD :                       83C C |
 FNOFST :                      1325 C |  FNRGNM :                      332A - |
 FNTHR :                       1532 C |  FNVAL :                       1359 C |
 FOPRND :                      1233 C |  FOPRND1 :                     123C C |
 FOPRND2 :                     1247 C |  FOPRND3 :                     124C C |
 FOPRND4 :                     125C C |  FOPRND5 :                     1270 C |
 FOR :                         0AF8 C |  FORFLG :                      3317 - |
 FORFND :                      0B2D C |  FORSLP :                      0B0E C |
 FPADD :                       1CA8 C |  FPADD1 :                      1CAF C |
 FPADD2 :                      1CB9 C |  FPBCDE :                      2049 C |
 FPEXP :                       3333 - |  FPINT :                       20F5 C |
 FPINT1 :                      2102 C |  FPINT2 :                      2112 C |
 FPINT3 :                      2122 C |  FPINT4 :                      2129 C |
 FPMULT :                      1E7C C |  FPMULT1 :                     1E82 C |
 FPREG :                       3330 - |  FPROND :                      1D8F C |
 FPROND1 :                     1D94 C |  FPROND2 :                     1D99 C |
 FPROND3 :                     1D9E C |  FPROND4 :                     1DA5 C |
 FPSINT :                      0CE5 C |  FPTHL :                       206C C |
 FRE :                         171E C |  FRENUM :                      1741 C |
 FRMEVL :                      1312 C |  FRMEVL1 :                     1323 C |
 GARBGE :                      1944 C |  GARBLP :                      1948 C |
 GETCH :                         47 C |  GETCHR :                      0BF3 C |
 GETCHR1 :                     0BFB C |  GETCMD :                       675 C |
 GETCMD1 :                      6A4 C |  GETCMD2 :                      6CA C |
 GETHEX :                      2703 C |  GETHEX1 :                     2713 C |
 GETINT :                      1C5E C |  GETLEN :                      1B00 C |
 GETLIN :                       935 C |  GETLN :                       0D12 C |
 GETNUM :                      11D6 C |  GETNXT :                       859 C |
 GETNXT1 :                      869 C |  GETSTR :                      1AB9 C |
 GETVAR :                      14AA C |  GETVAR1 :                     14AC C |
 GNXARY :                      1985 C |  GOFUNC :                      1365 C |
 GOSUB :                       0DB4 C |  GOTO :                        0DD0 C |
 GOTO1 :                       0DE8 C |  GOTO2 :                       0DED C |
 GRBARY :                      19AF C |  GRBDON :                      18FC C |
 GRBDON1 :                     1900 C |  GRBLP :                       1959 C |
 GSTRCU :                      1ABC C |  GSTRDE :                      1AC2 C |
 GSTRDE1 :                     1ACA C |  GSTRHL :                      1AC0 C |
*GTFLNM :                      1B13 C |  GTFLNM1 :                     1B1B C |
 GTFNAM :                      14B1 C |  GTFNAM1 :                     14B9 C |
 GTLNLP :                      0D15 C |  GTLNLP1 :                     0D1B C |
 GTLNLP2 :                     0D2D C |  GTSIXD :                      22A1 C |
 GTVLUS :                      107C C |  GTVLUS1 :                     1095 C |
 GTVLUS2 :                     10A4 C |  GTVLUS3 :                     10B4 C |
 HALF :                        2394 C |  HALFPI :                      25AA C |
*HAS64 :                          0 - | *HASFPU :                         0 - |
 HEX :                         2679 C |  HEX1 :                        2695 C |
 HEX2 :                        2698 C |  HEX3 :                        26A9 C |
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 107 - 8/7/2025 21:50:51


 HEX4 :                        26AE C |  HEXIT :                       2722 C |
 HEXLP :                       26F0 C |  HEXLP1 :                      26F5 C |
 HEXTFP :                      26E4 C |  HX :                            26 - |
 HXERR :                       272E C |  ID :                            16 - |
 IDTEST :                      1808 C |  IDTEST1 :                     1819 C |
 IF :                          0EE8 C |  IFGO :                        0EF8 C |
 IFGO1 :                       0F03 C |  IFGO2 :                       0F0B C |
 IFJMP :                       0BCB C |  INCHL :                       2068 C |
 INCLEN :                      0A1B C |  INDFND :                       5B1 C |
 INDFND1 :                      5B8 C |  INEWLN :                       6F0 C |
 INIT :                         21E C |  INITAB :                       511 C |
 INITBE :                       576 C |  INITST :                      27AB C |
 INMSG :                        57D C |  INP :                         1C17 C |
 INPBIN :                      10E8 C |  INPBRK :                      0C65 C |
 INPBRK1 :                     0C67 C |  INPORT :                       555 - |
 INPSUB :                       554 C |  INPUT :                       1028 C |
 INRNG :                       22B3 C |  INT :                         2139 C |
 INT1 :                        2146 C | *INTREQ :                       3FC D |
 INTVAR :                       7A8 C |  INVSGN :                      2023 C |
 IP_OFF :                         0 - |  ITMSEP :                      10D2 C |
*JJUMP1 :                      27A4 C |  JSTZER :                      2375 C |
 KILFOR :                      11C1 C |  KILFOR1 :                     11D0 C |
 KILIN :                        930 C |  LCRFLG :                      32F8 - |
 LEFT :                        1B3B C |  LEN :                         1AFC C |
 LET :                         0E54 C |  LETNUM :                      0EBA C |
 LETSTR :                      0E7C C |  LF :                            0A - |
 LFRGNM :                      1C0B C |  LINEAT :                       572 C |
 LINEIN :                      2245 C |  LINES :                       263E C |
 LINESC :                       55C C |  LINESN :                       55E C |
 LINFND :                       6CC C |  LIST :                        0A40 C |
 LIST1 :                       0A46 C |  LISTLP :                      0A4E C |
 LISTLP1 :                     0A5E C | *LISTON :                         1 - |
 LOADFP :                      205B C |  LOG :                         1E2B C |
 LOG1 :                        1E35 C |  LOGTAB :                      1E1E C |
 LOKFOR :                       593 C |  LOKFOR1 :                      59B C |
 LOOPST :                      3313 - |  LS :                            1C - |
 LSTBIN :                      3318 - |  LSTLP2 :                      0A7B C |
 LSTLP3 :                      0A7E C |  LSTRAM :                      32FB - |
 LSTRND :                       550 C |  LTSTND :                      10F7 C |
 LWIDTH :                       558 C | *MACEXP :                         7 - |
 MAKINT :                      1C61 C |  MAKINT1 :                     1C6D C |
 MAKNUM :                      22D5 C |  MANLP :                       21A7 C |
 MATCH :                        89B C |  MEMMSG :                       2FF C |
 MID :                         1B88 C |  MID1 :                        1B47 C |
 MID2 :                        1B98 C |  MIDNUM :                      1C11 C |
 MINCDE :                      1D04 C |  MINUS :                       12FD C |
 MKTMST :                      1860 C |  MLDBLP :                      216E C |
 MLDBLP1 :                     2175 C |  MLDEBC :                      2162 C |
 MLDEBC1 :                     216C C |  MLOOP :                        23B C |
 MLSP10 :                      1FC7 C |  MLSP101 :                     1FD1 C |
 MLSP102 :                     1FD8 C |  MLSP103 :                     1FE5 C |
 MO :                            24 - | *MOMCPU :                      8086 - |
*MOMCPUNAME :                "8086" - |  MONITR :                      27A7 C |
 MORDT :                       1104 C |  MORDT1 :                      1112 C |
 MORDT2 :                      111F C |  MORDT3 :                      112A C |
 MORINP :                       940 C |  MOVBUF :                       71E C |
 MOVDIR :                       8AA C |  MOVLP :                        5C6 C |
 MOVLP1 :                       5D4 C |  MOVSTR :                       5BF C |
 MOVUP :                        5BC C |  MRPRNT :                      0F0E C |
*MSIZE :                        238 C |  MUL8LP :                      1EAF C |
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 108 - 8/7/2025 21:50:51


 MULLN2 :                      1E72 C |  MULT :                        1E7A C |
 MULT8 :                       1EA5 C |  MULTEN :                      21FC C |
 MULVAL :                      3342 - |  MVSTPT :                      0EB1 C |
 NEDMOR :                      1078 C |  NEGAFT :                      23AA C |
 NEMEM :                        2A1 C | *NESTMAX :                      100 - |
 NEW :                          788 C |  NEXITM :                      0FFA C |
 NEXT :                        1171 C |  NEXT1 :                       1174 C |
 NEXT2 :                       1179 C |  NEXT3 :                       1185 C |
 NF :                             0 - |  NFERR :                        60F C |
 NGETCH :                        63 C |  NKBHIT :                        67 C |
*NMIFLG :                       562 C |  NOCHNG :                       894 C |
 NOENED :                      237D C |  NOLIN :                       0C87 C |
 NOLIN1 :                      0C9C C |  NOMADD :                      1EC6 C |
 NOMLAD :                      2184 C |  NOPMPT :                      1044 C |
 NOPMPT1 :                     1045 C |  NOPMPT2 :                     104E C |
 NOPMPT3 :                     105E C |  NORMAL :                      1D4B C |
 NOSPC :                        88B C |  NOSUB7 :                      271E C |
 NOSWAP :                      1CCD C |  NOSWAP1 :                     1CD2 C |
 NOSWAP2 :                     1CF3 C |  NOSWAP3 :                     1CFD C |
 NOTAMP :                      12CD C |  NOTAMP1 :                     12D8 C |
 NOTAMP2 :                     12E3 C |  NOTAMP3 :                     12EA C |
 NOTAMP4 :                     12F1 C |  NOTSTR :                      14E8 C |
 NOTSTR1 :                     14F2 C |  NOXOR :                       1C41 C |
 NPUTCH :                        6B C |  NSCFOR :                      14FD C |
 NSCFOR1 :                     1516 C |  NULFLG :                       55A C |
 NULL :                        0CBC C |  NULL1 :                       0CC2 C |
 NULLP :                       0F9B C |  NULLP1 :                      0FA0 C |
 NULLS :                        557 C |  NUMASC :                      225A C |
 NXTARY :                      1601 C |  NXTARY1 :                     161A C |
 NXTARY2 :                     1625 C |  NXTBYT :                       870 C |
 NXTCHR :                       8CC C |  NXTDAT :                      3328 - |
 NXTDTA :                      0E30 C |  NXTITM :                      106C C |
 NXTITM1 :                     106E C |  NXTOPR :                      331C - |
 NXTSTL :                      0E39 C |  NXTSTT :                      0E3F C |
 NXTSTT1 :                     0E46 C |  NXTSTT2 :                     0E4B C |
 OD :                             6 - |  OKMSG :                        582 C |
 OM :                            0C - |  OMERR :                        5FA C |
 ON :                          0EC1 C |  ONGO :                        0ED3 C |
 ONGOLP :                      0ED5 C |  ONGOLP1 :                     0EDE C |
 ONJMP :                       0BCE C |  ONJMP1 :                      0BD5 C |
 ONJMP2 :                      0BDC C |  OPNPAR :                      11EB C |
 OPRND :                       1298 C |  OPRND1 :                      12A7 C |
 OPRND2 :                      12AC C |  OPRND3 :                      12BF C |
 OPRND4 :                      12C6 C |  OS :                            1A - |
 OTKLN :                        92D C |  OTPORT :                       518 - |
 OUTC :                         9E5 C |  OUTC1 :                        9F6 C |
 OUTEXP :                      2366 C |  OUTIT :                        9B4 C |
 OUTNBS :                       9B9 C |  OUTNCR :                      27C1 C |
 OUTSUB :                       517 C |  OUTWRD :                      0A9F C |
 OV :                            0A - |  OVERR :                        61B C |
 OVTST1 :                      1FB6 C |  OVTST2 :                      1FBC C |
 OVTST3 :                      1FBE C |  OVTST4 :                      1FC4 C |
 PADD :                        222D C |  PAND :                        1393 C |
 PAND1 :                       1395 C |  PASSA :                       175E C |
 PBUFF :                       3335 - |  PEEK :                        1C74 C |
 PEND :                        0C5C C |  PEND1 :                       0C5F C |
 PHLTFP :                      2046 C |  PLUCDE :                      1DA8 C |
 PNORM :                       1D5B C |  POINT :                        567 C |
 POKE :                        1C80 C |  POPAF :                       1928 C |
 POPHL :                       1AE3 C |  POPHRT :                      1EE2 C |
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 109 - 8/7/2025 21:50:51


 POPNOK :                       665 C |  POR :                         138F C |
 POR1 :                        13D1 C |  POS :                         175B C |
 POSINT :                      0CE8 C |  POUT :                        1C23 C |
 POWER :                       23BD C |  POWER1 :                      23CF C |
 POWER2 :                      23F6 C |  POWER3 :                      2405 C |
 POWER4 :                      240A C |  POWER5 :                      23D6 C |
 POWERS :                      2398 C |  PRCRLF :                      0F88 C |
 PRINT :                       0F12 C |  PRITAB :                       4D2 C |
 PRNTHL :                      224D C |  PRNTLP :                      0F14 C |
 PRNTLP1 :                     0F17 C |  PRNTLP2 :                     0F1E C |
 PRNTLP3 :                     0F25 C |  PRNTLP4 :                     0F2D C |
 PRNTLP5 :                     0F34 C |  PRNTNB :                      0F6D C |
 PRNTOK :                       666 C |  PRNTST :                      0F72 C |
 PRNTST1 :                     0F77 C |  PRNUMS :                      18D0 C |
 PROCES :                       95C C |  PROCES1 :                      969 C |
 PROCES2 :                      96D C |  PROCES3 :                      974 C |
 PROGND :                      3322 - |  PROGST :                      3345 - |
 PROG_CODE :                    200 C |  PROMPT :                       7EC C |
 PRS :                         18D3 C |  PRS1 :                        18D6 C |
 PRSLP :                       18DE C |  PRSLP1 :                      18E3 C |
 PRSLP2 :                      18F3 C |  PSET :                         56A C |
 PSUB :                        1CA3 C |  PTEXT :                         62 C |
 PTRLP :                        734 C |  PTRLP1 :                       740 C |
 PTST1 :                         58 C |  PUTBUF :                       99C C |
 PUTCH :                         4E C |  PUTCTL :                       9A0 C |
 PUTFID :                      0B8A C | *PUTS :                          57 C |
 QTSTLP :                      1882 C |  QTSTR :                       187B C |
 QUARTR :                      25AE C |  RAMTOP :                      3200 - |
 RD :                            12 - |  READ :                        1063 C |
 READFG :                      3319 - |  REDO :                        1001 C |
*RELAXED :                        0 - |  REM :                         0E35 C |
 REM1 :                        0E37 C |  RESDIV :                      1F44 C |
 RESDIV1 :                     1F46 C |  RESDIV2 :                     1F53 C |
 RESEED :                      253E C |  RESET :                        56D C |
 RESTNL :                      0C21 C |  RESTOR :                      0C07 C |
 RESZER :                      1D45 C |  RETADR :                      158C C |
 RETINT :                      200B C |  RETLIN :                      0E26 C |
 RETNAD :                       8A4 C |  RETNUL :                      1590 C |
 RETNUM :                      130A C |  RETREL :                      1FF7 C |
 RETREL1 :                     1FF9 C |  RETURN :                      0DFA C |
 RETURN1 :                     0DFD C |  RETURN2 :                     0E0D C |
 RET_MON :                       43 C |  RG :                             4 - |
 RIGHT :                       1B79 C |  RIGHT1 :                      1B40 C |
*RINPUT :                       564 C |  RLTLP :                       1213 C |
 RLTLP1 :                      122A C |  RND :                         24C3 C |
 RND0 :                        24D7 C |  RND1 :                        250E C |
 RND2 :                        2535 C |  RNDTAB :                      2548 C |
 RNGTST :                      2381 C |  RNGTST1 :                     2392 C |
 RONDB :                       1D75 C |  RONDB1 :                      1D7F C |
 RONDUP :                      1D73 C |  ROUND :                       1C96 C |
 RSCALE :                      2227 C |  RSLNBK :                      0AEB C |
 RSTSTR :                      1BA6 C |  RSTSTR1 :                     1BBF C |
 RSTSTR2 :                     1BCC C |  RUN :                         0DA7 C |
 RUN1 :                        0DAC C |  RUNCNT :                      0B8E C |
 RUNCNT1 :                     0BA2 C |  RUNCNT2 :                     0BB1 C |
 RUNFST :                       7A0 C |  RUNLIN :                      0DCF C |
 SAVEXP :                      1D47 C |  SAVSTP :                      0B77 C |
 SAVSTR :                      1841 C |  SBSCPT :                      159C C |
 SCALE :                       1DE5 C |  SCALLP :                      1DE7 C |
 SCALMI :                      21D4 C |  SCALMI1 :                     21D9 C |
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 110 - 8/7/2025 21:50:51


 SCALPL :                      21F9 C |  SCNEND :                      1A02 C |
 SCNEND1 :                     1A0B C |  SCPTLP :                      15A8 C |
 SEARCH :                       855 C |  SEED :                         52D C |
 SETIO :                       1C4C C |  SETLIN :                      0AB3 C |
 SETLIT :                       8C0 C |  SETPTR :                       72C C |
 SETTOP :                       252 C |  SFTPRG :                       6D5 C |
 SGN :                         2003 C |  SGNEXP :                      1375 C |
 SGNEXP1 :                     137C C |  SGNEXP2 :                     1381 C |
 SGNEXP3 :                     1388 C |  SGNEXP4 :                     138D C |
 SGNRES :                      3334 - |  SHRITE :                      1DF5 C |
 SHRLP :                       1DF9 C |  SHRLP1 :                      1E00 C |
 SHRT1 :                       1E02 C |  SIGNON :                       2B8 C |
 SIGNS :                       2080 C |  SIN :                         255A C |
 SIN1 :                        258A C |  SIN2 :                        2595 C |
 SIN3 :                        25A4 C |  SINTAB :                      25B2 C |
 SIXDIG :                      2285 C |  SMPVAR :                      196D C |
 SMSER1 :                      2496 C |  SN :                             2 - |
 SNERR :                        607 C |  SPCFST :                      2269 C |
 SPCFST1 :                     2274 C |  SPCFST2 :                     227A C |
 SPCLP :                       0FF3 C |  SQR :                         23B4 C |
 SRCHLN :                       755 C |  SRCHLP :                       75A C |
 SRCHLP1 :                      767 C |  SRCHLP2 :                      782 C |
 SRCHLP3 :                      786 C |  SSTSA :                       1A91 C |
 ST :                            1E - |  STACK :                       32B2 - |
 STAKFP :                      202D C |  STALL :                       0C41 C |
 STALL1 :                      0C49 C | *START :                          0 C |
 STARTB :                       210 C |  STKTHS :                      1276 C |
 STLOOK :                      33A9 - |  STOP :                        0C55 C |
 STOP1 :                       0C58 C |  STORED :                      0D74 C |
 STORED1 :                     0D85 C |  STORED2 :                     0D97 C |
 STPOOL :                      19BF C |  STR :                         1831 C |
 STR1 :                        1837 C |  STRADD :                      19C2 C |
 STRADD1 :                     19D1 C |  STRADD2 :                     19D6 C |
 STRADD3 :                     19E4 C |  STRADD4 :                     19F8 C |
 STRBOT :                      330F - |  STRENT :                      10D7 C |
 STRSPC :                       570 C |  STTLIN :                      0F7A C |
 SUBCDE :                      1CA5 C |  SUBPHL :                      1C9E C |
 SUMLP :                       24A3 C |  SUMLP1 :                      24A6 C |
 SUMLP2 :                      24AD C |  SUMSER :                      2487 C |
 SUPTLZ :                      2340 C |  SVNAM2 :                      14CA C |
 SVSTAD :                      186C C |  SYSSTK :                      3200 - |
 TAN :                         25C7 C |  TB_WORK :                     3200 - |
 TESTOS :                      192D C |  TESTOS1 :                     1938 C |
 TESTR :                       18F8 C | *TIME :                  "21:50:50" - |
 TM :                            18 - |  TMERR :                        61F C |
 TMPSTR :                      330B - |  TMSTPL :                      32FF - |
 TMSTPT :                      32FD - |  TOPOOL :                      1B37 C |
 TOSTRA :                      1AA2 C | *TRUE :                           1 - |
 TRYAGN :                      2306 C |  TSALP :                       1AA4 C |
 TSALP1 :                      1AA9 C | *TSTBIT :                      27B4 C |
 TSTBRK :                      0C2B C |  TSTBRK1 :                     0C31 C |
 TSTNUM :                      11D9 C |  TSTOPL :                      18AB C |
 TSTOPL1 :                     18CB C |  TSTRED :                      13DB C |
 TSTRED1 :                     13F2 C |  TSTREM :                       8C3 C |
 TSTREM1 :                      8CA C |  TSTSGN :                      1FE8 C |
 TSTSGN1 :                     1FF0 C |  TSTSTR :                      11DD C |
 TTYLIN :                       935 C |  TYPE :                        32F9 - |
 UF :                            22 - |  UFERR :                        617 C |
 UL :                            0E - |  ULERR :                       0DF5 C |
 UNITY :                       1E1A C |  UPDATA :                      0C24 C |
 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 111 - 8/7/2025 21:50:51


 USR :                          514 C |  VAL :                         1BCF C |
 VAL0 :                        1BD7 C |  VAL1 :                        1BFA C |
 VAL2 :                        1C03 C |  VAL3 :                        1C06 C |
 VAREND :                      3324 - |  VBRKEM :                       3F8 D |
*VERSION :                     142F - |  VGETCH :                       3EC D |
 VKBHIT :                       3F0 D |  VPUTCH :                       3F4 D |
 WAIT :                        1C29 C |  WAITLP :                      1C42 C |
*WARM :                         20D C |  WARMST :                       298 C |
 WIDTH :                       2634 C |  WORDS :                        369 C |
 WORDTB :                       488 C |  WRKSPC :                      3245 - |
 XXXXX :                        2A7 C |  ZDATA :                         83 - |
*ZDIV :                         0AF - |  ZEND :                          80 - |
 ZEQUAL :                       0B4 - |  ZERARY :                      16A2 C |
 ZERBYT :                       581 - |  ZEROLP :                      1576 C |
 ZEROSUP :                     273F C |  ZFN :                          0A7 - |
 ZFOR :                          81 - |  ZGOSUB :                        8C - |
 ZGOTO :                         88 - |  ZGTR :                         0B3 - |
 ZLEFT :                        0CF - |  ZLTH :                         0B5 - |
 ZMINUS :                       0AD - |  ZNEW :                         0A4 - |
 ZNOT :                         0AA - |  ZONELP :                      0FC3 C |
 ZOR :                          0B2 - |  ZPLUS :                        0AC - |
*ZPOINT :                       0C7 - |  ZPRINT :                        9E - |
 ZREM :                          8E - |  ZSGN :                         0B6 - |
 ZSPC :                         0A8 - |  ZSTEP :                        0AB - |
 ZTAB :                         0A5 - |  ZTHEN :                        0A9 - |
*ZTIMES :                       0AE - |  ZTO :                          0A6 - |

    884 symbols
     32 unused symbols

 AS V1.42 Beta [Bld 271] - Source File 8088basic.asm - Page 112 - 8/7/2025 21:50:51


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.37 seconds assembly time

   6145 lines source file
      5 passes
      0 errors
      0 warnings
